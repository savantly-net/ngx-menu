{"version":3,"file":"ngx-menu.umd.js","sources":["../ts/src/app/modules/menu/menu.module.ts","../../node_modules/@angular/src/lib/module.ts","../../node_modules/@angular/src/lib/flexbox/api/style.ts","../../node_modules/@angular/src/lib/utils/style-transforms.ts","../../node_modules/@angular/src/lib/flexbox/api/class.ts","../../node_modules/@angular/src/lib/flexbox/api/base-adapter.ts","../../node_modules/@angular/src/lib/flexbox/api/layout-gap.ts","../../node_modules/@angular/src/lib/flexbox/api/layout-align.ts","../../node_modules/@angular/src/lib/flexbox/api/flex-order.ts","../../node_modules/@angular/src/lib/flexbox/api/flex-offset.ts","../../node_modules/@angular/src/lib/flexbox/api/flex-fill.ts","../../node_modules/@angular/src/lib/flexbox/api/flex-align.ts","../../node_modules/@angular/src/lib/flexbox/api/show-hide.ts","../../node_modules/@angular/src/lib/flexbox/api/flex.ts","../../node_modules/@angular/src/lib/utils/basis-validator.ts","../../node_modules/@angular/src/lib/flexbox/api/layout-wrap.ts","../../node_modules/@angular/src/lib/flexbox/api/layout.ts","../../node_modules/@angular/src/lib/flexbox/api/base.ts","../../node_modules/@angular/src/lib/flexbox/responsive/responsive-activation.ts","../../node_modules/@angular/src/lib/utils/style-utils.ts","../../node_modules/@angular/src/lib/utils/auto-prefixer.ts","../../node_modules/@angular/src/lib/utils/layout-validator.ts","../../node_modules/@angular/src/lib/media-query/media-monitor-provider.ts","../../node_modules/@angular/src/lib/media-query/_module.ts","../../node_modules/@angular/src/lib/media-query/breakpoints/break-points-provider.ts","../../node_modules/@angular/src/lib/utils/breakpoint-tools.ts","../../node_modules/@angular/src/lib/media-query/breakpoints/data/orientation-break-points.ts","../../node_modules/@angular/src/lib/media-query/breakpoints/data/break-points.ts","../../node_modules/@angular/src/lib/media-query/observable-media-provider.ts","../../node_modules/@angular/src/lib/media-query/observable-media.ts","../../node_modules/@angular/src/lib/media-query/media-monitor.ts","../../node_modules/@angular/src/lib/utils/add-alias.ts","../../node_modules/@angular/src/lib/utils/object-extend.ts","../../node_modules/@angular/src/lib/media-query/breakpoints/break-point-registry.ts","../../node_modules/@angular/src/lib/media-query/breakpoints/break-points-token.ts","../../node_modules/@angular/src/lib/media-query/match-media.ts","../../node_modules/@angular/src/lib/media-query/media-change.ts","../../node_modules/@angular/src/lib/version.ts","../ts/src/app/modules/menu/menu.component.ts","../../node_modules/src/lib/toolbar/index.ts","../../node_modules/src/lib/toolbar/toolbar-module.ts","../../node_modules/src/lib/toolbar/toolbar.ts","../../node_modules/src/lib/tabs/tabs-module.ts","../../node_modules/src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../node_modules/src/lib/tabs/tab-header.ts","../../node_modules/src/lib/tabs/tab-label-wrapper.ts","../../node_modules/src/lib/tabs/tab-group.ts","../../node_modules/src/lib/tabs/tab-body.ts","../../node_modules/src/lib/tabs/tab.ts","../../node_modules/src/lib/tabs/tab-label.ts","../../node_modules/src/lib/tabs/ink-bar.ts","../../node_modules/src/lib/table/index.ts","../../node_modules/src/lib/table/table-module.ts","../../node_modules/src/lib/table/row.ts","../../node_modules/src/lib/table/cell.ts","../../node_modules/src/lib/table/table.ts","../../node_modules/src/lib/stepper/index.ts","../../node_modules/src/lib/stepper/stepper-module.ts","../../node_modules/src/lib/stepper/stepper-button.ts","../../node_modules/src/lib/stepper/stepper.ts","../../node_modules/src/lib/stepper/step-header.ts","../../node_modules/src/lib/stepper/step-label.ts","../../node_modules/src/cdk/stepper/index.ts","../../node_modules/src/cdk/stepper/public_api.ts","../../node_modules/src/cdk/stepper/stepper-button.ts","../../node_modules/src/cdk/stepper/stepper.ts","../../node_modules/src/cdk/stepper/step-label.ts","../../node_modules/src/lib/sort/index.ts","../../node_modules/src/lib/sort/sort-module.ts","../../node_modules/src/lib/sort/sort-header.ts","../../node_modules/src/lib/sort/sort-header-intl.ts","../../node_modules/src/lib/sort/sort.ts","../../node_modules/src/lib/sort/sort-errors.ts","../../node_modules/src/cdk/table/index.ts","../../node_modules/src/cdk/table/public_api.ts","../../node_modules/src/cdk/table/table.ts","../../node_modules/src/cdk/table/table-errors.ts","../../node_modules/src/cdk/table/cell.ts","../../node_modules/src/cdk/table/row.ts","../../node_modules/src/lib/snack-bar/index.ts","../../node_modules/src/lib/snack-bar/snack-bar-module.ts","../../node_modules/src/lib/snack-bar/snack-bar.ts","../../node_modules/src/lib/snack-bar/simple-snack-bar.ts","../../node_modules/src/lib/snack-bar/snack-bar-container.ts","../../node_modules/src/lib/snack-bar/snack-bar-ref.ts","../../node_modules/src/lib/snack-bar/snack-bar-config.ts","../../node_modules/src/lib/slider/slider-module.ts","../../node_modules/src/lib/slider/slider.ts","../../node_modules/src/lib/slide-toggle/index.ts","../../node_modules/src/lib/slide-toggle/slide-toggle-module.ts","../../node_modules/src/lib/slide-toggle/slide-toggle.ts","../../node_modules/src/lib/sidenav/index.ts","../../node_modules/src/lib/sidenav/sidenav-module.ts","../../node_modules/src/lib/sidenav/sidenav.ts","../../node_modules/src/lib/sidenav/drawer.ts","../../node_modules/src/lib/radio/index.ts","../../node_modules/src/lib/radio/radio-module.ts","../../node_modules/src/lib/radio/radio.ts","../../node_modules/src/lib/progress-spinner/index.ts","../../node_modules/src/lib/progress-spinner/progress-spinner-module.ts","../../node_modules/src/lib/progress-spinner/progress-spinner.ts","../../node_modules/src/lib/progress-bar/index.ts","../../node_modules/src/lib/progress-bar/progress-bar-module.ts","../../node_modules/src/lib/progress-bar/progress-bar.ts","../../node_modules/src/lib/paginator/index.ts","../../node_modules/src/lib/paginator/paginator-module.ts","../../node_modules/src/lib/paginator/paginator.ts","../../node_modules/src/lib/paginator/paginator-intl.ts","../../node_modules/src/lib/tooltip/index.ts","../../node_modules/src/lib/tooltip/tooltip-module.ts","../../node_modules/src/lib/tooltip/tooltip.ts","../../node_modules/src/lib/select/index.ts","../../node_modules/src/lib/select/select-module.ts","../../node_modules/src/lib/select/select.ts","../../node_modules/src/lib/select/select-errors.ts","../../node_modules/src/lib/select/select-animations.ts","../../node_modules/src/lib/menu/index.ts","../../node_modules/src/lib/menu/menu-module.ts","../../node_modules/src/lib/menu/menu-trigger.ts","../../node_modules/src/lib/menu/menu-directive.ts","../../node_modules/src/lib/menu/menu-animations.ts","../../node_modules/src/lib/menu/menu-item.ts","../../node_modules/src/lib/menu/menu-errors.ts","../../node_modules/src/lib/list/index.ts","../../node_modules/src/lib/list/list-module.ts","../../node_modules/src/lib/list/selection-list.ts","../../node_modules/src/lib/list/list.ts","../../node_modules/src/lib/input/index.ts","../../node_modules/src/lib/input/input-module.ts","../../node_modules/src/lib/input/autosize.ts","../../node_modules/src/lib/input/input.ts","../../node_modules/src/lib/input/input-errors.ts","../../node_modules/src/lib/grid-list/index.ts","../../node_modules/src/lib/grid-list/grid-list-module.ts","../../node_modules/src/lib/grid-list/grid-list.ts","../../node_modules/src/lib/grid-list/tile-styler.ts","../../node_modules/src/lib/grid-list/tile-coordinator.ts","../../node_modules/src/lib/grid-list/grid-tile.ts","../../node_modules/src/lib/grid-list/grid-list-measure.ts","../../node_modules/src/lib/expansion/index.ts","../../node_modules/src/lib/expansion/expansion-module.ts","../../node_modules/src/lib/expansion/expansion-panel-header.ts","../../node_modules/src/lib/expansion/expansion-panel.ts","../../node_modules/src/lib/expansion/accordion-item.ts","../../node_modules/src/lib/expansion/accordion.ts","../../node_modules/src/lib/datepicker/datepicker-module.ts","../../node_modules/src/lib/datepicker/year-view.ts","../../node_modules/src/lib/datepicker/month-view.ts","../../node_modules/src/lib/datepicker/datepicker-toggle.ts","../../node_modules/src/lib/datepicker/datepicker-input.ts","../../node_modules/src/lib/datepicker/datepicker.ts","../../node_modules/src/lib/datepicker/calendar-body.ts","../../node_modules/src/lib/datepicker/calendar.ts","../../node_modules/src/lib/datepicker/datepicker-intl.ts","../../node_modules/src/lib/datepicker/datepicker-errors.ts","../../node_modules/src/lib/datepicker/coerce-date-property.ts","../../node_modules/src/lib/icon/index.ts","../../node_modules/src/lib/icon/icon-module.ts","../../node_modules/src/lib/icon/icon.ts","../../node_modules/src/lib/icon/icon-registry.ts","../../node_modules/src/lib/dialog/index.ts","../../node_modules/src/lib/dialog/dialog-module.ts","../../node_modules/src/lib/dialog/dialog-content-directives.ts","../../node_modules/src/lib/dialog/dialog.ts","../../node_modules/src/lib/dialog/dialog-ref.ts","../../node_modules/src/lib/dialog/dialog-container.ts","../../node_modules/src/lib/dialog/dialog-config.ts","../../node_modules/src/lib/chips/index.ts","../../node_modules/src/lib/chips/chips-module.ts","../../node_modules/src/lib/chips/chip-input.ts","../../node_modules/src/lib/chips/chip-list.ts","../../node_modules/src/lib/chips/chip.ts","../../node_modules/src/cdk/collections/selection.ts","../../node_modules/src/cdk/collections/data-source.ts","../../node_modules/src/lib/checkbox/index.ts","../../node_modules/src/lib/checkbox/checkbox-module.ts","../../node_modules/src/lib/checkbox/checkbox-required-validator.ts","../../node_modules/src/lib/checkbox/checkbox.ts","../../node_modules/src/cdk/observers/index.ts","../../node_modules/src/cdk/observers/observe-content.ts","../../node_modules/src/lib/card/index.ts","../../node_modules/src/lib/card/card-module.ts","../../node_modules/src/lib/card/card.ts","../../node_modules/src/lib/button-toggle/index.ts","../../node_modules/src/lib/button-toggle/button-toggle-module.ts","../../node_modules/src/lib/button-toggle/button-toggle.ts","../../node_modules/src/lib/button/index.ts","../../node_modules/src/lib/button/button-module.ts","../../node_modules/src/lib/button/button.ts","../../node_modules/src/lib/autocomplete/index.ts","../../node_modules/src/lib/autocomplete/autocomplete-module.ts","../../node_modules/src/lib/autocomplete/autocomplete-trigger.ts","../../node_modules/src/lib/autocomplete/autocomplete.ts","../../node_modules/src/lib/form-field/index.ts","../../node_modules/src/lib/form-field/form-field-module.ts","../../node_modules/src/lib/form-field/form-field.ts","../../node_modules/src/lib/form-field/suffix.ts","../../node_modules/src/lib/form-field/prefix.ts","../../node_modules/src/lib/form-field/placeholder.ts","../../node_modules/src/lib/form-field/hint.ts","../../node_modules/src/lib/form-field/form-field-errors.ts","../../node_modules/src/lib/form-field/form-field-control.ts","../../node_modules/src/lib/form-field/error.ts","../../node_modules/src/lib/core/style/index.ts","../../node_modules/src/lib/core/style/apply-transform.ts","../../node_modules/src/lib/core/portal/portal-injector.ts","../../node_modules/src/lib/core/option/index.ts","../../node_modules/src/lib/core/option/option.ts","../../node_modules/src/lib/core/option/optgroup.ts","../../node_modules/src/lib/core/selection/index.ts","../../node_modules/src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../node_modules/src/lib/core/ripple/index.ts","../../node_modules/src/lib/core/ripple/ripple.ts","../../node_modules/src/lib/core/ripple/ripple-renderer.ts","../../node_modules/src/lib/core/ripple/ripple-ref.ts","../../node_modules/src/lib/core/line/line.ts","../../node_modules/src/lib/core/gestures/gesture-config.ts","../../node_modules/src/lib/core/error/error-options.ts","../../node_modules/src/lib/core/datetime/index.ts","../../node_modules/src/lib/core/datetime/native-date-formats.ts","../../node_modules/src/lib/core/datetime/native-date-adapter.ts","../../node_modules/src/lib/core/util/object-extend.ts","../../node_modules/src/lib/core/datetime/date-adapter.ts","../../node_modules/src/lib/core/coordination/unique-selection-dispatcher.ts","../../node_modules/src/lib/core/common-behaviors/tabindex.ts","../../node_modules/src/lib/core/common-behaviors/disable-ripple.ts","../../node_modules/src/lib/core/common-behaviors/color.ts","../../node_modules/src/lib/core/common-behaviors/disabled.ts","../../node_modules/src/lib/core/common-behaviors/common-module.ts","../../node_modules/src/lib/core/compatibility/compatibility.ts","../../node_modules/src/lib/core/animation/animation.ts","../../node_modules/src/cdk/overlay/index.ts","../../node_modules/src/cdk/overlay/public_api.ts","../../node_modules/src/cdk/overlay/fullscreen-overlay-container.ts","../../node_modules/src/cdk/overlay/overlay-directives.ts","../../node_modules/src/cdk/overlay/overlay.ts","../../node_modules/src/cdk/overlay/scroll/scroll-strategy-options.ts","../../node_modules/src/cdk/overlay/scroll/reposition-scroll-strategy.ts","../../node_modules/src/cdk/overlay/scroll/block-scroll-strategy.ts","../../node_modules/src/cdk/overlay/scroll/close-scroll-strategy.ts","../../node_modules/src/cdk/overlay/scroll/scroll-strategy.ts","../../node_modules/src/cdk/overlay/overlay-container.ts","../../node_modules/src/cdk/overlay/position/overlay-position-builder.ts","../../node_modules/src/cdk/overlay/position/global-position-strategy.ts","../../node_modules/src/cdk/overlay/position/connected-position-strategy.ts","../../node_modules/src/cdk/overlay/position/scroll-clip.ts","../../node_modules/src/cdk/overlay/position/connected-position.ts","../../node_modules/src/cdk/overlay/overlay-ref.ts","../../node_modules/src/cdk/overlay/overlay-config.ts","../../node_modules/src/cdk/overlay/scroll/noop-scroll-strategy.ts","../../node_modules/src/cdk/portal/index.ts","../../node_modules/src/cdk/portal/portal-directives.ts","../../node_modules/src/cdk/portal/dom-portal-host.ts","../../node_modules/src/cdk/portal/portal.ts","../../node_modules/src/cdk/portal/portal-errors.ts","../../node_modules/src/cdk/scrolling/index.ts","../../node_modules/src/cdk/scrolling/public_api.ts","../../node_modules/src/cdk/scrolling/viewport-ruler.ts","../../node_modules/src/cdk/scrolling/scrollable.ts","../../node_modules/src/cdk/scrolling/scroll-dispatcher.ts","../../node_modules/src/cdk/bidi/index.ts","../../node_modules/src/cdk/bidi/public_api.ts","../../node_modules/src/cdk/bidi/dir.ts","../../node_modules/src/cdk/bidi/directionality.ts","../../node_modules/src/cdk/a11y/public_api.ts","../../node_modules/src/cdk/a11y/focus-key-manager.ts","../../node_modules/src/cdk/a11y/fake-mousedown.ts","../../node_modules/src/cdk/a11y/activedescendant-key-manager.ts","../../node_modules/src/cdk/a11y/list-key-manager.ts","../../node_modules/src/cdk/a11y/focus-monitor.ts","../../node_modules/src/cdk/a11y/aria-describer.ts","../../node_modules/src/cdk/a11y/aria-reference.ts","../../node_modules/src/cdk/a11y/live-announcer.ts","../../node_modules/src/cdk/a11y/focus-trap.ts","../../node_modules/src/cdk/a11y/interactivity-checker.ts","../../node_modules/src/cdk/keycodes/keycodes.ts","../../node_modules/src/cdk/rxjs/rx-operators.ts","../../node_modules/src/cdk/rxjs/rx-chain.ts","../../node_modules/src/cdk/platform/public_api.ts","../../node_modules/src/cdk/platform/features.ts","../../node_modules/src/cdk/platform/platform.ts","../../node_modules/src/cdk/coercion/number-property.ts","../../node_modules/src/cdk/coercion/boolean-property.ts","../../node_modules/tslib/tslib.es6.js","../ts/src/app/modules/menu/menu.service.ts","../../node_modules/@savantly/ngx-security/@savantly/~/@savantly/ngx-security/src/app/modules/security/gaurds/role-gaurd.service.ts","../../node_modules/@savantly/ngx-security/@savantly/~/@savantly/ngx-security/src/app/modules/security/gaurds/auth-gaurd.service.ts","../../node_modules/@savantly/ngx-security/@savantly/~/@savantly/ngx-security/src/app/modules/security/authentication/authentication.service.ts","../../node_modules/@savantly/ngx-security/@savantly/~/@savantly/ngx-security/src/app/modules/security/security-mock.service.ts","../../node_modules/@savantly/ngx-security/@savantly/~/@savantly/ngx-security/src/app/modules/security/security.service.ts","../../node_modules/@savantly/ngx-security/@savantly/~/@savantly/ngx-security/src/app/modules/security/security.module.ts","../../node_modules/@savantly/ngx-security/@savantly/~/@savantly/ngx-security/src/app/modules/security/user/user.component.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MenuComponent } from './menu.component';\nimport { MdMenuModule, MdToolbarModule, MdButtonModule } from '@angular/material';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nexport class MenuModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    MdMenuModule, MdToolbarModule, MdButtonModule, FlexLayoutModule\n  ],\n  exports: [MenuComponent],\n  declarations: [MenuComponent],\n  providers: []\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MenuModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMenuModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMenuModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ModuleWithProviders, NgModule} from '@angular/core';\nimport {MediaQueriesModule} from './media-query/_module';\n\nimport {BreakPoint} from './media-query/breakpoints/break-point';\nimport {\n  BreakPointProviderOptions,\n  DEFAULT_BREAKPOINTS_PROVIDER,\n  CUSTOM_BREAKPOINTS_PROVIDER_FACTORY\n} from './media-query/breakpoints/break-points-provider';\nimport {MEDIA_MONITOR_PROVIDER} from './media-query/media-monitor-provider';\nimport {OBSERVABLE_MEDIA_PROVIDER} from './media-query/observable-media-provider';\n\nimport {FlexDirective} from './flexbox/api/flex';\nimport {LayoutDirective} from './flexbox/api/layout';\nimport {ShowHideDirective} from './flexbox/api/show-hide';\nimport {FlexAlignDirective} from './flexbox/api/flex-align';\nimport {FlexFillDirective} from './flexbox/api/flex-fill';\nimport {FlexOffsetDirective} from './flexbox/api/flex-offset';\nimport {FlexOrderDirective} from './flexbox/api/flex-order';\nimport {LayoutAlignDirective} from './flexbox/api/layout-align';\nimport {LayoutWrapDirective} from './flexbox/api/layout-wrap';\nimport {LayoutGapDirective} from './flexbox/api/layout-gap';\nimport {ClassDirective} from './flexbox/api/class';\nimport {StyleDirective} from './flexbox/api/style';\n\n/**\n * Since the equivalent results are easily achieved with a css class attached to each\n * layout child, these have been deprecated and removed from the API.\n *\n *  import {LayoutPaddingDirective} from './flexbox/api/layout-padding';\n *  import {LayoutMarginDirective} from './flexbox/api/layout-margin';\n */\n\nconst ALL_DIRECTIVES = [\n  LayoutDirective,\n  LayoutWrapDirective,\n  LayoutGapDirective,\n  LayoutAlignDirective,\n  FlexDirective,\n  FlexOrderDirective,\n  FlexOffsetDirective,\n  FlexFillDirective,\n  FlexAlignDirective,\n  ShowHideDirective,\n  ClassDirective,\n  StyleDirective\n];\n\n/**\n *\n */\n@NgModule({\n  imports: [MediaQueriesModule],\n  exports: [MediaQueriesModule, ...ALL_DIRECTIVES],\n  declarations: [...ALL_DIRECTIVES],\n  providers: [\n    MEDIA_MONITOR_PROVIDER,\n    DEFAULT_BREAKPOINTS_PROVIDER,   // Extend defaults with internal custom breakpoints\n    OBSERVABLE_MEDIA_PROVIDER\n  ]\n})\nexport class FlexLayoutModule {\n  /**\n   * External uses can easily add custom breakpoints AND include internal orientations\n   * breakpoints; which are not available by default.\n   *\n   * !! Selector aliases are not auto-configured. Developers must subclass\n   * the API directives to support extra selectors for the orientations breakpoints !!\n   */\n  static provideBreakPoints(breakpoints: BreakPoint[],\n                            options ?: BreakPointProviderOptions): ModuleWithProviders {\n    return {\n      ngModule: FlexLayoutModule,\n      providers: [\n        CUSTOM_BREAKPOINTS_PROVIDER_FACTORY(breakpoints, options || {orientations: false})\n      ]\n    };\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Input,\n  KeyValueDiffers,\n  OnDestroy,\n  OnChanges,\n  Optional,\n  Renderer,\n  Renderer2,\n  SecurityContext,\n  Self,\n  SimpleChanges,\n} from '@angular/core';\nimport {NgStyle} from '@angular/common';\n\nimport {BaseFxDirective} from './base';\nimport {BaseFxDirectiveAdapter} from './base-adapter';\nimport {MediaChange} from '../../media-query/media-change';\nimport {MediaMonitor} from '../../media-query/media-monitor';\nimport {extendObject} from '../../utils/object-extend';\nimport {DomSanitizer} from '@angular/platform-browser';\n\nimport {\n  NgStyleRawList,\n  NgStyleType,\n  NgStyleSanitizer,\n  ngStyleUtils as _\n} from '../../utils/style-transforms';\n\n/**\n * Directive to add responsive support for ngStyle.\n *\n */\n@Directive({\n  selector: `\n    [style.xs], [style.sm], [style.md], [style.lg], [style.xl],\n    [style.lt-sm], [style.lt-md], [style.lt-lg], [style.lt-xl],\n    [style.gt-xs], [style.gt-sm], [style.gt-md], [style.gt-lg],\n    [ngStyle],\n    [ngStyle.xs], [ngStyle.sm], [ngStyle.lg], [ngStyle.xl],\n    [ngStyle.lt-sm], [ngStyle.lt-md], [ngStyle.lt-lg], [ngStyle.lt-xl],\n    [ngStyle.gt-xs], [ngStyle.gt-sm], [ngStyle.gt-md], [ngStyle.gt-lg]\n  `\n})\nexport class StyleDirective extends BaseFxDirective\n    implements DoCheck, OnChanges, OnDestroy {\n\n  /**\n   * Intercept ngStyle assignments so we cache the default styles\n   * which are merged with activated styles or used as fallbacks.\n   */\n  @Input('ngStyle')\n  set styleBase(val: NgStyleType) {\n    this._base.cacheInput('style', val, true);\n    this._ngStyleInstance.ngStyle = this._base.inputMap['style'];\n  }\n\n  /* tslint:disable */\n  @Input('ngStyle.xs')    set ngStyleXs(val: NgStyleType) { this._base.cacheInput('styleXs', val, true); }\n  @Input('ngStyle.sm')    set ngStyleSm(val: NgStyleType) {  this._base.cacheInput('styleSm', val, true); };\n  @Input('ngStyle.md')    set ngStyleMd(val: NgStyleType) { this._base.cacheInput('styleMd', val, true); };\n  @Input('ngStyle.lg')    set ngStyleLg(val: NgStyleType) { this._base.cacheInput('styleLg', val, true);};\n  @Input('ngStyle.xl')    set ngStyleXl(val: NgStyleType) { this._base.cacheInput('styleXl', val, true); };\n\n  @Input('ngStyle.lt-sm') set ngStyleLtSm(val: NgStyleType) { this._base.cacheInput('styleLtSm', val, true); };\n  @Input('ngStyle.lt-md') set ngStyleLtMd(val: NgStyleType) { this._base.cacheInput('styleLtMd', val, true); };\n  @Input('ngStyle.lt-lg') set ngStyleLtLg(val: NgStyleType) { this._base.cacheInput('styleLtLg', val, true); };\n  @Input('ngStyle.lt-xl') set ngStyleLtXl(val: NgStyleType) { this._base.cacheInput('styleLtXl', val, true); };\n\n  @Input('ngStyle.gt-xs') set ngStyleGtXs(val: NgStyleType) { this._base.cacheInput('styleGtXs', val, true); };\n  @Input('ngStyle.gt-sm') set ngStyleGtSm(val: NgStyleType) { this._base.cacheInput('styleGtSm', val, true);} ;\n  @Input('ngStyle.gt-md') set ngStyleGtMd(val: NgStyleType) { this._base.cacheInput('styleGtMd', val, true);};\n  @Input('ngStyle.gt-lg') set ngStyleGtLg(val: NgStyleType) { this._base.cacheInput('styleGtLg', val, true); };\n\n  /** Deprecated selectors */\n  @Input('style.xs')      set styleXs(val: NgStyleType) { this._base.cacheInput('styleXs', val, true); }\n  @Input('style.sm')      set styleSm(val: NgStyleType) { this._base.cacheInput('styleSm', val, true); };\n  @Input('style.md')      set styleMd(val: NgStyleType) { this._base.cacheInput('styleMd', val, true);};\n  @Input('style.lg')      set styleLg(val: NgStyleType) { this._base.cacheInput('styleLg', val, true); };\n  @Input('style.xl')      set styleXl(val: NgStyleType) { this._base.cacheInput('styleXl', val, true); };\n\n  @Input('style.lt-sm')   set styleLtSm(val: NgStyleType) { this._base.cacheInput('styleLtSm', val, true); };\n  @Input('style.lt-md')   set styleLtMd(val: NgStyleType) { this._base.cacheInput('styleLtMd', val, true); };\n  @Input('style.lt-lg')   set styleLtLg(val: NgStyleType) { this._base.cacheInput('styleLtLg', val, true);};\n  @Input('style.lt-xl')   set styleLtXl(val: NgStyleType) { this._base.cacheInput('styleLtXl', val, true); };\n\n  @Input('style.gt-xs')   set styleGtXs(val: NgStyleType) { this._base.cacheInput('styleGtXs', val, true); };\n  @Input('style.gt-sm')   set styleGtSm(val: NgStyleType) { this._base.cacheInput('styleGtSm', val, true); };\n  @Input('style.gt-md')   set styleGtMd(val: NgStyleType) { this._base.cacheInput('styleGtMd', val, true);};\n  @Input('style.gt-lg')   set styleGtLg(val: NgStyleType) { this._base.cacheInput('styleGtLg', val, true); };\n\n  /* tslint:enable */\n  /**\n   *  Constructor for the ngStyle subclass; which adds selectors and\n   *  a MediaQuery Activation Adapter\n   */\n  constructor(private monitor: MediaMonitor,\n              protected _sanitizer: DomSanitizer,\n              _ngEl: ElementRef, _renderer: Renderer2,\n              _differs: KeyValueDiffers, _oldRenderer: Renderer,\n              @Optional() @Self() private _ngStyleInstance: NgStyle) {\n\n    super(monitor, _ngEl, _renderer);\n\n    // Build adapter, `cacheInput()` interceptor, and get current inline style if any\n    this._buildAdapter(this.monitor, _ngEl, _renderer);\n    this._base.cacheInput('style', _ngEl.nativeElement.getAttribute('style'), true);\n\n    // Create an instance NgStyle Directive instance only if `ngStyle=\"\"` has NOT been defined on\n    // the same host element; since the responsive versions may be defined...\n    if ( !this._ngStyleInstance ) {\n      this._ngStyleInstance = new NgStyle(_differs, _ngEl, _oldRenderer);\n    }\n  }\n\n  // ******************************************************************\n  // Lifecycle Hooks\n  // ******************************************************************\n\n  /**\n   * For @Input changes on the current mq activation property\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    if (this._base.activeKey in changes) {\n      this._updateStyle();\n    }\n  }\n\n  /**\n   * For ChangeDetectionStrategy.onPush and ngOnChanges() updates\n   */\n  ngDoCheck() {\n    if (!this._base.hasMediaQueryListener) {\n      this._configureMQListener();\n    }\n    this._ngStyleInstance.ngDoCheck();\n  }\n\n  ngOnDestroy() {\n    this._base.ngOnDestroy();\n    this._ngStyleInstance = null;\n  }\n\n  // ******************************************************************\n  // Internal Methods\n  // ******************************************************************\n\n  /**\n     * Build an mqActivation object that bridges\n     * mql change events to onMediaQueryChange handlers\n     */\n    protected _configureMQListener() {\n      this._base.listenForMediaQueryChanges('style', '', (changes: MediaChange) => {\n        this._updateStyle(changes.value);\n\n        // trigger NgClass::_applyIterableChanges()\n        this._ngStyleInstance.ngDoCheck();\n      });\n    }\n\n  // ************************************************************************\n  // Private Internal Methods\n  // ************************************************************************\n\n  /**\n   * Use the currently activated input property and assign to\n   * `ngStyle` which does the style injections...\n   */\n  protected _updateStyle(value?: NgStyleType) {\n    let style = value || this._base.queryInput('style') || '';\n    if (this._base.mqActivation) {\n      style = this._base.mqActivation.activatedInput;\n    }\n\n    // Delegate subsequent activity to the NgStyle logic\n    this._ngStyleInstance.ngStyle = style;\n  }\n\n\n  /**\n   * Build MediaQuery Activation Adapter\n   * This adapter manages listening to mediaQuery change events and identifying\n   * which property value should be used for the style update\n   */\n  protected _buildAdapter(monitor: MediaMonitor, _ngEl: ElementRef, _renderer: Renderer2) {\n    this._base = new BaseFxDirectiveAdapter('style', monitor, _ngEl, _renderer);\n    this._buildCacheInterceptor();\n  }\n\n  /**\n   * Build intercept to convert raw strings to ngStyleMap\n   */\n  protected _buildCacheInterceptor() {\n    let cacheInput = this._base.cacheInput.bind(this._base);\n    this._base.cacheInput = (key?: string, source?: any, cacheRaw = false, merge = true) => {\n      let styles = this._buildStyleMap(source);\n      if (merge) {\n        styles = extendObject({}, this._base.inputMap['style'], styles);\n      }\n      cacheInput(key, styles, cacheRaw);\n    };\n  }\n  /**\n   * Convert raw strings to ngStyleMap; which is required by ngStyle\n   * NOTE: Raw string key-value pairs MUST be delimited by `;`\n   *       Comma-delimiters are not supported due to complexities of\n   *       possible style values such as `rgba(x,x,x,x)` and others\n   */\n  protected _buildStyleMap(styles: NgStyleType) {\n    let sanitizer: NgStyleSanitizer = (val: any) => {\n      // Always safe-guard (aka sanitize) style property values\n      return this._sanitizer.sanitize(SecurityContext.STYLE, val);\n    };\n    if (styles) {\n      switch ( _.getType(styles) ) {\n        case 'string':  return _.buildMapFromList(_.buildRawList(styles), sanitizer);\n        case 'array' :  return _.buildMapFromList(styles as NgStyleRawList, sanitizer);\n        case 'set'   :  return _.buildMapFromSet(styles, sanitizer);\n        default      :  return _.buildMapFromSet(styles, sanitizer);\n      }\n    }\n    return styles;\n  }\n\n  /**\n   * Special adapter to cross-cut responsive behaviors\n   * into the StyleDirective\n   */\n  protected _base: BaseFxDirectiveAdapter;\n\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport type NgStyleRawList = string[];\nexport type NgStyleMap = {[klass: string]: string};\n// NgStyle selectors accept NgStyleType values\nexport type NgStyleType = string | Set<string> | NgStyleRawList | NgStyleMap;\n\n/**\n * Callback function for SecurityContext.STYLE sanitization\n */\nexport type NgStyleSanitizer = (val: any) => string;\n\n/**\n * NgStyle allowed inputs\n */\nexport class NgStyleKeyValue {\n  constructor(public key: string, public value: string, noQuotes = true) {\n    this.key = noQuotes ? key.replace(/['\"]/g, '').trim() : key.trim();\n\n    this.value = noQuotes ? value.replace(/['\"]/g, '').trim() : value.trim();\n    this.value = this.value.replace(/;/, '');\n  }\n}\n\n/**\n * Transform Operators for @angular/flex-layout NgStyle Directive\n */\nexport const ngStyleUtils = {\n  getType,\n  buildRawList,\n  buildMapFromList,\n  buildMapFromSet\n};\n\nfunction getType(target: any): string {\n  let what = typeof target;\n  if (what === 'object') {\n    return (target.constructor === Array) ? 'array' :\n        (target.constructor === Set ) ? 'set' : 'object';\n  }\n  return what;\n}\n\n/**\n * Split string of key:value pairs into Array of k-v pairs\n * e.g.  'key:value; key:value; key:value;' -> ['key:value',...]\n */\nfunction buildRawList(source: any, delimiter = ';'): NgStyleRawList {\n  return String(source)\n      .trim()\n      .split(delimiter)\n      .map((val: string) => val.trim())\n      .filter(val => val !== '');\n}\n\n/**\n * Convert array of key:value strings to a iterable map object\n */\nfunction buildMapFromList(styles: NgStyleRawList, sanitize?: NgStyleSanitizer): NgStyleMap {\n  let sanitizeValue = (it: NgStyleKeyValue) => {\n    if (sanitize) {\n      it.value = sanitize(it.value);\n    }\n    return it;\n  };\n\n  return styles\n      .map(stringToKeyValue)\n      .filter(entry => !!entry)\n      .map(sanitizeValue)\n      .reduce(keyValuesToMap, {});\n}\n\n/**\n * Convert Set<string> or raw Object to an iterable NgStyleMap\n */\nfunction buildMapFromSet(source: any, sanitize?: NgStyleSanitizer): NgStyleMap {\n  let list = new Array<string>();\n  if (getType(source) == 'set') {\n    source.forEach(entry => list.push(entry));\n  } else {                                // simple hashmap\n    Object.keys(source).forEach(key => {\n      list.push(`${key}:${source[key]}`);\n    });\n  }\n  return buildMapFromList(list, sanitize);\n}\n\n\n/**\n * Convert 'key:value' -> [key, value]\n */\nfunction stringToKeyValue(it: string): NgStyleKeyValue {\n  let [key, val] = it.split(':');\n  return val ? new NgStyleKeyValue(key, val) : null;\n}\n\n/**\n * Convert [ [key,value] ] -> { key : value }\n */\nfunction keyValuesToMap(map: NgStyleMap, entry: NgStyleKeyValue): NgStyleMap {\n  if (!!entry.key) {\n    map[entry.key] = entry.value;\n  }\n  return map;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  KeyValueDiffers,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Renderer,\n  Renderer2,\n  SimpleChanges,\n  Self\n} from '@angular/core';\nimport {NgClass} from '@angular/common';\n\nimport {BaseFxDirective} from './base';\nimport {BaseFxDirectiveAdapter} from './base-adapter';\nimport {MediaChange} from '../../media-query/media-change';\nimport {MediaMonitor} from '../../media-query/media-monitor';\n\n/** NgClass allowed inputs **/\nexport type NgClassType = string | string[] | Set<string> | {[klass: string]: any};\n\n/**\n * Directive to add responsive support for ngClass.\n */\n@Directive({\n  selector: `\n    [class], [class.xs], [class.sm], [class.md], [class.lg], [class.xl],\n    [class.lt-sm], [class.lt-md], [class.lt-lg], [class.lt-xl],\n    [class.gt-xs], [class.gt-sm], [class.gt-md], [class.gt-lg],\n\n    [ngClass], [ngClass.xs], [ngClass.sm], [ngClass.md], [ngClass.lg], [ngClass.xl],\n    [ngClass.lt-sm], [ngClass.lt-md], [ngClass.lt-lg], [ngClass.lt-xl],\n    [ngClass.gt-xs], [ngClass.gt-sm], [ngClass.gt-md], [ngClass.gt-lg]\n  `\n})\nexport class ClassDirective extends BaseFxDirective\n    implements DoCheck, OnChanges, OnDestroy {\n\n  /**\n   * Intercept ngClass assignments so we cache the default classes\n   * which are merged with activated styles or used as fallbacks.\n   * Note: Base ngClass values are applied during ngDoCheck()\n   */\n  @Input('ngClass')\n  set ngClassBase(val: NgClassType) {\n    this._ngClassAdapter.cacheInput('ngClass', val, true);\n    this._ngClassInstance.ngClass = val;\n  }\n\n  /* tslint:disable */\n  @Input('ngClass.xs')    set ngClassXs(val:   NgClassType) { this._ngClassAdapter.cacheInput('ngClassXs',   val, true); }\n  @Input('ngClass.sm')    set ngClassSm(val:   NgClassType) { this._ngClassAdapter.cacheInput('ngClassSm',   val, true); }\n  @Input('ngClass.md')    set ngClassMd(val:   NgClassType) { this._ngClassAdapter.cacheInput('ngClassMd',   val, true); }\n  @Input('ngClass.lg')    set ngClassLg(val:   NgClassType) { this._ngClassAdapter.cacheInput('ngClassLg',   val, true); }\n  @Input('ngClass.xl')    set ngClassXl(val:   NgClassType) { this._ngClassAdapter.cacheInput('ngClassXl',   val, true); }\n\n  @Input('ngClass.lt-sm') set ngClassLtSm(val: NgClassType) { this._ngClassAdapter.cacheInput('ngClassLtSm', val, true); }\n  @Input('ngClass.lt-md') set ngClassLtMd(val: NgClassType) { this._ngClassAdapter.cacheInput('ngClassLtMd', val, true); }\n  @Input('ngClass.lt-lg') set ngClassLtLg(val: NgClassType) { this._ngClassAdapter.cacheInput('ngClassLtLg', val, true); }\n  @Input('ngClass.lt-xl') set ngClassLtXl(val: NgClassType) { this._ngClassAdapter.cacheInput('ngClassLtXl', val, true); }\n\n  @Input('ngClass.gt-xs') set ngClassGtXs(val: NgClassType) { this._ngClassAdapter.cacheInput('ngClassGtXs', val, true); }\n  @Input('ngClass.gt-sm') set ngClassGtSm(val: NgClassType) { this._ngClassAdapter.cacheInput('ngClassGtSm', val, true); }\n  @Input('ngClass.gt-md') set ngClassGtMd(val: NgClassType) { this._ngClassAdapter.cacheInput('ngClassGtMd', val, true); }\n  @Input('ngClass.gt-lg') set ngClassGtLg(val: NgClassType) { this._ngClassAdapter.cacheInput('ngClassGtLg', val, true); }\n\n  /** Deprecated selectors */\n\n  /**\n   * Base class selector values get applied immediately and are considered destructive overwrites to\n   * all previous class assignments\n   *\n   * Delegate to NgClass:klass setter and cache value for base fallback from responsive APIs.\n   */\n  @Input('class')\n  set classBase(val: string) {\n    this._classAdapter.cacheInput('_rawClass', val, true);\n    this._ngClassInstance.klass = val;\n  }\n\n  @Input('class.xs')      set classXs(val:   NgClassType) { this._classAdapter.cacheInput('classXs',   val, true); }\n  @Input('class.sm')      set classSm(val:   NgClassType) { this._classAdapter.cacheInput('classSm',   val, true); }\n  @Input('class.md')      set classMd(val:   NgClassType) { this._classAdapter.cacheInput('classMd',   val, true); }\n  @Input('class.lg')      set classLg(val:   NgClassType) { this._classAdapter.cacheInput('classLg',   val, true); }\n  @Input('class.xl')      set classXl(val:   NgClassType) { this._classAdapter.cacheInput('classXl',   val, true); }\n\n  @Input('class.lt-sm')   set classLtSm(val: NgClassType) { this._classAdapter.cacheInput('classLtSm', val, true); }\n  @Input('class.lt-md')   set classLtMd(val: NgClassType) { this._classAdapter.cacheInput('classLtMd', val, true); }\n  @Input('class.lt-lg')   set classLtLg(val: NgClassType) { this._classAdapter.cacheInput('classLtLg', val, true); }\n  @Input('class.lt-xl')   set classLtXl(val: NgClassType) { this._classAdapter.cacheInput('classLtXl', val, true); }\n\n  @Input('class.gt-xs')   set classGtXs(val: NgClassType) { this._classAdapter.cacheInput('classGtXs', val, true); }\n  @Input('class.gt-sm')   set classGtSm(val: NgClassType) { this._classAdapter.cacheInput('classGtSm', val, true); }\n  @Input('class.gt-md')   set classGtMd(val: NgClassType) { this._classAdapter.cacheInput('classGtMd', val, true); }\n  @Input('class.gt-lg')   set classGtLg(val: NgClassType) { this._classAdapter.cacheInput('classGtLg', val, true); }\n\n  /**\n   * Initial value of the `class` attribute; used as\n   * fallback and will be merged with nay `ngClass` values\n   */\n  get initialClasses() : string {\n    return  this._classAdapter.queryInput('_rawClass') || \"\";\n  }\n\n  /* tslint:enable */\n  constructor(protected monitor: MediaMonitor,\n              _ngEl: ElementRef, _renderer: Renderer2, _oldRenderer: Renderer,\n              _iterableDiffers: IterableDiffers, _keyValueDiffers: KeyValueDiffers,\n              @Optional() @Self() private _ngClassInstance: NgClass) {\n\n    super(monitor, _ngEl, _renderer);\n\n    this._classAdapter = new BaseFxDirectiveAdapter('class', monitor, _ngEl, _renderer);\n    this._ngClassAdapter = new BaseFxDirectiveAdapter('ngClass', monitor, _ngEl, _renderer);\n\n    // Create an instance NgClass Directive instance only if `ngClass=\"\"` has NOT been defined on\n    // the same host element; since the responsive variations may be defined...\n    if ( !this._ngClassInstance ) {\n      this._ngClassInstance = new NgClass(_iterableDiffers, _keyValueDiffers, _ngEl, _oldRenderer);\n    }\n  }\n\n  // ******************************************************************\n  // Lifecycle Hooks\n  // ******************************************************************\n\n  /**\n   * For @Input changes on the current mq activation property\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    if (this.hasInitialized) {\n      if (this._classAdapter.activeKey in changes) {\n        this._updateKlass();\n      }\n      if (this._ngClassAdapter.activeKey in changes) {\n        this._updateNgClass();\n      }\n    }\n  }\n\n  /**\n   * For ChangeDetectionStrategy.onPush and ngOnChanges() updates\n   */\n  ngDoCheck() {\n    if (!this._classAdapter.hasMediaQueryListener) {\n      this._configureMQListener();\n    }\n    this._ngClassInstance.ngDoCheck();\n  }\n\n  ngOnDestroy() {\n    this._classAdapter.ngOnDestroy();\n    this._ngClassAdapter.ngOnDestroy();\n    this._ngClassInstance = null;\n  }\n\n  // ******************************************************************\n  // Internal Methods\n  // ******************************************************************\n\n  /**\n   * Build an mqActivation object that bridges\n   * mql change events to onMediaQueryChange handlers\n   */\n  protected _configureMQListener() {\n    this._classAdapter.listenForMediaQueryChanges('class', '', (changes: MediaChange) => {\n      this._updateKlass(changes.value);\n    });\n\n    this._ngClassAdapter.listenForMediaQueryChanges('ngClass', '', (changes: MediaChange) => {\n      this._updateNgClass(changes.value);\n      this._ngClassInstance.ngDoCheck();    // trigger NgClass::_applyIterableChanges()\n    });\n  }\n\n  /**\n   *  Apply updates directly to the NgClass:klass property\n   *  ::ngDoCheck() is not needed\n   */\n  protected _updateKlass(value?: NgClassType) {\n    let klass = value || this._classAdapter.queryInput('class') || '';\n    if (this._classAdapter.mqActivation) {\n      klass = this._classAdapter.mqActivation.activatedInput;\n    }\n    this._ngClassInstance.klass = klass || this.initialClasses;\n  }\n\n  /**\n   *  Identify the activated input value and update the ngClass iterables...\n   *  needs ngDoCheck() to actually apply the values to the element\n   */\n  protected _updateNgClass(value?: NgClassType) {\n    if (this._ngClassAdapter.mqActivation) {\n      value = this._ngClassAdapter.mqActivation.activatedInput;\n    }\n\n    // Delegate subsequent activity to the NgClass logic\n    this._ngClassInstance.ngClass = value || '';\n  }\n\n  /**\n   * Special adapter to cross-cut responsive behaviors\n   * into the ClassDirective instance\n   */\n  protected _classAdapter: BaseFxDirectiveAdapter;   // used for `class.xxx` selectors\n  protected _ngClassAdapter: BaseFxDirectiveAdapter;   // used for `ngClass.xxx` selectors\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, Renderer2} from '@angular/core';\n\nimport {BaseFxDirective} from './base';\nimport {ResponsiveActivation} from './../responsive/responsive-activation';\nimport {MediaQuerySubscriber} from '../../media-query/media-change';\nimport {MediaMonitor} from '../../media-query/media-monitor';\n\n\n/**\n * Adapter to the BaseFxDirective abstract class so it can be used via composition.\n * @see BaseFxDirective\n */\nexport class BaseFxDirectiveAdapter extends BaseFxDirective {\n\n  /**\n   * Accessor to determine which @Input property is \"active\"\n   * e.g. which property value will be used.\n   */\n  get activeKey() {\n    let mqa = this._mqActivation;\n    let key = mqa ? mqa.activatedInputKey : this._baseKey;\n    // Note: ClassDirective::SimpleChanges uses 'klazz' instead of 'class' as a key\n    return (key === 'class') ? 'klazz' : key;\n  }\n\n  /** Hash map of all @Input keys/values defined/used */\n  get inputMap() {\n    return this._inputMap;\n  }\n\n  /**\n   * @see BaseFxDirective._mqActivation\n   */\n  get mqActivation(): ResponsiveActivation {\n    return this._mqActivation;\n  }\n\n  /**\n   * BaseFxDirectiveAdapter constructor\n   */\n  constructor(protected _baseKey: string,   // non-responsive @Input property name\n              protected _mediaMonitor: MediaMonitor,\n              protected _elementRef: ElementRef,\n              protected _renderer: Renderer2) {\n    super(_mediaMonitor, _elementRef, _renderer);\n  }\n\n\n  /**\n   * @see BaseFxDirective._queryInput\n   */\n  queryInput(key) {\n    return key ? this._queryInput(key) : undefined;\n  }\n\n  /**\n   *  Save the property value.\n   */\n  cacheInput(key?: string, source?: any, cacheRaw = false) {\n    if (cacheRaw) {\n      this._cacheInputRaw(key, source);\n    } else if (Array.isArray(source)) {\n      this._cacheInputArray(key, source);\n    } else if (typeof source === 'object') {\n      this._cacheInputObject(key, source);\n    } else if (typeof source === 'string') {\n      this._cacheInputString(key, source);\n    } else {\n      throw new Error('Invalid class value provided. Did you want to cache the raw value?');\n    }\n  }\n\n  /**\n   * @see BaseFxDirective._listenForMediaQueryChanges\n   */\n  listenForMediaQueryChanges(key: string,\n                             defaultValue: any,\n                             onMediaQueryChange: MediaQuerySubscriber): ResponsiveActivation {\n    return this._listenForMediaQueryChanges(key, defaultValue, onMediaQueryChange);\n  }\n\n  // ************************************************************\n  // Protected Methods\n  // ************************************************************\n\n  /**\n   * No implicit transforms of the source.\n   * Required when caching values expected later for KeyValueDiffers\n   */\n  protected _cacheInputRaw(key?: string, source?: any) {\n    this._inputMap[key] = source;\n  }\n\n  /**\n   *  Save the property value for Array values.\n   */\n  protected _cacheInputArray(key = '', source?: boolean[]) {\n    this._inputMap[key] = source.join(' ');\n  }\n\n  /**\n   *  Save the property value for key/value pair values.\n   */\n  protected _cacheInputObject(key = '', source?: { [key: string]: boolean }) {\n    let classes = [];\n    for (let prop in source) {\n      if (!!source[prop]) {\n        classes.push(prop);\n      }\n    }\n    this._inputMap[key] = classes.join(' ');\n  }\n\n  /**\n   *  Save the property value for string values.\n   */\n  protected _cacheInputString(key = '', source?: string) {\n    this._inputMap[key] = source;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  OnChanges,\n  Renderer2,\n  SimpleChanges,\n  Self,\n  AfterContentInit,\n  Optional,\n  OnDestroy,\n  NgZone,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\n\nimport {BaseFxDirective} from './base';\nimport {LayoutDirective} from './layout';\nimport {MediaChange} from '../../media-query/media-change';\nimport {MediaMonitor} from '../../media-query/media-monitor';\nimport {LAYOUT_VALUES} from '../../utils/layout-validator';\n\n/**\n * 'layout-padding' styling directive\n *  Defines padding of child elements in a layout container\n */\n@Directive({\n  selector: `\n  [fxLayoutGap],\n  [fxLayoutGap.xs], [fxLayoutGap.sm], [fxLayoutGap.md], [fxLayoutGap.lg], [fxLayoutGap.xl],\n  [fxLayoutGap.lt-sm], [fxLayoutGap.lt-md], [fxLayoutGap.lt-lg], [fxLayoutGap.lt-xl],\n  [fxLayoutGap.gt-xs], [fxLayoutGap.gt-sm], [fxLayoutGap.gt-md], [fxLayoutGap.gt-lg]\n`\n})\nexport class LayoutGapDirective extends BaseFxDirective implements AfterContentInit, OnChanges,\n    OnDestroy {\n  protected _layout = 'row';  // default flex-direction\n  protected _layoutWatcher: Subscription;\n  protected _observer: MutationObserver;\n\n  /* tslint:disable */\n @Input('fxLayoutGap')       set gap(val) { this._cacheInput('gap', val); }\n @Input('fxLayoutGap.xs')    set gapXs(val) { this._cacheInput('gapXs', val); }\n @Input('fxLayoutGap.sm')    set gapSm(val) { this._cacheInput('gapSm', val); };\n @Input('fxLayoutGap.md')    set gapMd(val) { this._cacheInput('gapMd', val); };\n @Input('fxLayoutGap.lg')    set gapLg(val) { this._cacheInput('gapLg', val); };\n @Input('fxLayoutGap.xl')    set gapXl(val) { this._cacheInput('gapXl', val); };\n\n @Input('fxLayoutGap.gt-xs') set gapGtXs(val) { this._cacheInput('gapGtXs', val); };\n @Input('fxLayoutGap.gt-sm') set gapGtSm(val) { this._cacheInput('gapGtSm', val); };\n @Input('fxLayoutGap.gt-md') set gapGtMd(val) { this._cacheInput('gapGtMd', val); };\n @Input('fxLayoutGap.gt-lg') set gapGtLg(val) { this._cacheInput('gapGtLg', val); };\n\n @Input('fxLayoutGap.lt-sm') set gapLtSm(val) { this._cacheInput('gapLtSm', val); };\n @Input('fxLayoutGap.lt-md') set gapLtMd(val) { this._cacheInput('gapLtMd', val); };\n @Input('fxLayoutGap.lt-lg') set gapLtLg(val) { this._cacheInput('gapLtLg', val); };\n @Input('fxLayoutGap.lt-xl') set gapLtXl(val) { this._cacheInput('gapLtXl', val); };\n\n  /* tslint:enable */\n  constructor(monitor: MediaMonitor,\n              elRef: ElementRef,\n              renderer: Renderer2,\n              @Optional() @Self() container: LayoutDirective,\n              private _zone: NgZone) {\n    super(monitor, elRef, renderer);\n\n    if (container) {  // Subscribe to layout direction changes\n      this._layoutWatcher = container.layout$.subscribe(this._onLayoutChange.bind(this));\n    }\n  }\n\n  // *********************************************\n  // Lifecycle Methods\n  // *********************************************\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['gap'] != null || this._mqActivation) {\n      this._updateWithValue();\n    }\n  }\n\n  /**\n   * After the initial onChanges, build an mqActivation object that bridges\n   * mql change events to onMediaQueryChange handlers\n   */\n  ngAfterContentInit() {\n    this._watchContentChanges();\n    this._listenForMediaQueryChanges('gap', '0', (changes: MediaChange) => {\n      this._updateWithValue(changes.value);\n    });\n    this._updateWithValue();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    if (this._layoutWatcher) {\n      this._layoutWatcher.unsubscribe();\n    }\n    if (this._observer) {\n      this._observer.disconnect();\n    }\n  }\n\n  // *********************************************\n  // Protected methods\n  // *********************************************\n\n  /**\n   * Watch for child nodes to be added... and apply the layout gap styles to each.\n   * NOTE: this does NOT! differentiate between viewChildren and contentChildren\n   */\n  protected _watchContentChanges() {\n    this._zone.runOutsideAngular(() => {\n\n      if (typeof MutationObserver !== 'undefined') {\n        this._observer = new MutationObserver((mutations: MutationRecord[]) => {\n          let validatedChanges = (it: MutationRecord): boolean => {\n            return (it.addedNodes && it.addedNodes.length > 0) ||\n                (it.removedNodes && it.removedNodes.length > 0);\n          };\n\n          // update gap styles only for child 'added' or 'removed' events\n          if (mutations.some(validatedChanges)) {\n            this._updateWithValue();\n          }\n        });\n        this._observer.observe(this._elementRef.nativeElement, {childList: true});\n      }\n    });\n  }\n\n  /**\n   * Cache the parent container 'flex-direction' and update the 'margin' styles\n   */\n  protected _onLayoutChange(direction) {\n    this._layout = (direction || '').toLowerCase();\n    if (!LAYOUT_VALUES.find(x => x === this._layout)) {\n      this._layout = 'row';\n    }\n    this._updateWithValue();\n  }\n\n  /**\n   *\n   */\n  protected _updateWithValue(value?: string) {\n    value = value || this._queryInput('gap') || '0';\n    if (this._mqActivation) {\n      value = this._mqActivation.activatedInput;\n    }\n\n    // Gather all non-hidden Element nodes\n    let items = this.childrenNodes\n        .filter(el => el.nodeType === 1 && this._getDisplayStyle(el) != 'none');\n    let numItems = items.length;\n\n    if (numItems > 1) {\n      let lastItem = items[numItems - 1];\n\n      // For each `element` children EXCEPT the last,\n      // set the margin right/bottom styles...\n      items = items.filter((_, j) => j < numItems - 1);\n      this._applyStyleToElements(this._buildCSS(value), items);\n\n      // Clear all gaps for all visible elements\n      this._applyStyleToElements(this._buildCSS(), [lastItem]);\n    }\n  }\n\n  /**\n   * Prepare margin CSS, remove any previous explicitly\n   * assigned margin assignments\n   */\n  private _buildCSS(value: any = null) {\n    let key, margins = {\n      'margin-left': null,\n      'margin-right': null,\n      'margin-top': null,\n      'margin-bottom': null\n    };\n\n    switch (this._layout) {\n      case 'column':\n      case 'column-reverse':\n        key = 'margin-bottom';\n        break;\n      case 'row' :\n      case 'row-reverse':\n      default :\n        key = 'margin-right';\n        break;\n    }\n    margins[key] = value;\n\n    return margins;\n  }\n\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Renderer2,\n  SimpleChanges, Self,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {extendObject} from '../../utils/object-extend';\n\nimport {BaseFxDirective} from './base';\nimport {MediaChange} from '../../media-query/media-change';\nimport {MediaMonitor} from '../../media-query/media-monitor';\n\nimport {LayoutDirective} from './layout';\nimport {LAYOUT_VALUES, isFlowHorizontal} from '../../utils/layout-validator';\n\n/**\n * 'layout-align' flexbox styling directive\n *  Defines positioning of child elements along main and cross axis in a layout container\n *  Optional values: {main-axis} values or {main-axis cross-axis} value pairs\n *\n *  @see https://css-tricks.com/almanac/properties/j/justify-content/\n *  @see https://css-tricks.com/almanac/properties/a/align-items/\n *  @see https://css-tricks.com/almanac/properties/a/align-content/\n */\n@Directive({selector: `\n  [fxLayoutAlign],\n  [fxLayoutAlign.xs], [fxLayoutAlign.sm], [fxLayoutAlign.md], [fxLayoutAlign.lg],[fxLayoutAlign.xl],\n  [fxLayoutAlign.lt-sm], [fxLayoutAlign.lt-md], [fxLayoutAlign.lt-lg], [fxLayoutAlign.lt-xl],\n  [fxLayoutAlign.gt-xs], [fxLayoutAlign.gt-sm], [fxLayoutAlign.gt-md], [fxLayoutAlign.gt-lg]\n`})\nexport class LayoutAlignDirective extends BaseFxDirective implements OnInit, OnChanges, OnDestroy {\n\n  protected _layout = 'row';  // default flex-direction\n  protected _layoutWatcher: Subscription;\n\n  /* tslint:disable */\n  @Input('fxLayoutAlign')       set align(val)     { this._cacheInput('align', val); }\n  @Input('fxLayoutAlign.xs')    set alignXs(val)   { this._cacheInput('alignXs', val); }\n  @Input('fxLayoutAlign.sm')    set alignSm(val)   { this._cacheInput('alignSm', val); };\n  @Input('fxLayoutAlign.md')    set alignMd(val)   { this._cacheInput('alignMd', val); };\n  @Input('fxLayoutAlign.lg')    set alignLg(val)   { this._cacheInput('alignLg', val); };\n  @Input('fxLayoutAlign.xl')    set alignXl(val)   { this._cacheInput('alignXl', val); };\n\n  @Input('fxLayoutAlign.gt-xs') set alignGtXs(val) { this._cacheInput('alignGtXs', val); };\n  @Input('fxLayoutAlign.gt-sm') set alignGtSm(val) { this._cacheInput('alignGtSm', val); };\n  @Input('fxLayoutAlign.gt-md') set alignGtMd(val) { this._cacheInput('alignGtMd', val); };\n  @Input('fxLayoutAlign.gt-lg') set alignGtLg(val) { this._cacheInput('alignGtLg', val); };\n\n  @Input('fxLayoutAlign.lt-sm') set alignLtSm(val) { this._cacheInput('alignLtSm', val); };\n  @Input('fxLayoutAlign.lt-md') set alignLtMd(val) { this._cacheInput('alignLtMd', val); };\n  @Input('fxLayoutAlign.lt-lg') set alignLtLg(val) { this._cacheInput('alignLtLg', val); };\n  @Input('fxLayoutAlign.lt-xl') set alignLtXl(val) { this._cacheInput('alignLtXl', val); };\n\n  /* tslint:enable */\n  constructor(\n      monitor: MediaMonitor,\n      elRef: ElementRef, renderer: Renderer2,\n      @Optional() @Self() container: LayoutDirective) {\n    super(monitor, elRef, renderer);\n\n    if (container) {  // Subscribe to layout direction changes\n      this._layoutWatcher = container.layout$.subscribe(this._onLayoutChange.bind(this));\n    }\n  }\n\n  // *********************************************\n  // Lifecycle Methods\n  // *********************************************\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['align'] != null || this._mqActivation) {\n      this._updateWithValue();\n    }\n  }\n\n  /**\n   * After the initial onChanges, build an mqActivation object that bridges\n   * mql change events to onMediaQueryChange handlers\n   */\n  ngOnInit() {\n    super.ngOnInit();\n\n    this._listenForMediaQueryChanges('align', 'start stretch', (changes: MediaChange) => {\n      this._updateWithValue(changes.value);\n    });\n    this._updateWithValue();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    if ( this._layoutWatcher ) {\n      this._layoutWatcher.unsubscribe();\n    }\n  }\n\n  // *********************************************\n  // Protected methods\n  // *********************************************\n\n  /**\n   *\n   */\n  protected _updateWithValue(value?: string) {\n    value = value || this._queryInput('align') || 'start stretch';\n    if (this._mqActivation) {\n      value = this._mqActivation.activatedInput;\n    }\n\n    this._applyStyleToElement(this._buildCSS(value));\n    this._allowStretching(value, !this._layout ? 'row' : this._layout);\n  }\n\n  /**\n   * Cache the parent container 'flex-direction' and update the 'flex' styles\n   */\n  protected _onLayoutChange(direction) {\n    this._layout = (direction || '').toLowerCase();\n    if (!LAYOUT_VALUES.find(x => x === this._layout)) {\n      this._layout = 'row';\n    }\n\n    let value = this._queryInput('align') || 'start stretch';\n    if (this._mqActivation) {\n      value = this._mqActivation.activatedInput;\n    }\n    this._allowStretching(value, this._layout || 'row');\n  }\n\n  protected _buildCSS(align) {\n    let css = {}, [main_axis, cross_axis] = align.split(' '); // tslint:disable-line:variable-name\n\n    // Main axis\n    switch (main_axis) {\n      case 'center':\n        css['justify-content'] = 'center';\n        break;\n      case 'space-around':\n        css['justify-content'] = 'space-around';\n        break;\n      case 'space-between':\n        css['justify-content'] = 'space-between';\n        break;\n      case 'end':\n      case 'flex-end':\n        css['justify-content'] = 'flex-end';\n        break;\n      case 'start':\n      case 'flex-start':\n      default :\n        css['justify-content'] = 'flex-start';  // default main axis\n        break;\n    }\n\n    // Cross-axis\n    switch (cross_axis) {\n      case 'start':\n      case 'flex-start':\n        css['align-items'] = css['align-content'] = 'flex-start';\n        break;\n      case 'baseline':\n        css['align-items'] = 'baseline';\n        break;\n      case 'center':\n        css['align-items'] = css['align-content'] = 'center';\n        break;\n      case 'end':\n      case 'flex-end':\n        css['align-items'] = css['align-content'] = 'flex-end';\n        break;\n      case 'stretch':\n      default : // 'stretch'\n        css['align-items'] = css['align-content'] = 'stretch';   // default cross axis\n        break;\n    }\n\n    return extendObject(css, {\n      'display' : 'flex',\n      'flex-direction' : this._layout || 'row',\n      'box-sizing' : 'border-box'\n    });\n  }\n\n\n  /**\n   * Update container element to 'stretch' as needed...\n   * NOTE: this is only done if the crossAxis is explicitly set to 'stretch'\n   */\n  protected _allowStretching(align, layout) {\n    let [, cross_axis] = align.split(' '); // tslint:disable-line:variable-name\n\n    if (cross_axis == 'stretch') {\n      // Use `null` values to remove style\n      this._applyStyleToElement({\n        'box-sizing': 'border-box',\n        'max-width': !isFlowHorizontal(layout) ? '100%' : null,\n        'max-height': isFlowHorizontal(layout) ? '100%' : null\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  OnInit,\n  OnChanges,\n  OnDestroy,\n  Renderer2,\n  SimpleChanges,\n} from '@angular/core';\n\nimport {BaseFxDirective} from './base';\nimport {MediaChange} from '../../media-query/media-change';\nimport {MediaMonitor} from '../../media-query/media-monitor';\n\n/**\n * 'flex-order' flexbox styling directive\n * Configures the positional ordering of the element in a sorted layout container\n * @see https://css-tricks.com/almanac/properties/o/order/\n */\n@Directive({selector: `\n  [fxFlexOrder],\n  [fxFlexOrder.xs], [fxFlexOrder.sm], [fxFlexOrder.md], [fxFlexOrder.lg], [fxFlexOrder.xl],\n  [fxFlexOrder.lt-sm], [fxFlexOrder.lt-md], [fxFlexOrder.lt-lg], [fxFlexOrder.lt-xl],\n  [fxFlexOrder.gt-xs], [fxFlexOrder.gt-sm], [fxFlexOrder.gt-md], [fxFlexOrder.gt-lg]\n`})\nexport class FlexOrderDirective extends BaseFxDirective implements OnInit, OnChanges, OnDestroy {\n\n  /* tslint:disable */\n  @Input('fxFlexOrder')       set order(val)     { this._cacheInput('order', val); }\n  @Input('fxFlexOrder.xs')    set orderXs(val)   { this._cacheInput('orderXs', val); }\n  @Input('fxFlexOrder.sm')    set orderSm(val)   { this._cacheInput('orderSm', val); };\n  @Input('fxFlexOrder.md')    set orderMd(val)   { this._cacheInput('orderMd', val); };\n  @Input('fxFlexOrder.lg')    set orderLg(val)   { this._cacheInput('orderLg', val); };\n  @Input('fxFlexOrder.xl')    set orderXl(val)   { this._cacheInput('orderXl', val); };\n\n  @Input('fxFlexOrder.gt-xs') set orderGtXs(val) { this._cacheInput('orderGtXs', val); };\n  @Input('fxFlexOrder.gt-sm') set orderGtSm(val) { this._cacheInput('orderGtSm', val); };\n  @Input('fxFlexOrder.gt-md') set orderGtMd(val) { this._cacheInput('orderGtMd', val); };\n  @Input('fxFlexOrder.gt-lg') set orderGtLg(val) { this._cacheInput('orderGtLg', val); };\n\n  @Input('fxFlexOrder.lt-sm') set orderLtSm(val) { this._cacheInput('orderLtSm', val); };\n  @Input('fxFlexOrder.lt-md') set orderLtMd(val) { this._cacheInput('orderLtMd', val); };\n  @Input('fxFlexOrder.lt-lg') set orderLtLg(val) { this._cacheInput('orderLtLg', val); };\n  @Input('fxFlexOrder.lt-xl') set orderLtXl(val) { this._cacheInput('orderLtXl', val); };\n\n  /* tslint:enable */\n  constructor(monitor: MediaMonitor, elRef: ElementRef, renderer: Renderer2) {\n    super(monitor, elRef, renderer);\n  }\n\n  // *********************************************\n  // Lifecycle Methods\n  // *********************************************\n\n  /**\n   * For @Input changes on the current mq activation property, see onMediaQueryChanges()\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['order'] != null || this._mqActivation) {\n      this._updateWithValue();\n    }\n  }\n\n  /**\n   * After the initial onChanges, build an mqActivation object that bridges\n   * mql change events to onMediaQueryChange handlers\n   */\n  ngOnInit() {\n    super.ngOnInit();\n\n    this._listenForMediaQueryChanges('order', '0', (changes: MediaChange) => {\n      this._updateWithValue(changes.value);\n    });\n    this._updateWithValue();\n  }\n\n  // *********************************************\n  // Protected methods\n  // *********************************************\n\n  protected _updateWithValue(value?: string) {\n    value = value || this._queryInput('order') || '0';\n    if (this._mqActivation) {\n      value = this._mqActivation.activatedInput;\n    }\n\n    this._applyStyleToElement(this._buildCSS(value));\n  }\n\n\n  protected _buildCSS(value) {\n    value = parseInt(value, 10);\n    return {order: isNaN(value) ? 0 : value};\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  OnInit,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  SimpleChanges,\n  SkipSelf\n} from '@angular/core';\n\nimport {Subscription} from 'rxjs/Subscription';\n\nimport {BaseFxDirective} from './base';\nimport {MediaChange} from '../../media-query/media-change';\nimport {MediaMonitor} from '../../media-query/media-monitor';\nimport {LayoutDirective} from './layout';\nimport {isFlowHorizontal} from '../../utils/layout-validator';\n\n/**\n * 'flex-offset' flexbox styling directive\n * Configures the 'margin-left' of the element in a layout container\n */\n@Directive({selector: `\n  [fxFlexOffset],\n  [fxFlexOffset.xs], [fxFlexOffset.sm], [fxFlexOffset.md], [fxFlexOffset.lg], [fxFlexOffset.xl],\n  [fxFlexOffset.lt-sm], [fxFlexOffset.lt-md], [fxFlexOffset.lt-lg], [fxFlexOffset.lt-xl],\n  [fxFlexOffset.gt-xs], [fxFlexOffset.gt-sm], [fxFlexOffset.gt-md], [fxFlexOffset.gt-lg]\n`})\nexport class FlexOffsetDirective extends BaseFxDirective implements OnInit, OnChanges, OnDestroy {\n\n  /* tslint:disable */\n  @Input('fxFlexOffset')       set offset(val)     { this._cacheInput('offset', val); }\n  @Input('fxFlexOffset.xs')    set offsetXs(val)   { this._cacheInput('offsetXs', val); }\n  @Input('fxFlexOffset.sm')    set offsetSm(val)   { this._cacheInput('offsetSm', val); };\n  @Input('fxFlexOffset.md')    set offsetMd(val)   { this._cacheInput('offsetMd', val); };\n  @Input('fxFlexOffset.lg')    set offsetLg(val)   { this._cacheInput('offsetLg', val); };\n  @Input('fxFlexOffset.xl')    set offsetXl(val)   { this._cacheInput('offsetXl', val); };\n\n  @Input('fxFlexOffset.lt-sm') set offsetLtSm(val) { this._cacheInput('offsetLtSm', val); };\n  @Input('fxFlexOffset.lt-md') set offsetLtMd(val) { this._cacheInput('offsetLtMd', val); };\n  @Input('fxFlexOffset.lt-lg') set offsetLtLg(val) { this._cacheInput('offsetLtLg', val); };\n  @Input('fxFlexOffset.lt-xl') set offsetLtXl(val) { this._cacheInput('offsetLtXl', val); };\n\n  @Input('fxFlexOffset.gt-xs') set offsetGtXs(val) { this._cacheInput('offsetGtXs', val); };\n  @Input('fxFlexOffset.gt-sm') set offsetGtSm(val) { this._cacheInput('offsetGtSm', val); };\n  @Input('fxFlexOffset.gt-md') set offsetGtMd(val) { this._cacheInput('offsetGtMd', val); };\n  @Input('fxFlexOffset.gt-lg') set offsetGtLg(val) { this._cacheInput('offsetGtLg', val); };\n\n  /* tslint:enable */\n  constructor(monitor: MediaMonitor,\n              elRef: ElementRef,\n              renderer: Renderer2,\n              @Optional() @SkipSelf() protected _container: LayoutDirective ) {\n    super(monitor, elRef, renderer);\n\n\n    this.watchParentFlow();\n  }\n\n  // *********************************************\n  // Lifecycle Methods\n  // *********************************************\n\n  /**\n   * For @Input changes on the current mq activation property, see onMediaQueryChanges()\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['offset'] != null || this._mqActivation) {\n      this._updateWithValue();\n    }\n  }\n\n  /**\n   * Cleanup\n   */\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    if (this._layoutWatcher) {\n      this._layoutWatcher.unsubscribe();\n    }\n  }\n\n  /**\n   * After the initial onChanges, build an mqActivation object that bridges\n   * mql change events to onMediaQueryChange handlers\n   */\n  ngOnInit() {\n    super.ngOnInit();\n\n    this._listenForMediaQueryChanges('offset', 0 , (changes: MediaChange) => {\n      this._updateWithValue(changes.value);\n    });\n  }\n\n  // *********************************************\n  // Protected methods\n  // *********************************************\n\n  /** The flex-direction of this element's host container. Defaults to 'row'. */\n  protected _layout = 'row';\n\n  /**\n   * Subscription to the parent flex container's layout changes.\n   * Stored so we can unsubscribe when this directive is destroyed.\n   */\n  protected _layoutWatcher: Subscription;\n\n  /**\n   * If parent flow-direction changes, then update the margin property\n   * used to offset\n   */\n  protected watchParentFlow() {\n    if (this._container) {\n      // Subscribe to layout immediate parent direction changes (if any)\n      this._layoutWatcher = this._container.layout$.subscribe((direction) => {\n        // `direction` === null if parent container does not have a `fxLayout`\n        this._onLayoutChange(direction);\n      });\n    }\n  }\n\n  /**\n   * Caches the parent container's 'flex-direction' and updates the element's style.\n   * Used as a handler for layout change events from the parent flex container.\n   */\n  protected _onLayoutChange(direction?: string) {\n    this._layout = direction || this._layout || 'row';\n    this._updateWithValue();\n  }\n\n  /**\n   * Using the current fxFlexOffset value, update the inline CSS\n   * NOTE: this will assign `margin-left` if the parent flex-direction == 'row',\n   *       otherwise `margin-top` is used for the offset.\n   */\n  protected _updateWithValue(value?: string|number) {\n    value = value || this._queryInput('offset') || 0;\n    if (this._mqActivation) {\n      value = this._mqActivation.activatedInput;\n    }\n\n    this._applyStyleToElement(this._buildCSS(value));\n  }\n\n  protected _buildCSS(offset) {\n    let isPercent = String(offset).indexOf('%') > -1;\n    let isPx = String(offset).indexOf('px') > -1;\n    if (!isPx && !isPercent && !isNaN(offset)) {\n      offset = offset + '%';\n    }\n\n    // The flex-direction of this element's flex container. Defaults to 'row'.\n    let layout = this._getFlowDirection(this.parentElement, true);\n    return isFlowHorizontal(layout) ? {'margin-left': `${offset}`} : {'margin-top': `${offset}`};\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directive, ElementRef, Renderer2} from '@angular/core';\n\nimport {MediaMonitor} from '../../media-query/media-monitor';\nimport {BaseFxDirective} from './base';\n\nconst FLEX_FILL_CSS = {\n  'margin': 0,\n  'width': '100%',\n  'height': '100%',\n  'min-width': '100%',\n  'min-height': '100%'\n};\n\n/**\n * 'fxFill' flexbox styling directive\n *  Maximizes width and height of element in a layout container\n *\n *  NOTE: fxFill is NOT responsive API!!\n */\n@Directive({selector: `\n  [fxFill],\n  [fxFlexFill]\n`})\nexport class FlexFillDirective extends BaseFxDirective {\n  constructor(monitor: MediaMonitor, public elRef: ElementRef, public renderer: Renderer2) {\n    super(monitor, elRef, renderer);\n    this._applyStyleToElement(FLEX_FILL_CSS);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  OnInit,\n  OnChanges,\n  OnDestroy,\n  Renderer2,\n  SimpleChanges,\n} from '@angular/core';\n\nimport {BaseFxDirective} from './base';\nimport {MediaChange} from '../../media-query/media-change';\nimport {MediaMonitor} from '../../media-query/media-monitor';\n\n/**\n * 'flex-align' flexbox styling directive\n * Allows element-specific overrides for cross-axis alignments in a layout container\n * @see https://css-tricks.com/almanac/properties/a/align-self/\n */\n@Directive({\n  selector: `\n  [fxFlexAlign],\n  [fxFlexAlign.xs], [fxFlexAlign.sm], [fxFlexAlign.md], [fxFlexAlign.lg], [fxFlexAlign.xl],\n  [fxFlexAlign.lt-sm], [fxFlexAlign.lt-md], [fxFlexAlign.lt-lg], [fxFlexAlign.lt-xl],\n  [fxFlexAlign.gt-xs], [fxFlexAlign.gt-sm], [fxFlexAlign.gt-md], [fxFlexAlign.gt-lg]\n`\n})\nexport class FlexAlignDirective extends BaseFxDirective implements OnInit, OnChanges, OnDestroy {\n\n  /* tslint:disable */\n  @Input('fxFlexAlign')       set align(val)  { this._cacheInput('align', val);  };\n  @Input('fxFlexAlign.xs')    set alignXs(val)  { this._cacheInput('alignXs', val);  };\n  @Input('fxFlexAlign.sm')    set alignSm(val)  { this._cacheInput('alignSm', val); };\n  @Input('fxFlexAlign.md')    set alignMd(val)  { this._cacheInput('alignMd', val); };\n  @Input('fxFlexAlign.lg')    set alignLg(val)  { this._cacheInput('alignLg', val); };\n  @Input('fxFlexAlign.xl')    set alignXl(val)  { this._cacheInput('alignXl', val); };\n\n  @Input('fxFlexAlign.lt-sm') set alignLtSm(val) { this._cacheInput('alignLtSm', val); };\n  @Input('fxFlexAlign.lt-md') set alignLtMd(val) { this._cacheInput('alignLtMd', val); };\n  @Input('fxFlexAlign.lt-lg') set alignLtLg(val) { this._cacheInput('alignLtLg', val); };\n  @Input('fxFlexAlign.lt-xl') set alignLtXl(val) { this._cacheInput('alignLtXl', val); };\n\n  @Input('fxFlexAlign.gt-xs') set alignGtXs(val)  { this._cacheInput('alignGtXs', val); };\n  @Input('fxFlexAlign.gt-sm') set alignGtSm(val)  { this._cacheInput('alignGtSm', val); };\n  @Input('fxFlexAlign.gt-md') set alignGtMd(val)  { this._cacheInput('alignGtMd', val); };\n  @Input('fxFlexAlign.gt-lg') set alignGtLg(val)  { this._cacheInput('alignGtLg', val); };\n\n  /* tslint:enable */\n  constructor(monitor: MediaMonitor, elRef: ElementRef, renderer: Renderer2) {\n    super(monitor, elRef, renderer);\n  }\n\n\n  // *********************************************\n  // Lifecycle Methods\n  // *********************************************\n\n  /**\n   * For @Input changes on the current mq activation property, see onMediaQueryChanges()\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['align'] != null || this._mqActivation) {\n      this._updateWithValue();\n    }\n  }\n\n  /**\n   * After the initial onChanges, build an mqActivation object that bridges\n   * mql change events to onMediaQueryChange handlers\n   */\n  ngOnInit() {\n    super.ngOnInit();\n\n    this._listenForMediaQueryChanges('align', 'stretch', (changes: MediaChange) => {\n      this._updateWithValue(changes.value);\n    });\n    this._updateWithValue();\n  }\n\n  // *********************************************\n  // Protected methods\n  // *********************************************\n\n  protected _updateWithValue(value?: string|number) {\n    value = value || this._queryInput('align') || 'stretch';\n    if (this._mqActivation) {\n      value = this._mqActivation.activatedInput;\n    }\n\n    this._applyStyleToElement(this._buildCSS(value));\n  }\n\n  protected _buildCSS(align) {\n    let css = {};\n\n    // Cross-axis\n    switch (align) {\n      case 'start':\n        css['align-self'] = 'flex-start';\n        break;\n      case 'end':\n        css['align-self'] = 'flex-end';\n        break;\n      default:\n        css['align-self'] = align;\n        break;\n    }\n\n    return css;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  OnInit,\n  OnChanges,\n  OnDestroy,\n  Renderer2,\n  SimpleChanges,\n  Self,\n  Optional\n} from '@angular/core';\n\nimport {Subscription} from 'rxjs/Subscription';\n\nimport {BaseFxDirective} from './base';\nimport {MediaChange} from '../../media-query/media-change';\nimport {MediaMonitor} from '../../media-query/media-monitor';\nimport {LayoutDirective} from './layout';\n\nconst FALSY = ['false', false, 0];\n\n/**\n * For fxHide selectors, we invert the 'value'\n * and assign to the equivalent fxShow selector cache\n *  - When 'hide' === '' === true, do NOT show the element\n *  - When 'hide' === false or 0... we WILL show the element\n */\nexport function negativeOf(hide: any) {\n  return (hide === '') ? false :\n         ((hide === 'false') || (hide === 0)) ? true : !hide;\n}\n\n/**\n * 'show' Layout API directive\n *\n */\n@Directive({\n  selector: `\n  [fxShow],\n  [fxShow.xs], [fxShow.sm], [fxShow.md], [fxShow.lg], [fxShow.xl],\n  [fxShow.lt-sm], [fxShow.lt-md], [fxShow.lt-lg], [fxShow.lt-xl],\n  [fxShow.gt-xs], [fxShow.gt-sm], [fxShow.gt-md], [fxShow.gt-lg],\n  [fxHide],\n  [fxHide.xs], [fxHide.sm], [fxHide.md], [fxHide.lg], [fxHide.xl],\n  [fxHide.lt-sm], [fxHide.lt-md], [fxHide.lt-lg], [fxHide.lt-xl],\n  [fxHide.gt-xs], [fxHide.gt-sm], [fxHide.gt-md], [fxHide.gt-lg]\n`\n})\nexport class ShowHideDirective extends BaseFxDirective implements OnInit, OnChanges, OnDestroy {\n\n  /**\n   * Subscription to the parent flex container's layout changes.\n   * Stored so we can unsubscribe when this directive is destroyed.\n   */\n  protected _layoutWatcher: Subscription;\n\n  /* tslint:disable */\n  @Input('fxShow')       set show(val) {  this._cacheInput('show', val);  }\n  @Input('fxShow.xs')    set showXs(val) {this._cacheInput('showXs', val);}\n  @Input('fxShow.sm')    set showSm(val) {this._cacheInput('showSm', val); };\n  @Input('fxShow.md')    set showMd(val) {this._cacheInput('showMd', val); };\n  @Input('fxShow.lg')    set showLg(val) {this._cacheInput('showLg', val); };\n  @Input('fxShow.xl')    set showXl(val) {this._cacheInput('showXl', val); };\n\n  @Input('fxShow.lt-sm') set showLtSm(val) { this._cacheInput('showLtSm', val); };\n  @Input('fxShow.lt-md') set showLtMd(val) { this._cacheInput('showLtMd', val); };\n  @Input('fxShow.lt-lg') set showLtLg(val) { this._cacheInput('showLtLg', val); };\n  @Input('fxShow.lt-xl') set showLtXl(val) { this._cacheInput('showLtXl', val); };\n\n  @Input('fxShow.gt-xs') set showGtXs(val) {this._cacheInput('showGtXs', val); };\n  @Input('fxShow.gt-sm') set showGtSm(val) {this._cacheInput('showGtSm', val); };\n  @Input('fxShow.gt-md') set showGtMd(val) {this._cacheInput('showGtMd', val); };\n  @Input('fxShow.gt-lg') set showGtLg(val) {this._cacheInput('showGtLg', val); };\n\n  @Input('fxHide')       set hide(val) {this._cacheInput('show', negativeOf(val));}\n  @Input('fxHide.xs')    set hideXs(val) {this._cacheInput('showXs', negativeOf(val));}\n  @Input('fxHide.sm')    set hideSm(val) {this._cacheInput('showSm', negativeOf(val)); };\n  @Input('fxHide.md')    set hideMd(val) {this._cacheInput('showMd', negativeOf(val)); };\n  @Input('fxHide.lg')    set hideLg(val) {this._cacheInput('showLg', negativeOf(val)); };\n  @Input('fxHide.xl')    set hideXl(val) {this._cacheInput('showXl', negativeOf(val)); };\n\n  @Input('fxHide.lt-sm') set hideLtSm(val) { this._cacheInput('showLtSm', negativeOf(val)); };\n  @Input('fxHide.lt-md') set hideLtMd(val) { this._cacheInput('showLtMd', negativeOf(val)); };\n  @Input('fxHide.lt-lg') set hideLtLg(val) { this._cacheInput('showLtLg', negativeOf(val)); };\n  @Input('fxHide.lt-xl') set hideLtXl(val) { this._cacheInput('showLtXl', negativeOf(val)); };\n\n  @Input('fxHide.gt-xs') set hideGtXs(val) {this._cacheInput('showGtXs', negativeOf(val)); };\n  @Input('fxHide.gt-sm') set hideGtSm(val) {this._cacheInput('showGtSm', negativeOf(val)); };\n  @Input('fxHide.gt-md') set hideGtMd(val) {this._cacheInput('showGtMd', negativeOf(val)); };\n  @Input('fxHide.gt-lg') set hideGtLg(val) {this._cacheInput('showGtLg', negativeOf(val)); };\n\n  /* tslint:enable */\n  /**\n   *\n   */\n  constructor(monitor: MediaMonitor,\n              @Optional() @Self() protected _layout: LayoutDirective,\n              protected elRef: ElementRef,\n              protected renderer: Renderer2) {\n\n    super(monitor, elRef, renderer);\n\n    if (_layout) {\n      /**\n       * The Layout can set the display:flex (and incorrectly affect the Hide/Show directives.\n       * Whenever Layout [on the same element] resets its CSS, then update the Hide/Show CSS\n       */\n      this._layoutWatcher = _layout.layout$.subscribe(() => this._updateWithValue());\n    }\n  }\n\n  // *********************************************\n  // Lifecycle Methods\n  // *********************************************\n\n  /**\n   * Override accessor to the current HTMLElement's `display` style\n   * Note: Show/Hide will not change the display to 'flex' but will set it to 'block'\n   * unless it was already explicitly specified inline or in a CSS stylesheet.\n   */\n  protected _getDisplayStyle(): string {\n    return this._layout ? 'flex' : super._getDisplayStyle();\n  }\n\n\n  /**\n   * On changes to any @Input properties...\n   * Default to use the non-responsive Input value ('fxShow')\n   * Then conditionally override with the mq-activated Input's current value\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    if (this.hasInitialized && (changes['show'] != null || this._mqActivation)) {\n      this._updateWithValue();\n    }\n  }\n\n  /**\n   * After the initial onChanges, build an mqActivation object that bridges\n   * mql change events to onMediaQueryChange handlers\n   */\n  ngOnInit() {\n    super.ngOnInit();\n\n    let value = this._getDefaultVal('show', true);\n    // Build _mqActivation controller\n    this._listenForMediaQueryChanges('show', value, (changes: MediaChange) => {\n      this._updateWithValue(changes.value);\n    });\n\n    this._updateWithValue();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    if (this._layoutWatcher) {\n      this._layoutWatcher.unsubscribe();\n    }\n  }\n\n  // *********************************************\n  // Protected methods\n  // *********************************************\n\n  /** Validate the visibility value and then update the host's inline display style */\n  protected _updateWithValue(value?: string|number|boolean) {\n    value = value || this._getDefaultVal('show', true);\n    if (this._mqActivation) {\n      value = this._mqActivation.activatedInput;\n    }\n\n    let shouldShow = this._validateTruthy(value);\n    this._applyStyleToElement(this._buildCSS(shouldShow));\n  }\n\n\n  /** Build the CSS that should be assigned to the element instance */\n  protected _buildCSS(show) {\n    return {'display': show ? this._display : 'none'};\n  }\n\n  /**  Validate the to be not FALSY */\n  _validateTruthy(show) {\n    return (FALSY.indexOf(show) == -1);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n import {\n  Directive,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Renderer2,\n  SimpleChanges,\n  SkipSelf,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {extendObject} from '../../utils/object-extend';\n\nimport {BaseFxDirective} from './base';\nimport {MediaChange} from '../../media-query/media-change';\nimport {MediaMonitor} from '../../media-query/media-monitor';\n\nimport {LayoutDirective} from './layout';\nimport {LayoutWrapDirective} from './layout-wrap';\nimport {validateBasis} from '../../utils/basis-validator';\nimport {isFlowHorizontal} from '../../utils/layout-validator';\n\n\n/** Built-in aliases for different flex-basis values. */\nexport type FlexBasisAlias = 'grow' | 'initial' | 'auto' | 'none' | 'nogrow' | 'noshrink';\n\n\n/**\n * Directive to control the size of a flex item using flex-basis, flex-grow, and flex-shrink.\n * Corresponds to the css `flex` shorthand property.\n *\n * @see https://css-tricks.com/snippets/css/a-guide-to-flexbox/\n */\n@Directive({selector: `\n  [fxFlex],\n  [fxFlex.xs], [fxFlex.sm], [fxFlex.md], [fxFlex.lg], [fxFlex.xl],\n  [fxFlex.lt-sm], [fxFlex.lt-md], [fxFlex.lt-lg], [fxFlex.lt-xl],\n  [fxFlex.gt-xs], [fxFlex.gt-sm], [fxFlex.gt-md], [fxFlex.gt-lg],\n`\n})\nexport class FlexDirective extends BaseFxDirective implements OnInit, OnChanges, OnDestroy {\n\n  /** The flex-direction of this element's flex container. Defaults to 'row'. */\n  protected _layout = 'row';\n\n  /**\n   * Subscription to the parent flex container's layout changes.\n   * Stored so we can unsubscribe when this directive is destroyed.\n   */\n  protected _layoutWatcher: Subscription;\n\n  /* tslint:disable */\n  @Input('fxShrink')     set shrink(val)    { this._cacheInput('shrink', val); };\n  @Input('fxGrow')       set grow(val)      { this._cacheInput('grow', val); };\n\n  @Input('fxFlex')       set flex(val)      { this._cacheInput('flex', val); };\n  @Input('fxFlex.xs')    set flexXs(val)    { this._cacheInput('flexXs', val); };\n  @Input('fxFlex.sm')    set flexSm(val)    { this._cacheInput('flexSm', val); };\n  @Input('fxFlex.md')    set flexMd(val)    { this._cacheInput('flexMd', val); };\n  @Input('fxFlex.lg')    set flexLg(val)    { this._cacheInput('flexLg', val); };\n  @Input('fxFlex.xl')    set flexXl(val)    { this._cacheInput('flexXl', val); };\n\n  @Input('fxFlex.gt-xs') set flexGtXs(val)  { this._cacheInput('flexGtXs', val); };\n  @Input('fxFlex.gt-sm') set flexGtSm(val)  { this._cacheInput('flexGtSm', val); };\n  @Input('fxFlex.gt-md') set flexGtMd(val)  { this._cacheInput('flexGtMd', val); };\n  @Input('fxFlex.gt-lg') set flexGtLg(val)  { this._cacheInput('flexGtLg', val); };\n\n  @Input('fxFlex.lt-sm') set flexLtSm(val) { this._cacheInput('flexLtSm', val); };\n  @Input('fxFlex.lt-md') set flexLtMd(val) { this._cacheInput('flexLtMd', val); };\n  @Input('fxFlex.lt-lg') set flexLtLg(val) { this._cacheInput('flexLtLg', val); };\n  @Input('fxFlex.lt-xl') set flexLtXl(val) { this._cacheInput('flexLtXl', val); };\n  /* tslint:enable */\n\n  // Note: Explicitly @SkipSelf on LayoutDirective and LayoutWrapDirective because we are looking\n  //       for the parent flex container for this flex item.\n  constructor(monitor: MediaMonitor,\n              elRef: ElementRef,\n              renderer: Renderer2,\n              @Optional() @SkipSelf() protected _container: LayoutDirective,\n              @Optional() @SkipSelf() protected _wrap: LayoutWrapDirective) {\n\n    super(monitor, elRef, renderer);\n\n    this._cacheInput('flex', '');\n    this._cacheInput('shrink', 1);\n    this._cacheInput('grow', 1);\n\n    if (_container) {\n      // If this flex item is inside of a flex container marked with\n      // Subscribe to layout immediate parent direction changes\n      this._layoutWatcher = _container.layout$.subscribe((direction) => {\n        // `direction` === null if parent container does not have a `fxLayout`\n        this._onLayoutChange(direction);\n      });\n    }\n  }\n\n  /**\n   * For @Input changes on the current mq activation property, see onMediaQueryChanges()\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['flex'] != null || this._mqActivation) {\n      this._updateStyle();\n    }\n  }\n\n  /**\n   * After the initial onChanges, build an mqActivation object that bridges\n   * mql change events to onMediaQueryChange handlers\n   */\n  ngOnInit() {\n    super.ngOnInit();\n\n    this._listenForMediaQueryChanges('flex', '', (changes: MediaChange) => {\n      this._updateStyle(changes.value);\n    });\n    this._updateStyle();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    if (this._layoutWatcher) {\n      this._layoutWatcher.unsubscribe();\n    }\n  }\n\n\n  /**\n   * Caches the parent container's 'flex-direction' and updates the element's style.\n   * Used as a handler for layout change events from the parent flex container.\n   */\n  protected _onLayoutChange(direction?: string) {\n    this._layout = direction || this._layout || 'row';\n    this._updateStyle();\n  }\n\n  protected _updateStyle(value?: string|number) {\n    let flexBasis = value || this._queryInput('flex') || '';\n    if (this._mqActivation) {\n      flexBasis = this._mqActivation.activatedInput;\n    }\n\n    let basis = String(flexBasis).replace(';', '');\n    let parts = validateBasis(basis, this._queryInput('grow'), this._queryInput('shrink'));\n    this._applyStyleToElement(this._validateValue.apply(this, parts));\n  }\n\n  /**\n   * Validate the value to be one of the acceptable value options\n   * Use default fallback of 'row'\n   */\n  protected _validateValue(grow: number|string,\n                           shrink: number|string,\n                           basis: string|number|FlexBasisAlias) {\n      // The flex-direction of this element's flex container. Defaults to 'row'.\n      let layout = this._getFlowDirection(this.parentElement, true);\n      let direction = (layout.indexOf('column') > -1) ? 'column' : 'row';\n      let css, isValue;\n\n      grow = (grow == '0') ? 0 : grow;\n      shrink = (shrink == '0') ? 0 : shrink;\n\n      // flex-basis allows you to specify the initial/starting main-axis size of the element,\n      // before anything else is computed. It can either be a percentage or an absolute value.\n      // It is, however, not the breaking point for flex-grow/shrink properties\n      //\n      // flex-grow can be seen as this:\n      //   0: Do not stretch. Either size to element's content width, or obey 'flex-basis'.\n      //   1: (Default value). Stretch; will be the same size to all other flex items on\n      //       the same row since they have a default value of 1.\n      //   ≥2 (integer n): Stretch. Will be n times the size of other elements\n      //      with 'flex-grow: 1' on the same row.\n\n      // Use `null` to clear existing styles.\n      let clearStyles = {\n        'max-width': null,\n        'max-height': null,\n        'min-width': null,\n        'min-height': null\n      };\n      switch (basis || '') {\n        case '':\n          css = extendObject(clearStyles, {'flex': '1 1 0.000000001px'});\n          break;\n        case 'initial':   // default\n        case 'nogrow':\n          grow = 0;\n          css = extendObject(clearStyles, {'flex': '0 1 auto'});\n          break;\n        case 'grow':\n          css = extendObject(clearStyles, {'flex': '1 1 100%'});\n          break;\n        case 'noshrink':\n          shrink = 0;\n          css = extendObject(clearStyles, {'flex': '1 0 auto'});\n          break;\n        case 'auto':\n          css = extendObject(clearStyles, {'flex': `${grow} ${shrink} auto`});\n          break;\n        case 'none':\n          grow = 0;\n          shrink = 0;\n          css = extendObject(clearStyles, {'flex': '0 0 auto'});\n          break;\n        default:\n          let hasCalc = String(basis).indexOf('calc') > -1;\n          let isPercent = String(basis).indexOf('%') > -1 && !hasCalc;\n\n          isValue = hasCalc ||\n              String(basis).indexOf('px') > -1 ||\n              String(basis).indexOf('em') > -1 ||\n              String(basis).indexOf('vw') > -1 ||\n              String(basis).indexOf('vh') > -1;\n\n          // Defaults to percentage sizing unless `px` is explicitly set\n          if (!isValue && !isPercent && !isNaN(basis as any)) {\n            basis = basis + '%';\n          }\n\n          if (basis === '0px') {\n            basis = '0%';\n          }\n\n          // Set max-width = basis if using layout-wrap\n          // tslint:disable-next-line:max-line-length\n          // @see https://github.com/philipwalton/flexbugs#11-min-and-max-size-declarations-are-ignored-when-wrappifl-flex-items\n\n          css = extendObject(clearStyles, { // fix issue #5345\n            'flex': `${grow} ${shrink} ${(isValue || this._wrap) ? basis : '100%'}`,\n          });\n          break;\n      }\n\n      let max = isFlowHorizontal(direction) ? 'max-width' : 'max-height';\n      let min = isFlowHorizontal(direction) ? 'min-width' : 'min-height';\n\n      let usingCalc = (String(basis).indexOf('calc') > -1) || (basis == 'auto');\n      let isPx = String(basis).indexOf('px') > -1 || usingCalc;\n\n\n      // make box inflexible when shrink and grow are both zero\n      // should not set a min when the grow is zero\n      // should not set a max when the shrink is zero\n      let isFixed = !grow && !shrink;\n      css[min] = (basis == '0%') ? 0 : isFixed || (isPx && grow) ? basis : null;\n      css[max] = (basis == '0%') ? 0 : isFixed || (!usingCalc && shrink) ? basis : null;\n\n    return extendObject(css, {'box-sizing': 'border-box'});\n  }\n\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n /**\n * The flex API permits 3 or 1 parts of the value:\n *    - `flex-grow flex-shrink flex-basis`, or\n *    - `flex-basis`\n */\nexport function validateBasis(basis: string, grow = '1', shrink = '1'): string[] {\n  let parts = [grow, shrink, basis];\n\n  let j = basis.indexOf('calc');\n  if (j > 0) {\n    parts[2] = _validateCalcValue(basis.substring(j).trim());\n    let matches = basis.substr(0, j).trim().split(' ');\n    if (matches.length == 2) {\n      parts[0] = matches[0];\n      parts[1] = matches[1];\n    }\n  } else if (j == 0) {\n    parts[2] = _validateCalcValue(basis.trim());\n  } else {\n    let matches = basis.split(' ');\n    parts = (matches.length === 3) ? matches : [\n          grow, shrink, basis\n        ];\n  }\n\n  return parts;\n}\n\n\n/**\n * Calc expressions require whitespace before & after any expression operators\n * This is a simple, crude whitespace padding solution.\n *   - '3 3 calc(15em + 20px)'\n *   - calc(100% / 7 * 2)\n *   - 'calc(15em + 20px)'\n *   - 'calc(15em+20px)'\n *   - '37px'\n *   = '43%'\n */\nfunction _validateCalcValue(calc: string): string {\n  return calc.replace(/[\\s]/g, '').replace(/[\\/\\*\\+\\-]/g, ' $& ');\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n  SimpleChanges, Self, Optional,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\n\nimport {BaseFxDirective} from './base';\nimport {LayoutDirective} from './layout';\nimport {MediaChange} from '../../media-query/media-change';\nimport {MediaMonitor} from '../../media-query/media-monitor';\nimport {validateWrapValue, LAYOUT_VALUES} from '../../utils/layout-validator';\n/**\n * @deprecated\n * This functionality is now part of the `fxLayout` API\n *\n * 'layout-wrap' flexbox styling directive\n * Defines wrapping of child elements in layout container\n * Optional values: reverse, wrap-reverse, none, nowrap, wrap (default)]\n *\n *\n * @see https://css-tricks.com/almanac/properties/f/flex-wrap/\n */\n@Directive({selector: `\n  [fxLayoutWrap], [fxLayoutWrap.xs], [fxLayoutWrap.sm], [fxLayoutWrap.lg], [fxLayoutWrap.xl],\n  [fxLayoutWrap.gt-xs], [fxLayoutWrap.gt-sm], [fxLayoutWrap.gt-md], [fxLayoutWrap.gt-lg],\n  [fxLayoutWrap.lt-xs], [fxLayoutWrap.lt-sm], [fxLayoutWrap.lt-md], [fxLayoutWrap.lt-lg]\n`})\nexport class LayoutWrapDirective extends BaseFxDirective implements OnInit, OnChanges, OnDestroy {\n  protected _layout = 'row';  // default flex-direction\n  protected _layoutWatcher: Subscription;\n\n  /* tslint:disable */\n  @Input('fxLayoutWrap')       set wrap(val)     { this._cacheInput('wrap', val); }\n  @Input('fxLayoutWrap.xs')    set wrapXs(val)   { this._cacheInput('wrapXs', val); }\n  @Input('fxLayoutWrap.sm')    set wrapSm(val)   { this._cacheInput('wrapSm', val); };\n  @Input('fxLayoutWrap.md')    set wrapMd(val)   { this._cacheInput('wrapMd', val); };\n  @Input('fxLayoutWrap.lg')    set wrapLg(val)   { this._cacheInput('wrapLg', val); };\n  @Input('fxLayoutWrap.xl')    set wrapXl(val)   { this._cacheInput('wrapXl', val); };\n\n  @Input('fxLayoutWrap.gt-xs') set wrapGtXs(val) { this._cacheInput('wrapGtXs', val); };\n  @Input('fxLayoutWrap.gt-sm') set wrapGtSm(val) { this._cacheInput('wrapGtSm', val); };\n  @Input('fxLayoutWrap.gt-md') set wrapGtMd(val) { this._cacheInput('wrapGtMd', val); };\n  @Input('fxLayoutWrap.gt-lg') set wrapGtLg(val) { this._cacheInput('wrapGtLg', val); };\n\n  @Input('fxLayoutWrap.lt-sm') set wrapLtSm(val) { this._cacheInput('wrapLtSm', val); };\n  @Input('fxLayoutWrap.lt-md') set wrapLtMd(val) { this._cacheInput('wrapLtMd', val); };\n  @Input('fxLayoutWrap.lt-lg') set wrapLtLg(val) { this._cacheInput('wrapLtLg', val); };\n  @Input('fxLayoutWrap.lt-xl') set wrapLtXl(val) { this._cacheInput('wrapLtXl', val); };\n\n  /* tslint:enable */\n  constructor(\n    monitor: MediaMonitor,\n    elRef: ElementRef,\n    renderer: Renderer2,\n    @Optional() @Self() container: LayoutDirective) {\n\n    super(monitor, elRef, renderer);\n\n    if (container) {  // Subscribe to layout direction changes\n      this._layoutWatcher = container.layout$.subscribe(this._onLayoutChange.bind(this));\n    }\n  }\n\n  // *********************************************\n  // Lifecycle Methods\n  // *********************************************\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['wrap'] != null || this._mqActivation) {\n      this._updateWithValue();\n    }\n  }\n\n  /**\n   * After the initial onChanges, build an mqActivation object that bridges\n   * mql change events to onMediaQueryChange handlers\n   */\n  ngOnInit() {\n    super.ngOnInit();\n\n    this._listenForMediaQueryChanges('wrap', 'wrap', (changes: MediaChange) => {\n      this._updateWithValue(changes.value);\n    });\n    this._updateWithValue();\n  }\n\n  ngOnDestroy() {\n      super.ngOnDestroy();\n    if (this._layoutWatcher) {\n      this._layoutWatcher.unsubscribe();\n    }\n  }\n\n  // *********************************************\n  // Protected methods\n  // *********************************************\n\n  /**\n   * Cache the parent container 'flex-direction' and update the 'flex' styles\n   */\n  protected _onLayoutChange(direction) {\n    this._layout = (direction || '').toLowerCase().replace('-reverse', '');\n    if (!LAYOUT_VALUES.find(x => x === this._layout)) {\n      this._layout = 'row';\n    }\n\n    this._updateWithValue();\n  }\n\n  protected _updateWithValue(value?: string) {\n    value = value || this._queryInput('wrap');\n    if (this._mqActivation) {\n      value = this._mqActivation.activatedInput;\n    }\n    value = validateWrapValue(value || 'wrap');\n\n    this._applyStyleToElement(this._buildCSS(value));\n  }\n\n  /**\n   * Build the CSS that should be assigned to the element instance\n   */\n  protected _buildCSS(value) {\n    return {\n      'display': 'flex',\n      'flex-wrap': value,\n      'flex-direction': this.flowDirection\n    };\n  }\n\n  protected get flowDirection(): string {\n    let computeFlowDirection = () => this._getFlowDirection(this._elementRef.nativeElement);\n    return this._layoutWatcher ? this._layout : computeFlowDirection();\n  }\n\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  OnInit,\n  OnChanges,\n  OnDestroy,\n  Renderer2,\n  SimpleChanges,\n} from '@angular/core';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {Observable} from 'rxjs/Observable';\n\nimport {BaseFxDirective} from './base';\nimport {MediaChange} from '../../media-query/media-change';\nimport {MediaMonitor} from '../../media-query/media-monitor';\nimport {buildLayoutCSS} from '../../utils/layout-validator';\n/**\n * 'layout' flexbox styling directive\n * Defines the positioning flow direction for the child elements: row or column\n * Optional values: column or row (default)\n * @see https://css-tricks.com/almanac/properties/f/flex-direction/\n *\n */\n@Directive({selector: `\n  [fxLayout],\n  [fxLayout.xs], [fxLayout.sm], [fxLayout.md], [fxLayout.lg], [fxLayout.xl],\n  [fxLayout.lt-sm], [fxLayout.lt-md], [fxLayout.lt-lg], [fxLayout.lt-xl],\n  [fxLayout.gt-xs], [fxLayout.gt-sm], [fxLayout.gt-md], [fxLayout.gt-lg]\n`})\nexport class LayoutDirective extends BaseFxDirective implements OnInit, OnChanges, OnDestroy {\n\n  /**\n   * Create Observable for nested/child 'flex' directives. This allows\n   * child flex directives to subscribe/listen for flexbox direction changes.\n   */\n  protected _announcer: BehaviorSubject<string>;\n\n  /**\n   * Publish observer to enabled nested, dependent directives to listen\n   * to parent 'layout' direction changes\n   */\n  public layout$: Observable<string>;\n\n  /* tslint:disable */\n  @Input('fxLayout')       set layout(val)     { this._cacheInput('layout', val); };\n  @Input('fxLayout.xs')    set layoutXs(val)   { this._cacheInput('layoutXs', val); };\n  @Input('fxLayout.sm')    set layoutSm(val)   { this._cacheInput('layoutSm', val); };\n  @Input('fxLayout.md')    set layoutMd(val)   { this._cacheInput('layoutMd', val); };\n  @Input('fxLayout.lg')    set layoutLg(val)   { this._cacheInput('layoutLg', val); };\n  @Input('fxLayout.xl')    set layoutXl(val)   { this._cacheInput('layoutXl', val); };\n\n  @Input('fxLayout.gt-xs') set layoutGtXs(val) { this._cacheInput('layoutGtXs', val); };\n  @Input('fxLayout.gt-sm') set layoutGtSm(val) { this._cacheInput('layoutGtSm', val); };\n  @Input('fxLayout.gt-md') set layoutGtMd(val) { this._cacheInput('layoutGtMd', val); };\n  @Input('fxLayout.gt-lg') set layoutGtLg(val) { this._cacheInput('layoutGtLg', val); };\n\n  @Input('fxLayout.lt-sm') set layoutLtSm(val) { this._cacheInput('layoutLtSm', val); };\n  @Input('fxLayout.lt-md') set layoutLtMd(val) { this._cacheInput('layoutLtMd', val); };\n  @Input('fxLayout.lt-lg') set layoutLtLg(val) { this._cacheInput('layoutLtLg', val); };\n  @Input('fxLayout.lt-xl') set layoutLtXl(val) { this._cacheInput('layoutLtXl', val); };\n\n  /* tslint:enable */\n  /**\n   *\n   */\n  constructor(monitor: MediaMonitor, elRef: ElementRef, renderer: Renderer2) {\n    super(monitor, elRef, renderer);\n    this._announcer = new BehaviorSubject<string>('row');\n    this.layout$ = this._announcer.asObservable();\n  }\n\n  // *********************************************\n  // Lifecycle Methods\n  // *********************************************\n\n  /**\n   * On changes to any @Input properties...\n   * Default to use the non-responsive Input value ('fxLayout')\n   * Then conditionally override with the mq-activated Input's current value\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['layout'] != null || this._mqActivation) {\n      this._updateWithDirection();\n    }\n  }\n\n  /**\n   * After the initial onChanges, build an mqActivation object that bridges\n   * mql change events to onMediaQueryChange handlers\n   */\n  ngOnInit() {\n    super.ngOnInit();\n\n    this._listenForMediaQueryChanges('layout', 'row', (changes: MediaChange) => {\n      this._updateWithDirection(changes.value);\n    });\n    this._updateWithDirection();\n  }\n\n  // *********************************************\n  // Protected methods\n  // *********************************************\n\n  /**\n   * Validate the direction value and then update the host's inline flexbox styles\n   */\n  protected _updateWithDirection(value?: string) {\n    value = value || this._queryInput('layout') || 'row';\n    if (this._mqActivation) {\n      value = this._mqActivation.activatedInput;\n    }\n\n    // Update styles and announce to subscribers the *new* direction\n    let css = buildLayoutCSS(value);\n\n    this._applyStyleToElement(css);\n    this._announcer.next(css['flex-direction']);\n  }\n\n\n\n\n\n\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  ElementRef, OnDestroy, SimpleChanges, OnChanges,\n  SimpleChange, Renderer2\n} from '@angular/core';\n\nimport {buildLayoutCSS} from '../../utils/layout-validator';\nimport {\n  StyleDefinition,\n  lookupStyle,\n  lookupInlineStyle,\n  applyStyleToElement,\n  applyStyleToElements\n} from '../../utils/style-utils';\n\nimport {ResponsiveActivation, KeyOptions} from '../responsive/responsive-activation';\nimport {MediaMonitor} from '../../media-query/media-monitor';\nimport {MediaQuerySubscriber} from '../../media-query/media-change';\n\n/** Abstract base class for the Layout API styling directives. */\nexport abstract class BaseFxDirective implements OnDestroy, OnChanges {\n\n  get hasMediaQueryListener() {\n    return !!this._mqActivation;\n  }\n\n  /**\n   * Imperatively determine the current activated [input] value;\n   * if called before ngOnInit() this will return `undefined`\n   */\n  get activatedValue(): string | number {\n    return this._mqActivation ? this._mqActivation.activatedInput : undefined;\n  }\n\n  /**\n   * Change the currently activated input value and force-update\n   * the injected CSS (by-passing change detection).\n   *\n   * NOTE: Only the currently activated input value will be modified;\n   *       other input values will NOT be affected.\n   */\n  set activatedValue(value: string | number) {\n    let key = 'baseKey', previousVal;\n\n    if (this._mqActivation) {\n      key = this._mqActivation.activatedInputKey;\n      previousVal = this._inputMap[key];\n      this._inputMap[key] = value;\n    }\n    let change = new SimpleChange(previousVal, value, false);\n\n    this.ngOnChanges({[key]: change} as SimpleChanges);\n  }\n\n\n  /**\n   * Constructor\n   */\n  constructor(protected _mediaMonitor: MediaMonitor,\n              protected _elementRef: ElementRef,\n              protected _renderer: Renderer2) {\n  }\n\n  // *********************************************\n  // Accessor Methods\n  // *********************************************\n\n  /**\n   * Access to host element's parent DOM node\n   */\n  protected get parentElement(): any {\n    return this._elementRef.nativeElement.parentNode;\n  }\n\n  /**\n   * Access the current value (if any) of the @Input property.\n   */\n  protected _queryInput(key) {\n    return this._inputMap[key];\n  }\n\n\n  // *********************************************\n  // Lifecycle Methods\n  // *********************************************\n\n  /**\n   * Use post-component-initialization event to perform extra\n   * querying such as computed Display style\n   */\n  ngOnInit() {\n    this._display = this._getDisplayStyle();\n    this._hasInitialized = true;\n  }\n\n  ngOnChanges(change: SimpleChanges) {\n    throw new Error(`BaseFxDirective::ngOnChanges should be overridden in subclass: ${change}`);\n  }\n\n  ngOnDestroy() {\n    if (this._mqActivation) {\n      this._mqActivation.destroy();\n    }\n    this._mediaMonitor = null;\n  }\n\n  // *********************************************\n  // Protected Methods\n  // *********************************************\n\n  /**\n   * Was the directive's default selector used ?\n   * If not, use the fallback value!\n   */\n  protected _getDefaultVal(key: string, fallbackVal: any): string | boolean {\n    let val = this._queryInput(key);\n    let hasDefaultVal = (val !== undefined && val !== null);\n    return (hasDefaultVal && val !== '') ? val : fallbackVal;\n  }\n\n  /**\n   * Quick accessor to the current HTMLElement's `display` style\n   * Note: this allows use to preserve the original style\n   * and optional restore it when the mediaQueries deactivate\n   */\n  protected _getDisplayStyle(source?: HTMLElement): string {\n    let element: HTMLElement = source || this._elementRef.nativeElement;\n    return lookupStyle(element, 'display');\n  }\n\n  /**\n   * Determine the DOM element's Flexbox flow (flex-direction).\n   *\n   * Check inline style first then check computed (stylesheet) style.\n   * And optionally add the flow value to element's inline style.\n   */\n  protected _getFlowDirection(target: any, addIfMissing = false): string {\n    let value = 'row';\n\n    if (target) {\n      value = lookupStyle(target, 'flex-direction') || 'row';\n      let hasInlineValue = lookupInlineStyle(target, 'flex-direction');\n\n      if (!hasInlineValue && addIfMissing) {\n        applyStyleToElements(this._renderer, buildLayoutCSS(value), [target]);\n      }\n    }\n\n    return value.trim();\n  }\n\n  /**\n   * Applies styles given via string pair or object map to the directive element.\n   */\n  protected _applyStyleToElement(style: StyleDefinition,\n                                 value?: string | number,\n                                 nativeElement?: any) {\n    let element = nativeElement || this._elementRef.nativeElement;\n    applyStyleToElement(this._renderer, element, style, value);\n  }\n\n  /**\n   * Applies styles given via string pair or object map to the directive's element.\n   */\n  protected _applyStyleToElements(style: StyleDefinition, elements: HTMLElement[ ]) {\n    applyStyleToElements(this._renderer, style, elements || []);\n  }\n\n  /**\n   *  Save the property value; which may be a complex object.\n   *  Complex objects support property chains\n   */\n  protected _cacheInput(key?: string, source?: any) {\n    if (typeof source === 'object') {\n      for (let prop in source) {\n        this._inputMap[prop] = source[prop];\n      }\n    } else {\n      this._inputMap[key] = source;\n    }\n  }\n\n  /**\n   *  Build a ResponsiveActivation object used to manage subscriptions to mediaChange notifications\n   *  and intelligent lookup of the directive's property value that corresponds to that mediaQuery\n   *  (or closest match).\n   */\n  protected _listenForMediaQueryChanges(key: string,\n                                        defaultValue: any,\n                                        onMediaQueryChange: MediaQuerySubscriber): ResponsiveActivation { // tslint:disable-line:max-line-length\n    if (!this._mqActivation) {\n      let keyOptions = new KeyOptions(key, defaultValue, this._inputMap);\n      this._mqActivation = new ResponsiveActivation(\n          keyOptions,\n          this._mediaMonitor,\n          (change) => onMediaQueryChange(change)\n      );\n    }\n    return this._mqActivation;\n  }\n\n  /**\n   * Special accessor to query for all child 'element' nodes regardless of type, class, etc.\n   */\n  protected get childrenNodes() {\n    const obj = this._elementRef.nativeElement.children;\n    const buffer = [];\n\n    // iterate backwards ensuring that length is an UInt32\n    for (let i = obj.length; i--; ) {\n      buffer[i] = obj[i];\n    }\n    return buffer;\n  }\n\n  /**\n   * Fast validator for presence of attribute on the host element\n   */\n  protected hasKeyValue(key) {\n    return this._mqActivation.hasKeyValue(key);\n  }\n\n  protected get hasInitialized() {\n    return this._hasInitialized;\n  }\n\n  /** Original dom Elements CSS display style */\n  protected _display;\n\n  /**\n   * MediaQuery Activation Tracker\n   */\n  protected _mqActivation: ResponsiveActivation;\n\n  /**\n   *  Dictionary of input keys with associated values\n   */\n  protected _inputMap = {};\n\n  /**\n   * Has the `ngOnInit()` method fired\n   *\n   * Used to allow *ngFor tasks to finish and support queries like\n   * getComputedStyle() during ngOnInit().\n   */\n  protected _hasInitialized = false;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Subscription} from 'rxjs/Subscription';\nimport {map} from 'rxjs/operator/map';\n\nimport {MediaChange, MediaQuerySubscriber} from '../../media-query/media-change';\nimport {BreakPoint} from '../../media-query/breakpoints/break-point';\nimport {MediaMonitor} from '../../media-query/media-monitor';\n\nimport {extendObject} from '../../utils/object-extend';\n\nexport declare type SubscriptionList = Subscription[ ];\n\nexport interface BreakPointX extends BreakPoint {\n  key: string;\n  baseKey: string;\n}\n\nexport class KeyOptions {\n  constructor(public baseKey: string,\n              public defaultValue: string|number|boolean,\n              public inputKeys: { [key: string]: any }) {\n  }\n}\n\n/**\n * ResponsiveActivation acts as a proxy between the MonitorMedia service (which emits mediaQuery\n * changes) and the fx API directives. The MQA proxies mediaQuery change events and notifies the\n * directive via the specified callback.\n *\n * - The MQA also determines which directive property should be used to determine the\n *   current change 'value'... BEFORE the original `onMediaQueryChanges()` method is called.\n * - The `ngOnDestroy()` method is also head-hooked to enable auto-unsubscribe from the\n *   MediaQueryServices.\n *\n * NOTE: these interceptions enables the logic in the fx API directives to remain terse and clean.\n */\nexport class ResponsiveActivation {\n  private _subscribers: SubscriptionList = [];\n  private _activatedInputKey: string;\n\n  /**\n   * Constructor\n   */\n  constructor(private _options: KeyOptions,\n              private _mediaMonitor: MediaMonitor,\n              private _onMediaChanges: MediaQuerySubscriber) {\n    this._subscribers = this._configureChangeObservers();\n  }\n\n  /**\n   * Accessor to the DI'ed directive property\n   * Each directive instance has a reference to the MediaMonitor which is\n   * used HERE to subscribe to mediaQuery change notifications.\n   */\n  get mediaMonitor(): MediaMonitor {\n    return this._mediaMonitor;\n  }\n\n  /**\n   * Determine which directive @Input() property is currently active (for the viewport size):\n   * The key must be defined (in use) or fallback to the 'closest' overlapping property key\n   * that is defined; otherwise the default property key will be used.\n   * e.g.\n   *      if `<div fxHide fxHide.gt-sm=\"false\">` is used but the current activated mediaQuery alias\n   *      key is `.md` then `.gt-sm` should be used instead\n   */\n  get activatedInputKey(): string {\n    return this._activatedInputKey || this._options.baseKey;\n  }\n\n  /**\n   * Get the currently activated @Input value or the fallback default @Input value\n   */\n  get activatedInput(): any {\n    let key = this.activatedInputKey;\n    return this.hasKeyValue(key) ? this._lookupKeyValue(key) : this._options.defaultValue;\n  }\n\n  /**\n   * Fast validator for presence of attribute on the host element\n   */\n  public hasKeyValue(key) {\n    let value = this._options.inputKeys[key];\n    return typeof value !== 'undefined';\n  }\n\n  /**\n   * Remove interceptors, restore original functions, and forward the onDestroy() call\n   */\n  destroy() {\n    this._subscribers.forEach((link: Subscription) => {\n      link.unsubscribe();\n    });\n    this._subscribers = [];\n  }\n\n  /**\n   * For each *defined* API property, register a callback to `_onMonitorEvents( )`\n   * Cache 1..n subscriptions for internal auto-unsubscribes when the the directive destructs\n   */\n  private _configureChangeObservers(): SubscriptionList {\n    let subscriptions = [];\n\n    this._buildRegistryMap().forEach((bp: BreakPointX) => {\n      if (this._keyInUse(bp.key)) {\n        // Inject directive default property key name: to let onMediaChange() calls\n        // know which property is being triggered...\n        let buildChanges = (change: MediaChange) => {\n          change = change.clone();\n          change.property = this._options.baseKey;\n          return change;\n        };\n\n        subscriptions.push(\n            map.call(this.mediaMonitor.observe(bp.alias), buildChanges)\n                .subscribe(change => {\n                  this._onMonitorEvents(change);\n                })\n        );\n      }\n    });\n\n    return subscriptions;\n  }\n\n  /**\n   * Build mediaQuery key-hashmap; only for the directive properties that are actually defined/used\n   * in the HTML markup\n   */\n  private _buildRegistryMap() {\n    return this.mediaMonitor.breakpoints\n        .map(bp => {\n          return <BreakPointX> extendObject({}, bp, {\n            baseKey: this._options.baseKey,             // e.g. layout, hide, self-align, flex-wrap\n            key: this._options.baseKey + bp.suffix  // e.g.  layoutGtSm, layoutMd, layoutGtLg\n          });\n        })\n        .filter(bp => this._keyInUse(bp.key));\n  }\n\n  /**\n   * Synchronizes change notifications with the current mq-activated @Input and calculates the\n   * mq-activated input value or the default value\n   */\n  protected _onMonitorEvents(change: MediaChange) {\n    if (change.property == this._options.baseKey) {\n      change.value = this._calculateActivatedValue(change);\n\n      this._onMediaChanges(change);\n    }\n  }\n\n  /**\n   * Has the key been specified in the HTML markup and thus is intended\n   * to participate in activation processes.\n   */\n  private _keyInUse(key): boolean {\n    return this._lookupKeyValue(key) !== undefined;\n  }\n\n  /**\n   *  Map input key associated with mediaQuery activation to closest defined input key\n   *  then return the values associated with the targeted input property\n   *\n   *  !! change events may arrive out-of-order (activate before deactivate)\n   *     so make sure the deactivate is used ONLY when the keys match\n   *     (since a different activate may be in use)\n   */\n  private _calculateActivatedValue(current: MediaChange): any {\n    const currentKey = this._options.baseKey + current.suffix;  // e.g. suffix == 'GtSm',\n    let newKey = this._activatedInputKey;                     // e.g. newKey == hideGtSm\n\n    newKey = current.matches ? currentKey : ((newKey == currentKey) ? null : newKey);\n\n    this._activatedInputKey = this._validateInputKey(newKey);\n    return this.activatedInput;\n  }\n\n  /**\n   * For the specified input property key, validate it is defined (used in the markup)\n   * If not see if a overlapping mediaQuery-related input key fallback has been defined\n   *\n   * NOTE: scans in the order defined by activeOverLaps (largest viewport ranges -> smallest ranges)\n   */\n  private _validateInputKey(inputKey) {\n    let items: BreakPoint[] = this.mediaMonitor.activeOverlaps;\n    let isMissingKey = (key) => !this._keyInUse(key);\n\n    if (isMissingKey(inputKey)) {\n      items.some(bp => {\n        let key = this._options.baseKey + bp.suffix;\n        if (!isMissingKey(key)) {\n          inputKey = key;\n          return true;  // exit .some()\n        }\n        return false;\n      });\n    }\n    return inputKey;\n  }\n\n  /**\n   * Get the value (if any) for the directive instances @Input property (aka key)\n   */\n  private _lookupKeyValue(key) {\n    return this._options.inputKeys[key];\n  }\n\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Renderer2} from '@angular/core';\nimport {ɵgetDOM as getDom} from '@angular/platform-browser';\nimport {applyCssPrefixes} from './auto-prefixer';\n\n/**\n * Definition of a css style. Either a property name (e.g. \"flex-basis\") or an object\n * map of property name and value (e.g. {display: 'none', flex-order: 5}).\n */\nexport type StyleDefinition = string | { [property: string]: string | number };\n\n\n/**\n * Applies styles given via string pair or object map to the directive element.\n */\nexport function applyStyleToElement(renderer: Renderer2,\n                                    element: any,\n                                    style: StyleDefinition,\n                                    value?: string | number) {\n  let styles = {};\n  if (typeof style === 'string') {\n    styles[style] = value;\n    style = styles;\n  }\n\n  styles = applyCssPrefixes(style);\n  applyMultiValueStyleToElement(styles, element, renderer);\n}\n\n\n/**\n * Applies styles given via string pair or object map to the directive's element.\n */\nexport function applyStyleToElements(renderer: Renderer2,\n                              style: StyleDefinition,\n                              elements: HTMLElement[ ]) {\n  let styles = applyCssPrefixes(style);\n\n  elements.forEach(el => {\n    applyMultiValueStyleToElement(styles, el, renderer);\n  });\n}\n\n/**\n * Applies the styles to the element. The styles object map may contain an array of values.\n * Each value will be added as element style.\n */\nexport function applyMultiValueStyleToElement(styles: {}, element: any, renderer: Renderer2) {\n  Object.keys(styles).forEach(key => {\n    const values = Array.isArray(styles[key]) ? styles[key] : [styles[key]];\n    for (let value of values) {\n      renderer.setStyle(element, key, value);\n    }\n  });\n}\n\n/**\n * Find the DOM element's inline style value (if any)\n */\nexport function lookupInlineStyle(element: HTMLElement, styleName: string): string {\n  return getDom().getStyle(element, styleName);\n}\n\n/**\n * Determine the inline or inherited CSS style\n */\nexport function lookupStyle(element: HTMLElement, styleName: string, inlineOnly = false): string {\n  let value = '';\n  if (element) {\n    try {\n      let immediateValue = value = lookupInlineStyle(element, styleName);\n      if ( !inlineOnly ) {\n        value = immediateValue || getDom().getComputedStyle(element).getPropertyValue(styleName);\n      }\n    } catch (e) {\n      // TODO: platform-server throws an exception for getComputedStyle\n    }\n  }\n\n  // Note: 'inline' is the default of all elements, unless UA stylesheet overrides;\n  //       in which case getComputedStyle() should determine a valid value.\n  return value ? value.trim() : 'block';\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Applies CSS prefixes to appropriate style keys.\n *\n * Note: `-ms-`, `-moz` and `-webkit-box` are no longer supported. e.g.\n *    {\n *      display: -webkit-flex;     NEW - Safari 6.1+. iOS 7.1+, BB10\n *      display: flex;             NEW, Spec - Firefox, Chrome, Opera\n *      // display: -webkit-box;   OLD - iOS 6-, Safari 3.1-6, BB7\n *      // display: -ms-flexbox;   TWEENER - IE 10\n *      // display: -moz-flexbox;  OLD - Firefox\n *    }\n */\nexport function applyCssPrefixes(target) {\n  for (let key in target) {\n    let value = target[key] || '';\n\n    switch (key) {\n      case 'display':\n        if (value === 'flex') {\n          target['display'] = [\n            '-webkit-flex',\n            'flex'\n          ];\n        } else if (value === 'inline-flex') {\n          target['display'] = [\n            '-webkit-inline-flex',\n            'inline-flex'\n          ];\n        } else {\n          target['display'] = value;\n        }\n        break;\n\n      case 'align-items':\n      case 'align-self':\n      case 'align-content':\n      case 'flex':\n      case 'flex-basis':\n      case 'flex-flow':\n      case 'flex-grow':\n      case 'flex-shrink':\n      case 'flex-wrap':\n      case 'justify-content':\n        target['-webkit-' + key] = value;\n        break;\n\n      case 'flex-direction':\n        value = value || 'row';\n        target['-webkit-flex-direction'] = value;\n        target['flex-direction'] = value;\n        break;\n\n      case 'order':\n        target['order'] = target['-webkit-' + key] = isNaN(value) ? '0' : value;\n        break;\n    }\n  }\n  return target;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport const LAYOUT_VALUES = ['row', 'column', 'row-reverse', 'column-reverse'];\n\n/**\n * Validate the direction|'direction wrap' value and then update the host's inline flexbox styles\n */\nexport function buildLayoutCSS(value: string) {\n  let [direction, wrap] = validateValue(value);\n  return  buildCSS(direction, wrap);\n }\n\n/**\n  * Validate the value to be one of the acceptable value options\n  * Use default fallback of 'row'\n  */\nexport function validateValue(value: string) {\n  value = value ? value.toLowerCase() : '';\n  let [direction, wrap] = value.split(' ');\n  if (!LAYOUT_VALUES.find(x => x === direction)) {\n    direction = LAYOUT_VALUES[0];\n  }\n  return [direction, validateWrapValue(wrap)];\n}\n\n/**\n * Determine if the validated, flex-direction value specifies\n * a horizontal/row flow.\n */\nexport function isFlowHorizontal(value: string): boolean {\n  let [flow, _] = validateValue(value);\n  return flow.indexOf('row') > -1;\n}\n\n/**\n * Convert layout-wrap='<value>' to expected flex-wrap style\n */\nexport function validateWrapValue(value) {\n  if (!!value) {\n    switch (value.toLowerCase()) {\n      case 'reverse':\n      case 'wrap-reverse':\n      case 'reverse-wrap':\n        value = 'wrap-reverse';\n        break;\n\n      case 'no':\n      case 'none':\n      case 'nowrap':\n        value = 'nowrap';\n        break;\n\n      // All other values fallback to 'wrap'\n      default:\n        value = 'wrap';\n        break;\n    }\n  }\n  return value;\n}\n\n\n\n/**\n * Build the CSS that should be assigned to the element instance\n * BUG:\n *   1) min-height on a column flex container won’t apply to its flex item children in IE 10-11.\n *      Use height instead if possible; height : <xxx>vh;\n *\n *  This way any padding or border specified on the child elements are\n *  laid out and drawn inside that element's specified width and height.\n */\nfunction buildCSS(direction, wrap = null) {\n  return {\n    'display': 'flex',\n    'box-sizing': 'border-box',\n    'flex-direction': direction,\n    'flex-wrap': !!wrap ? wrap : null\n  };\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Optional, SkipSelf} from '@angular/core';\n\nimport {MediaMonitor} from './media-monitor';\nimport {MatchMedia} from './match-media';\nimport {BreakPointRegistry} from './breakpoints/break-point-registry';\n\n/**\n * Ensure a single global service provider\n */\nexport function MEDIA_MONITOR_PROVIDER_FACTORY(parentMonitor: MediaMonitor,\n                                               breakpoints: BreakPointRegistry,\n                                               matchMedia: MatchMedia) {\n  return parentMonitor || new MediaMonitor(breakpoints, matchMedia);\n}\n\n\n/**\n * Export provider that uses a global service factory (above)\n */\nexport const MEDIA_MONITOR_PROVIDER = {\n  provide : MediaMonitor,\n  deps : [\n    [ new Optional(), new SkipSelf(), MediaMonitor ],\n    BreakPointRegistry,\n    MatchMedia,\n  ],\n  useFactory : MEDIA_MONITOR_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\n\nimport {MatchMedia} from './match-media';\nimport {MediaMonitor} from './media-monitor';\nimport {OBSERVABLE_MEDIA_PROVIDER} from './observable-media-provider';\nimport {DEFAULT_BREAKPOINTS_PROVIDER} from './breakpoints/break-points-provider';\nimport {BreakPointRegistry} from './breakpoints/break-point-registry';\n\n/**\n * *****************************************************************\n * Define module for the MediaQuery API\n * *****************************************************************\n */\n\n@NgModule({\n  providers: [\n    DEFAULT_BREAKPOINTS_PROVIDER,  // Supports developer overrides of list of known breakpoints\n    BreakPointRegistry,      // Registry of known/used BreakPoint(s)\n    MatchMedia,              // Low-level service to publish observables w/ window.matchMedia()\n    MediaMonitor,            // MediaQuery monitor service observes all known breakpoints\n    OBSERVABLE_MEDIA_PROVIDER  // easy subscription injectable `media$` matchMedia observable\n  ]\n})\nexport class MediaQueriesModule {\n}\n\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  InjectionToken,    // tslint:disable-line:no-unused-variable\n} from '@angular/core';\n\nimport {BreakPoint} from './break-point';\nimport {BREAKPOINTS} from './break-points-token';\nimport {DEFAULT_BREAKPOINTS} from './data/break-points';\nimport {ORIENTATION_BREAKPOINTS} from './data/orientation-break-points';\n\nimport {extendObject} from '../../utils/object-extend';\nimport {mergeByAlias, validateSuffixes} from '../../utils/breakpoint-tools';\n\n\n/**\n * Options to identify which breakpoint types to include as part of\n * a BreakPoint provider\n */\nexport interface BreakPointProviderOptions {\n  /**\n   * include pre-configured, internal default breakpoints.\n   * @default 'true'\n   */\n  defaults ?: boolean;\n  /**\n   * include pre-configured, internal orientations breakpoints.\n   * @default 'false'\n   */\n  orientations ?: boolean;\n}\n\n/**\n * Add new custom items to the default list or override existing default with custom overrides\n */\nexport function buildMergedBreakPoints(_custom?: BreakPoint[],\n                                       options?: BreakPointProviderOptions) {\n  options = extendObject({ }, {\n        defaults: true,       // exclude pre-configured, internal default breakpoints\n        orientation: false      // exclude pre-configured, internal orientations breakpoints\n  }, options || { });\n\n  return () => {\n    // Order so the defaults are loaded last; so ObservableMedia will report these last!\n    let defaults = options.orientations ? ORIENTATION_BREAKPOINTS.concat(DEFAULT_BREAKPOINTS) :\n        DEFAULT_BREAKPOINTS;\n\n    return options.defaults ? mergeByAlias(defaults, _custom || []) : mergeByAlias(_custom);\n  };\n}\n\n/**\n *  Ensure that only a single global BreakPoint list is instantiated...\n */\nexport function DEFAULT_BREAKPOINTS_PROVIDER_FACTORY() {\n  return validateSuffixes(DEFAULT_BREAKPOINTS);\n}\n/**\n * Default Provider that does not support external customization nor provide\n * the extra extended breakpoints:   \"handset\", \"tablet\", and \"web\"\n *\n *  NOTE: !! breakpoints are considered to have unique 'alias' properties,\n *        custom breakpoints matching existing breakpoints will override the properties\n *        of the existing (and not be added as an extra breakpoint entry).\n *        [xs, gt-xs, sm, gt-sm, md, gt-md, lg, gt-lg, xl]\n */\nexport const DEFAULT_BREAKPOINTS_PROVIDER = { // tslint:disable-line:variable-name\n  provide: BREAKPOINTS,\n  useFactory: DEFAULT_BREAKPOINTS_PROVIDER_FACTORY\n};\n/**\n * Use with FlexLayoutModule.CUSTOM_BREAKPOINTS_PROVIDER_FACTORY!\n */\nexport function CUSTOM_BREAKPOINTS_PROVIDER_FACTORY(_custom?: BreakPoint[],\n                                                    options?: BreakPointProviderOptions) {\n  return {\n    provide: BREAKPOINTS,\n    useFactory: buildMergedBreakPoints(_custom, options)\n  };\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n import {BreakPoint} from '../media-query/breakpoints/break-point';\nimport {extendObject} from './object-extend';\n\nconst ALIAS_DELIMITERS = /(\\.|-|_)/g;\nfunction firstUpperCase(part: string) {\n  let first = part.length > 0 ? part.charAt(0) : '';\n  let remainder = (part.length > 1) ? part.slice(1) : '';\n  return first.toUpperCase() + remainder;\n}\n\n/**\n * Converts snake-case to SnakeCase.\n * @param name Text to UpperCamelCase\n */\nfunction camelCase(name: string): string {\n  return name\n      .replace(ALIAS_DELIMITERS, '|')\n      .split('|')\n      .map(firstUpperCase)\n      .join('');\n}\n\n/**\n * For each breakpoint, ensure that a Suffix is defined;\n * fallback to UpperCamelCase the unique Alias value\n */\nexport function validateSuffixes(list: BreakPoint[]): BreakPoint[] {\n  list.forEach((bp: BreakPoint) => {\n    if (!bp.suffix || bp.suffix === '') {\n      bp.suffix = camelCase(bp.alias);          // create Suffix value based on alias\n      bp.overlapping = bp.overlapping || false; // ensure default value\n    }\n  });\n  return list;\n}\n\n/**\n * Merge a custom breakpoint list with the default list based on unique alias values\n *  - Items are added if the alias is not in the default list\n *  - Items are merged with the custom override if the alias exists in the default list\n */\nexport function mergeByAlias(defaults: BreakPoint[], custom: BreakPoint[] = []): BreakPoint[] {\n  const merged = defaults.map((bp) => extendObject({}, bp));\n  const findByAlias = (alias) => merged.reduce((result, bp) => {\n    return result || (( bp.alias === alias) ? bp : null);\n  }, null);\n\n  // Merge custom breakpoints\n  custom.forEach((bp: BreakPoint) => {\n    let target = findByAlias(bp.alias);\n    if (target) {\n      extendObject(target, bp);\n    } else {\n      merged.push(bp);\n    }\n  });\n\n  return validateSuffixes(merged);\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BreakPoint} from '../break-point';\n\n/* tslint:disable */\nconst HANDSET_PORTRAIT  = '(orientations: portrait) and (max-width: 599px)';\nconst HANDSET_LANDSCAPE = '(orientations: landscape) and (max-width: 959px)';\n\nconst TABLET_LANDSCAPE  = '(orientations: landscape) and (min-width: 960px) and (max-width: 1279px)';\nconst TABLET_PORTRAIT   = '(orientations: portrait) and (min-width: 600px) and (max-width: 839px)';\n\nconst WEB_PORTRAIT      = '(orientations: portrait) and (min-width: 840px)';\nconst WEB_LANDSCAPE     = '(orientations: landscape) and (min-width: 1280px)';\n\nexport const ScreenTypes = {\n  'HANDSET'           : `${HANDSET_PORTRAIT}, ${HANDSET_LANDSCAPE}`,\n  'TABLET'            : `${TABLET_PORTRAIT} , ${TABLET_LANDSCAPE}`,\n  'WEB'               : `${WEB_PORTRAIT}, ${WEB_LANDSCAPE} `,\n\n  'HANDSET_PORTRAIT'  : `${HANDSET_PORTRAIT}`,\n  'TABLET_PORTRAIT'   : `${TABLET_PORTRAIT} `,\n  'WEB_PORTRAIT'      : `${WEB_PORTRAIT}`,\n\n  'HANDSET_LANDSCAPE' : `${HANDSET_LANDSCAPE}]`,\n  'TABLET_LANDSCAPE'  : `${TABLET_LANDSCAPE}`,\n  'WEB_LANDSCAPE'     : `${WEB_LANDSCAPE}`\n};\n\n/**\n * Extended Breakpoints for handset/tablets with landscape or portrait orientations\n */\nexport const ORIENTATION_BREAKPOINTS : BreakPoint[] = [\n  {'alias': 'handset',            'mediaQuery': ScreenTypes.HANDSET},\n  {'alias': 'handset.landscape',  'mediaQuery': ScreenTypes.HANDSET_LANDSCAPE},\n  {'alias': 'handset.portrait',   'mediaQuery': ScreenTypes.HANDSET_PORTRAIT},\n\n  {'alias': 'tablet',             'mediaQuery': ScreenTypes.TABLET},\n  {'alias': 'tablet.landscape',   'mediaQuery': ScreenTypes.TABLET},\n  {'alias': 'tablet.portrait',    'mediaQuery': ScreenTypes.TABLET_PORTRAIT},\n\n  {'alias': 'web',                'mediaQuery': ScreenTypes.WEB, overlapping : true },\n  {'alias': 'web.landscape',      'mediaQuery': ScreenTypes.WEB_LANDSCAPE, overlapping : true },\n  {'alias': 'web.portrait',       'mediaQuery': ScreenTypes.WEB_PORTRAIT, overlapping : true }\n];\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {BreakPoint} from '../break-point';\n\nexport const RESPONSIVE_ALIASES = [\n  'xs', 'gt-xs', 'sm', 'gt-sm', 'md', 'gt-md', 'lg', 'gt-lg', 'xl'\n];\n\nexport const DEFAULT_BREAKPOINTS: BreakPoint[] = [\n  {\n    alias: 'xs',\n    mediaQuery: '(max-width: 599px)'\n  },\n  {\n    alias: 'gt-xs',\n    overlapping: true,\n    mediaQuery: '(min-width: 600px)'\n  },\n  {\n    alias: 'lt-sm',\n    overlapping: true,\n    mediaQuery: '(max-width: 599px)'\n  },\n  {\n    alias: 'sm',\n    mediaQuery: '(min-width: 600px) and (max-width: 959px)'\n  },\n  {\n    alias: 'gt-sm',\n    overlapping: true,\n    mediaQuery: '(min-width: 960px)'\n  },\n  {\n    alias: 'lt-md',\n    overlapping: true,\n    mediaQuery: '(max-width: 959px)'\n  },\n  {\n    alias: 'md',\n    mediaQuery: '(min-width: 960px) and (max-width: 1279px)'\n  },\n  {\n    alias: 'gt-md',\n    overlapping: true,\n    mediaQuery: '(min-width: 1280px)'\n  },\n  {\n    alias: 'lt-lg',\n    overlapping: true,\n    mediaQuery: '(max-width: 1279px)'\n  },\n  {\n    alias: 'lg',\n    mediaQuery: '(min-width: 1280px) and (max-width: 1919px)'\n  },\n  {\n    alias: 'gt-lg',\n    overlapping: true,\n    mediaQuery: '(min-width: 1920px)'\n  },\n  {\n    alias: 'lt-xl',\n    overlapping: true,\n    mediaQuery: '(max-width: 1920px)'\n  },\n  {\n    alias: 'xl',\n    mediaQuery: '(min-width: 1920px) and (max-width: 5000px)'\n  }\n];\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Optional,\n  SkipSelf\n} from '@angular/core';\n\nimport {BreakPointRegistry} from './breakpoints/break-point-registry';\n\nimport {MatchMedia} from './match-media';\nimport {ObservableMedia, MediaService} from './observable-media';\n\n/**\n * Ensure a single global ObservableMedia service provider\n */\nexport function OBSERVABLE_MEDIA_PROVIDER_FACTORY(parentService: ObservableMedia,\n                                                  matchMedia: MatchMedia,\n                                                  breakpoints: BreakPointRegistry) {\n  return parentService || new MediaService(breakpoints, matchMedia);\n}\n/**\n *  Provider to return global service for observable service for all MediaQuery activations\n */\nexport const OBSERVABLE_MEDIA_PROVIDER = { // tslint:disable-line:variable-name\n  provide: ObservableMedia,\n  deps: [\n    [ new Optional(), new SkipSelf(), ObservableMedia ],\n    MatchMedia,\n    BreakPointRegistry\n  ],\n  useFactory: OBSERVABLE_MEDIA_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injectable} from '@angular/core';\n\nimport {Subscription} from 'rxjs/Subscription';\nimport {Observable, Subscribable} from 'rxjs/Observable';\n\nimport {map} from 'rxjs/operator/map';\nimport {filter} from 'rxjs/operator/filter';\n\nimport {BreakPointRegistry} from './breakpoints/break-point-registry';\n\nimport {MediaChange} from './media-change';\nimport {MatchMedia} from './match-media';\nimport {mergeAlias} from './../utils/add-alias';\nimport {BreakPoint} from './breakpoints/break-point';\n\n/**\n * Base class for MediaService and pseudo-token for\n */\nexport abstract class ObservableMedia implements Subscribable<MediaChange> {\n  abstract isActive(query: string): boolean;\n\n  abstract asObservable(): Observable<MediaChange>;\n\n  abstract subscribe(next?: (value: MediaChange) => void,\n                     error?: (error: any) => void,\n                     complete?: () => void): Subscription;\n}\n\n/**\n * Class internalizes a MatchMedia service and exposes an Subscribable and Observable interface.\n\n * This an Observable with that exposes a feature to subscribe to mediaQuery\n * changes and a validator method (`isActive(<alias>)`) to test if a mediaQuery (or alias) is\n * currently active.\n *\n * !! Only mediaChange activations (not de-activations) are announced by the ObservableMedia\n *\n * This class uses the BreakPoint Registry to inject alias information into the raw MediaChange\n * notification. For custom mediaQuery notifications, alias information will not be injected and\n * those fields will be ''.\n *\n * !! This is not an actual Observable. It is a wrapper of an Observable used to publish additional\n * methods like `isActive(<alias>). To access the Observable and use RxJS operators, use\n * `.asObservable()` with syntax like media.asObservable().map(....).\n *\n *  @usage\n *\n *  // RxJS\n *  import 'rxjs/add/operator/filter';\n *  import { ObservableMedia } from '@angular/flex-layout';\n *\n *  @Component({ ... })\n *  export class AppComponent {\n *    status : string = '';\n *\n *    constructor(  media:ObservableMedia ) {\n *      let onChange = (change:MediaChange) => {\n *        this.status = change ? `'${change.mqAlias}' = (${change.mediaQuery})` : '';\n *      };\n *\n *      // Subscribe directly or access observable to use filter/map operators\n *      // e.g.\n *      //      media.subscribe(onChange);\n *\n *      media.asObservable()\n *        .filter((change:MediaChange) => true)   // silly noop filter\n *        .subscribe(onChange);\n *    }\n *  }\n */\n@Injectable()\nexport class MediaService implements ObservableMedia {\n  /**\n   * Should we announce gt-<xxx> breakpoint activations ?\n   */\n  public filterOverlaps = true;\n\n  constructor(private breakpoints: BreakPointRegistry,\n              private mediaWatcher: MatchMedia) {\n    this._registerBreakPoints();\n    this.observable$ = this._buildObservable();\n  }\n\n  /**\n   * Test if specified query/alias is active.\n   */\n  isActive(alias): boolean {\n    let query = this._toMediaQuery(alias);\n    return this.mediaWatcher.isActive(query);\n  }\n\n  /**\n   * Proxy to the Observable subscribe method\n   */\n  subscribe(next?: (value: MediaChange) => void,\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n    return this.observable$.subscribe(next, error, complete);\n  }\n\n  /**\n   * Access to observable for use with operators like\n   * .filter(), .map(), etc.\n   */\n  asObservable(): Observable<MediaChange> {\n    return this.observable$;\n  }\n\n  // ************************************************\n  // Internal Methods\n  // ************************************************\n\n  /**\n   * Register all the mediaQueries registered in the BreakPointRegistry\n   * This is needed so subscribers can be auto-notified of all standard, registered\n   * mediaQuery activations\n   */\n  private _registerBreakPoints() {\n    let queries = this.breakpoints.sortedItems.map(bp => bp.mediaQuery);\n    this.mediaWatcher.registerQuery(queries);\n  }\n\n  /**\n   * Prepare internal observable\n   *\n   * NOTE: the raw MediaChange events [from MatchMedia] do not\n   *       contain important alias information; as such this info\n   *       must be injected into the MediaChange\n   */\n  private _buildObservable() {\n    const self = this;\n    const activationsOnly = (change: MediaChange) => {\n      return change.matches === true;\n    };\n    const addAliasInformation = (change: MediaChange) => {\n      return mergeAlias(change, this._findByQuery(change.mediaQuery));\n    };\n    const excludeOverlaps = (change: MediaChange) => {\n      let bp = this.breakpoints.findByQuery(change.mediaQuery);\n      return !bp ? true : !(self.filterOverlaps && bp.overlapping);\n    };\n\n    /**\n     * Only pass/announce activations (not de-activations)\n     * Inject associated (if any) alias information into the MediaChange event\n     * Exclude mediaQuery activations for overlapping mQs. List bounded mQ ranges only\n     */\n    return filter.call(\n        map.call(\n            filter.call(\n                this.mediaWatcher.observe(),\n                activationsOnly\n            ),\n            addAliasInformation),\n        excludeOverlaps);\n  }\n\n  /**\n   * Breakpoint locator by alias\n   */\n  private _findByAlias(alias) {\n    return this.breakpoints.findByAlias(alias);\n  }\n\n  /**\n   * Breakpoint locator by mediaQuery\n   */\n  private _findByQuery(query) {\n    return this.breakpoints.findByQuery(query);\n  }\n\n  /**\n   * Find associated breakpoint (if any)\n   */\n  private _toMediaQuery(query) {\n    let bp: BreakPoint = this._findByAlias(query) || this._findByQuery(query);\n    return bp ? bp.mediaQuery : query;\n  }\n\n  private observable$: Observable<MediaChange>;\n}\n\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injectable} from '@angular/core';\n\nimport {BreakPoint} from './breakpoints/break-point';\nimport {BreakPointRegistry} from './breakpoints/break-point-registry';\nimport {MatchMedia} from './match-media';\nimport {MediaChange} from './media-change';\n\nimport {mergeAlias} from '../utils/add-alias';\n\nimport {Observable} from 'rxjs/Observable';\nimport {filter} from 'rxjs/operator/filter';\nimport {map} from 'rxjs/operator/map';\n\n/**\n * MediaMonitor uses the MatchMedia service to observe mediaQuery changes (both activations and\n * deactivations). These changes are are published as MediaChange notifications.\n *\n * Note: all notifications will be performed within the\n * ng Zone to trigger change detections and component updates.\n *\n * It is the MediaMonitor that:\n *  - auto registers all known breakpoints\n *  - injects alias information into each raw MediaChange event\n *  - provides accessor to the currently active BreakPoint\n *  - publish list of overlapping BreakPoint(s); used by ResponsiveActivation\n */\n@Injectable()\nexport class MediaMonitor {\n  constructor(private _breakpoints: BreakPointRegistry, private _matchMedia: MatchMedia) {\n    this._registerBreakpoints();\n  }\n\n  /**\n   * Read-only accessor to the list of breakpoints configured in the BreakPointRegistry provider\n   */\n  get breakpoints(): BreakPoint[] {\n    return [...this._breakpoints.items];\n  }\n\n  get activeOverlaps(): BreakPoint[] {\n    let items: BreakPoint[] = this._breakpoints.overlappings.reverse();\n    return items.filter((bp: BreakPoint) => {\n      return this._matchMedia.isActive(bp.mediaQuery);\n    });\n  }\n\n  get active(): BreakPoint {\n    let found = null, items = this.breakpoints.reverse();\n    items.forEach(bp => {\n      if (bp.alias !== '') {\n        if (!found && this._matchMedia.isActive(bp.mediaQuery)) {\n          found = bp;\n        }\n      }\n    });\n\n    let first = this.breakpoints[0];\n    return found || (this._matchMedia.isActive(first.mediaQuery) ? first : null);\n  }\n\n  /**\n   * For the specified mediaQuery alias, is the mediaQuery range active?\n   */\n  isActive(alias: string): boolean {\n    let bp = this._breakpoints.findByAlias(alias) || this._breakpoints.findByQuery(alias);\n    return this._matchMedia.isActive(bp ? bp.mediaQuery : alias);\n  }\n\n  /**\n   * External observers can watch for all (or a specific) mql changes.\n   * If specific breakpoint is observed, only return *activated* events\n   * otherwise return all events for BOTH activated + deactivated changes.\n   */\n  observe(alias?: string): Observable<MediaChange> {\n    let bp = this._breakpoints.findByAlias(alias) || this._breakpoints.findByQuery(alias);\n    let hasAlias = (change: MediaChange) => (bp ? change.mqAlias !== '' : true);\n    // Note: the raw MediaChange events [from MatchMedia] do not contain important alias information\n\n    let media$ = this._matchMedia.observe(bp ? bp.mediaQuery : alias);\n    return filter.call(map.call(media$, change => mergeAlias(change, bp)), hasAlias);\n  }\n\n  /**\n   * Immediate calls to matchMedia() to establish listeners\n   * and prepare for immediate subscription notifications\n   */\n  private _registerBreakpoints() {\n    let queries = this._breakpoints.sortedItems.map(bp => bp.mediaQuery);\n    this._matchMedia.registerQuery(queries);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {MediaChange} from '../media-query/media-change';\nimport {BreakPoint} from '../media-query/breakpoints/break-point';\nimport {extendObject} from './object-extend';\n\n/**\n * For the specified MediaChange, make sure it contains the breakpoint alias\n * and suffix (if available).\n */\nexport function mergeAlias(dest: MediaChange, source: BreakPoint) {\n  return extendObject(dest, source ? {\n        mqAlias: source.alias,\n        suffix: source.suffix\n      } : {});\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Extends an object with the *enumerable* and *own* properties of one or more source objects,\n * similar to Object.assign.\n *\n * @param dest The object which will have properties copied to it.\n * @param sources The source objects from which properties will be copied.\n */\nexport function extendObject(dest: any, ...sources: any[]): any {\n  if (dest == null) {\n    throw TypeError('Cannot convert undefined or null to object');\n  }\n\n  for (let source of sources) {\n    if (source != null) {\n      for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n          dest[key] = source[key];\n        }\n      }\n    }\n  }\n\n  return dest;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injectable, Inject} from '@angular/core';\n\nimport {BreakPoint} from './break-point';\nimport {BREAKPOINTS} from './break-points-token';\n\n\n/**\n * Registry of 1..n MediaQuery breakpoint ranges\n * This is published as a provider and may be overriden from custom, application-specific ranges\n *\n */\n@Injectable()\nexport class BreakPointRegistry {\n\n  constructor(@Inject(BREAKPOINTS) private _registry: BreakPoint[ ]) {\n  }\n\n  /**\n   * Accessor to raw list\n   */\n  get items(): BreakPoint[ ] {\n    return [...this._registry];\n  }\n\n  /**\n   * Accessor to sorted list used for registration with matchMedia API\n   *\n   * NOTE: During breakpoint registration, we want to register the overlaps FIRST\n   *       so the non-overlaps will trigger the MatchMedia:BehaviorSubject last!\n   *       And the largest, non-overlap, matching breakpoint should be the lastReplay value\n   */\n  get sortedItems(): BreakPoint[] {\n    let overlaps = this._registry.filter(it => it.overlapping === true);\n    let nonOverlaps = this._registry.filter(it => it.overlapping !== true);\n\n    return [...overlaps, ...nonOverlaps];\n  }\n\n  /**\n   * Search breakpoints by alias (e.g. gt-xs)\n   */\n  findByAlias(alias: string): BreakPoint {\n    return this._registry.find(bp => bp.alias == alias);\n  }\n\n  findByQuery(query: string): BreakPoint {\n    return this._registry.find(bp => bp.mediaQuery == query);\n  }\n\n  /**\n   * Get all the breakpoints whose ranges could overlapping `normal` ranges;\n   * e.g. gt-sm overlaps md, lg, and xl\n   */\n  get overlappings(): BreakPoint[] {\n    return this._registry.filter(it => it.overlapping == true);\n  }\n\n  /**\n   * Get list of all registered (non-empty) breakpoint aliases\n   */\n  get aliases(): string[] {\n    return this._registry.map(it => it.alias);\n  }\n\n  /**\n   * Aliases are mapped to properties using suffixes\n   * e.g.  'gt-sm' for property 'layout'  uses suffix 'GtSm'\n   * for property layoutGtSM.\n   */\n  get suffixes(): string[] {\n    return this._registry.map(it => it.suffix);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// @TODO - remove after updating to TS v2.4\n// tslint:disable:no-unused-variable\nimport {InjectionToken} from '@angular/core';\nimport {BreakPoint} from './break-point';\n\n/**\n *  Injection token unique to the flex-layout library.\n *  Use this token when build a custom provider (see below).\n */\nexport const BREAKPOINTS =\n    new InjectionToken<BreakPoint[]>('Token (@angular/flex-layout) Breakpoints');\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Inject, Injectable, NgZone} from '@angular/core';\nimport {ɵgetDOM as getDom, DOCUMENT} from '@angular/platform-browser';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {Observable} from 'rxjs/Observable';\nimport {filter} from 'rxjs/operator/filter';\n\nimport {MediaChange} from './media-change';\n\n/**\n * EventHandler callback with the mediaQuery [range] activates or deactivates\n */\nexport interface MediaQueryListListener {\n  // Function with Window's MediaQueryList argument\n  (mql: MediaQueryList): void;\n}\n\n/**\n * EventDispatcher for a specific mediaQuery [range]\n */\nexport interface MediaQueryList {\n  readonly matches: boolean;\n  readonly media: string;\n\n  addListener(listener: MediaQueryListListener): void;\n\n  removeListener(listener: MediaQueryListListener): void;\n}\n\n\n/**\n * MediaMonitor configures listeners to mediaQuery changes and publishes an Observable facade to\n * convert mediaQuery change callbacks to subscriber notifications. These notifications will be\n * performed within the ng Zone to trigger change detections and component updates.\n *\n * NOTE: both mediaQuery activations and de-activations are announced in notifications\n */\n@Injectable()\nexport class MatchMedia {\n  protected _registry: Map<string, MediaQueryList>;\n  protected _source: BehaviorSubject<MediaChange>;\n  protected _observable$: Observable<MediaChange>;\n\n  constructor(protected _zone: NgZone, @Inject(DOCUMENT) protected _document: any) {\n    this._registry = new Map<string, MediaQueryList>();\n    this._source = new BehaviorSubject<MediaChange>(new MediaChange(true));\n    this._observable$ = this._source.asObservable();\n  }\n\n  /**\n   * For the specified mediaQuery?\n   */\n  isActive(mediaQuery: string): boolean {\n    if (this._registry.has(mediaQuery)) {\n      let mql = this._registry.get(mediaQuery);\n      return mql.matches;\n    }\n    return false;\n  }\n\n  /**\n   * External observers can watch for all (or a specific) mql changes.\n   * Typically used by the MediaQueryAdaptor; optionally available to components\n   * who wish to use the MediaMonitor as mediaMonitor$ observable service.\n   *\n   * NOTE: if a mediaQuery is not specified, then ALL mediaQuery activations will\n   *       be announced.\n   */\n  observe(mediaQuery?: string): Observable<MediaChange> {\n    this.registerQuery(mediaQuery);\n\n    return filter.call(this._observable$, (change: MediaChange) => {\n      return mediaQuery ? (change.mediaQuery === mediaQuery) : true;\n    });\n  }\n\n  /**\n   * Based on the BreakPointRegistry provider, register internal listeners for each unique\n   * mediaQuery. Each listener emits specific MediaChange data to observers\n   */\n  registerQuery(mediaQuery: string | string[]) {\n    let list = normalizeQuery(mediaQuery);\n\n    if (list.length > 0) {\n      prepareQueryCSS(list, this._document);\n\n      list.forEach(query => {\n        let mql = this._registry.get(query);\n        let onMQLEvent = (e: MediaQueryList) => {\n          this._zone.run(() => {\n            let change = new MediaChange(e.matches, query);\n            this._source.next(change);\n          });\n        };\n\n        if (!mql) {\n          mql = this._buildMQL(query);\n          mql.addListener(onMQLEvent);\n          this._registry.set(query, mql);\n        }\n\n        if (mql.matches) {\n          onMQLEvent(mql);  // Announce activate range for initial subscribers\n        }\n      });\n    }\n  }\n\n  /**\n   * Call window.matchMedia() to build a MediaQueryList; which\n   * supports 0..n listeners for activation/deactivation\n   */\n  protected _buildMQL(query: string): MediaQueryList {\n    let canListen = isBrowser() && !!(<any>window).matchMedia('all').addListener;\n\n    return canListen ? (<any>window).matchMedia(query) : <MediaQueryList>{\n      matches: query === 'all' || query === '',\n      media: query,\n      addListener: () => {\n      },\n      removeListener: () => {\n      }\n    };\n  }\n}\n\n/**\n * Determine if SSR or Browser rendering.\n */\nexport function isBrowser() {\n  return getDom().supportsDOMEvents();\n}\n\n/**\n * Private global registry for all dynamically-created, injected style tags\n * @see prepare(query)\n */\nconst ALL_STYLES = {};\n\n/**\n * For Webkit engines that only trigger the MediaQueryList Listener\n * when there is at least one CSS selector for the respective media query.\n *\n * @param query string The mediaQuery used to create a faux CSS selector\n *\n */\nfunction prepareQueryCSS(mediaQueries: string[], _document: any) {\n  let list = mediaQueries.filter(it => !ALL_STYLES[it]);\n  if (list.length > 0) {\n    let query = list.join(', ');\n\n    try {\n      let styleEl = getDom().createElement('style');\n\n      getDom().setAttribute(styleEl, 'type', 'text/css');\n      if (!styleEl['styleSheet']) {\n        let cssText = `/*\n  @angular/flex-layout - workaround for possible browser quirk with mediaQuery listeners\n  see http://bit.ly/2sd4HMP\n*/\n@media ${query} {.fx-query-test{ }}`;\n        getDom().appendChild(styleEl, getDom().createTextNode(cssText));\n      }\n\n      getDom().appendChild(_document.head, styleEl);\n\n      // Store in private global registry\n      list.forEach(mq => ALL_STYLES[mq] = styleEl);\n\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\n\n/**\n * Always convert to unique list of queries; for iteration in ::registerQuery()\n */\nfunction normalizeQuery(mediaQuery: string | string[]): string[] {\n  return (typeof mediaQuery === 'undefined') ? [] :\n      (typeof mediaQuery === 'string') ? [mediaQuery] : unique(mediaQuery as string[]);\n}\n\n/**\n * Filter duplicate mediaQueries in the list\n */\nfunction unique(list: string[]): string[] {\n  let seen = {};\n  return list.filter(item => {\n    return seen.hasOwnProperty(item) ? false : (seen[item] = true);\n  });\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport type MediaQuerySubscriber = (changes: MediaChange) => void;\n\n/**\n * Class instances emitted [to observers] for each mql notification\n */\nexport class MediaChange {\n  property: string;\n  value: any;\n\n  constructor(public matches = false,       // Is the mq currently activated\n              public mediaQuery = 'all',    // e.g.   (min-width: 600px) and (max-width: 959px)\n              public mqAlias = '',          // e.g.   gt-sm, md, gt-lg\n              public suffix = ''            // e.g.   GtSM, Md, GtLg\n  ) { }\n\n  clone() {\n    return new MediaChange(this.matches, this.mediaQuery, this.mqAlias, this.suffix);\n  }\n}\n\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Version} from '@angular/core';\n/**\n * Current version of Angular Material.\n */\nexport const VERSION = new Version('2.0.0-beta.11');\n","import { SecurityService } from '@savantly/ngx-security';\nimport { Component, OnInit, Input, ViewChildren, QueryList } from '@angular/core';\nimport { MenuService, Menu, IMenu } from './menu.service';\nimport { MdMenuTrigger } from '@angular/material';\nimport { Observable } from 'rxjs/Observable';\nexport class MenuComponent implements OnInit {\n   items: any[];\n  menuService: MenuService;\n  security: SecurityService;\n  menus: Observable<Menu[]>;\n\n   triggers: QueryList<MdMenuTrigger>;\n/**\n * @param {?} trigger\n * @param {?} level\n * @return {?}\n */\nopenMenu(trigger: MdMenuTrigger, level: number) {\n    this.triggers\n      .filter((x: any) => x._element.nativeElement.dataset.level >= level && x !== trigger)\n      .forEach(x => x.closeMenu());\n    trigger.openMenu();\n  }\n/**\n * @return {?}\n */\ncloseMenu() {\n    this.triggers.forEach(x => x.closeMenu());\n  }\n/**\n * @param {?} subitem\n * @param {?} $event\n * @return {?}\n */\ndoMenuItemCallback(subitem: IMenu, $event: any) {\n    if (subitem.callback) {\n      subitem.callback($event);\n    } else {\n      console.warn('no callback defined');\n    }\n  };\n/**\n * @param {?} securityService\n * @param {?} menuService\n */\nconstructor(\n    securityService: SecurityService,\n    menuService: MenuService) {\n    this.menuService = menuService;\n    this.security = securityService;\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'sv-menu',\n  template: `\n    <ng-container *ngFor=\"let item of menuService.getMenus() | async\">\n    \t<ng-container *ngIf=\"menuService.shouldRender(item)\">\n    \t\t<button md-button [mdMenuTriggerFor]=\"menu\" #trigger=\"mdMenuTrigger\" [attr.data-level]=\"1\" (click)=\"openMenu(trigger, 1)\" (mouseexit)=\"$event.stopPropagation()\">\n    \t\t\t{{item.text}}\n    \t\t</button>\n    \t\t<md-menu class=\"custom-menu\" #menu=\"mdMenu\" [overlapTrigger]=\"false\" (close)=\"closeMenu()\" xPosition=\"after\">\n    \t\t\t<ng-container *ngTemplateOutlet=\"subMenu; context: { $implicit: item.items, level: 2 }\"></ng-container>\n    \t\t</md-menu>\n    \t</ng-container>\n    </ng-container>\n\n    <ng-template #subMenu let-items let-level=\"level\">\n      <ng-container *ngFor=\"let item of items\">\n        <ng-container *ngIf=\"item.items && item.items.length else simpleTmpl\">\n          <button *ngIf=\"!item.divider\" md-menu-item [disabled]=\"item.disabled\"\n                  [mdMenuTriggerFor]=\"menu\"\n                  #trigger=\"mdMenuTrigger\"\n                  [attr.data-level]=\"level\"\n                  (mouseenter)=\"openMenu(trigger, level);\" (click)=\"$event.stopPropagation()\">\n            <span>{{item.text}}</span>\n            <span *ngIf=\"item.extraText\">{{item.extraText}}</span>\n            <md-icon *ngIf=\"item.icon\">{{item.icon}}</md-icon>\n          </button>\n          <md-menu class=\"sub-menu\" #menu=\"mdMenu\" [overlapTrigger]=\"false\" xPosition=\"before\" >\n            <ng-container *ngTemplateOutlet=\"subMenu; context: { $implicit: item.items || [], level: level + 1 }\"></ng-container>\n          </md-menu>\n          <md-divider *ngIf=\"item.divider\" class=\"mat-divider\"></md-divider>\n        </ng-container>\n        <ng-template #simpleTmpl>\n          <button *ngIf=\"!item.divider\" md-menu-item [disabled]=\"item.disabled\" (click)=\"doMenuItemCallback(item, $event)\">\n            <span>{{item.text}}</span>\n            <span *ngIf=\"item.extraText\">{{item.extraText}}</span>\n          </button>\n          <md-divider *ngIf=\"item.divider\" class=\"mat-divider\"></md-divider>\n        </ng-template>\n      </ng-container>\n    </ng-template>\n  `,\n  styles: [`\n\n  `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: SecurityService, },\n{type: MenuService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'items': [{ type: Input },],\n'triggers': [{ type: ViewChildren, args: [MdMenuTrigger, ] },],\n};\n}\n\nfunction MenuComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nMenuComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMenuComponent.ctorParameters;\n/** @type {?} */\nMenuComponent.propDecorators;\n/** @type {?} */\nMenuComponent.prototype.items;\n/** @type {?} */\nMenuComponent.prototype.menuService;\n/** @type {?} */\nMenuComponent.prototype.security;\n/** @type {?} */\nMenuComponent.prototype.menus;\n/** @type {?} */\nMenuComponent.prototype.triggers;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdToolbarModule,MdToolbarRow,MdToolbarBase,_MdToolbarMixinBase,MdToolbar,MatToolbar,MatToolbarBase,MatToolbarModule,MatToolbarRow} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdCommonModule} from '@angular/material/core';\nimport {MdToolbar, MdToolbarRow} from './toolbar';\nexport class MdToolbarModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule],\n  exports: [MdToolbar, MdToolbarRow, MdCommonModule],\n  declarations: [MdToolbar, MdToolbarRow],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdToolbarModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbarModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdToolbarModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  Directive,\n  ElementRef,\n  Renderer2,\n} from '@angular/core';\nimport {CanColor, MATERIAL_COMPATIBILITY_MODE, mixinColor} from '@angular/material/core';\nexport class MdToolbarRow {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-toolbar-row, mat-toolbar-row',\n  host: {'class': 'mat-toolbar-row'},\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdToolbarRow_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbarRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdToolbarRow.ctorParameters;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdToolbarBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdToolbarBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbarBase.prototype._renderer;\n/** @type {?} */\nMdToolbarBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdToolbarMixinBase = mixinColor(MdToolbarBase);\nexport class MdToolbar extends _MdToolbarMixinBase implements CanColor {\n/**\n * @param {?} renderer\n * @param {?} elementRef\n */\nconstructor(renderer: Renderer2, elementRef: ElementRef) {\n    super(renderer, elementRef);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-toolbar, mat-toolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    'role': 'toolbar'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\n}\n\nfunction MdToolbar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdToolbar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdToolbar.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MdCommonModule, MdRippleModule} from '@angular/material/core';\nimport {MdInkBar} from './ink-bar';\nimport {MdTab} from './tab';\nimport {MdTabBody} from './tab-body';\nimport {MdTabGroup} from './tab-group';\nimport {MdTabHeader} from './tab-header';\nimport {MdTabLabel} from './tab-label';\nimport {MdTabLabelWrapper} from './tab-label-wrapper';\nimport {MdTabLink, MdTabNav} from './tab-nav-bar/tab-nav-bar';\nexport class MdTabsModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    MdCommonModule,\n    PortalModule,\n    MdRippleModule,\n    ObserversModule,\n    ScrollDispatchModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MdCommonModule,\n    MdTabGroup,\n    MdTabLabel,\n    MdTab,\n    MdTabNav,\n    MdTabLink,\n  ],\n  declarations: [\n    MdTabGroup,\n    MdTabLabel,\n    MdTab,\n    MdInkBar,\n    MdTabLabelWrapper,\n    MdTabNav,\n    MdTabLink,\n    MdTabBody,\n    MdTabHeader\n  ],\n  providers: [VIEWPORT_RULER_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdTabsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabsModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {auditTime, takeUntil} from '@angular/cdk/rxjs';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  Renderer2,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple, MATERIAL_COMPATIBILITY_MODE,\n  MD_RIPPLE_GLOBAL_OPTIONS,\n  MdRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleGlobalOptions,\n  ThemePalette,\n} from '@angular/material/core';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subject} from 'rxjs/Subject';\nimport {MdInkBar} from '../ink-bar';\n/**\n * \\@docs-private\n */\nexport class MdTabNavBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdTabNavBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabNavBase.prototype._renderer;\n/** @type {?} */\nMdTabNavBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdTabNavMixinBase = mixinDisableRipple(mixinColor(MdTabNavBase, 'primary'));\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\nexport class MdTabNav extends _MdTabNavMixinBase implements AfterContentInit, CanColor,\n    CanDisableRipple, OnDestroy {\n/**\n * Subject that emits when the component has been destroyed.\n */\nprivate _onDestroy = new Subject<void>();\n\n  _activeLinkChanged: boolean;\n  _activeLinkElement: ElementRef;\n\n   _inkBar: MdInkBar;\n/**\n * Query list of all tab links of the tab navigation.\n */\n_tabLinks: QueryList<MdTabLink>;\n/**\n * Background color of the tab nav.\n * @return {?}\n */\nget backgroundColor(): ThemePalette { return this._backgroundColor; }\n/**\n * @param {?} value\n * @return {?}\n */\nset backgroundColor(value: ThemePalette) {\n    let /** @type {?} */ nativeElement = this._elementRef.nativeElement;\n\n    this._renderer.removeClass(nativeElement, `mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      this._renderer.addClass(nativeElement, `mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\nprivate _backgroundColor: ThemePalette;\n/**\n * Whether ripples should be disabled for all links or not.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) {\n    this._disableRipple = coerceBooleanProperty(value);\n    this._setLinkDisableRipple();\n  }\nprivate _disableRipple: boolean = false;\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _dir\n * @param {?} _ngZone\n * @param {?} _changeDetectorRef\n */\nconstructor(renderer: Renderer2,\n              elementRef: ElementRef,\nprivate _dir: Directionality,\nprivate _ngZone: NgZone,\nprivate _changeDetectorRef: ChangeDetectorRef) {\n    super(renderer, elementRef);\n  }\n/**\n * Notifies the component that the active link has been changed.\n * @param {?} element\n * @return {?}\n */\nupdateActiveLink(element: ElementRef) {\n    this._activeLinkChanged = this._activeLinkElement != element;\n    this._activeLinkElement = element;\n\n    if (this._activeLinkChanged) {\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      let /** @type {?} */ dirChange = this._dir ? this._dir.change : observableOf(null);\n      let /** @type {?} */ resize = typeof window !== 'undefined' ?\n          auditTime.call(fromEvent(window, 'resize'), 10) :\n          observableOf(null);\n\n      return takeUntil.call(merge(dirChange, resize), this._onDestroy).subscribe(() => {\n        this._alignInkBar();\n      });\n    });\n\n    this._setLinkDisableRipple();\n  }\n/**\n * Checks if the active link has been changed and, if so, will update the ink bar.\n * @return {?}\n */\nngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n/**\n * Aligns the ink bar to the active link.\n * @return {?}\n */\n_alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    }\n  }\n/**\n * Sets the `disableRipple` property on each link of the navigation bar.\n * @return {?}\n */\nprivate _setLinkDisableRipple() {\n    if (this._tabLinks) {\n      this._tabLinks.forEach(link => link.disableRipple = this.disableRipple);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: '[md-tab-nav-bar], [mat-tab-nav-bar]',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: NgZone, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_inkBar': [{ type: ViewChild, args: [MdInkBar, ] },],\n'_tabLinks': [{ type: ContentChildren, args: [forwardRef(() => MdTabLink), {descendants: true}, ] },],\n'backgroundColor': [{ type: Input },],\n};\n}\n\nfunction MdTabNav_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabNav.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabNav.ctorParameters;\n/** @type {?} */\nMdTabNav.propDecorators;\n/**\n * Subject that emits when the component has been destroyed.\n * @type {?}\n */\nMdTabNav.prototype._onDestroy;\n/** @type {?} */\nMdTabNav.prototype._activeLinkChanged;\n/** @type {?} */\nMdTabNav.prototype._activeLinkElement;\n/** @type {?} */\nMdTabNav.prototype._inkBar;\n/**\n * Query list of all tab links of the tab navigation.\n * @type {?}\n */\nMdTabNav.prototype._tabLinks;\n/** @type {?} */\nMdTabNav.prototype._backgroundColor;\n/** @type {?} */\nMdTabNav.prototype._disableRipple;\n/** @type {?} */\nMdTabNav.prototype._dir;\n/** @type {?} */\nMdTabNav.prototype._ngZone;\n/** @type {?} */\nMdTabNav.prototype._changeDetectorRef;\n}\n\nexport class MdTabLinkBase {}\nexport const /** @type {?} */ _MdTabLinkMixinBase = mixinDisabled(MdTabLinkBase);\n/**\n * Link inside of a `md-tab-nav-bar`.\n */\nexport class MdTabLink extends _MdTabLinkMixinBase implements OnDestroy, CanDisable {\n/**\n * Whether the tab link is active or not.\n */\nprivate _isActive: boolean = false;\n/**\n * Whether the ripples for this tab should be disabled or not.\n */\nprivate _disableRipple: boolean = false;\n/**\n * Reference to the instance of the ripple for the tab link.\n */\nprivate _tabLinkRipple: MdRipple;\n/**\n * Whether the link is active.\n * @return {?}\n */\nget active(): boolean { return this._isActive; }\n/**\n * @param {?} value\n * @return {?}\n */\nset active(value: boolean) {\n    this._isActive = value;\n    if (value) {\n      this._mdTabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n/**\n * Whether ripples should be disabled or not.\n * @return {?}\n */\nget disableRipple(): boolean { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) {\n    this._disableRipple = value;\n    this._tabLinkRipple.disabled = this.disableRipple;\n    this._tabLinkRipple._updateRippleRenderer();\n  }\n/**\n * \\@docs-private\n * @return {?}\n */\nget tabIndex(): number {\n    return this.disabled ? -1 : 0;\n  }\n/**\n * @param {?} _mdTabNavBar\n * @param {?} _elementRef\n * @param {?} ngZone\n * @param {?} ruler\n * @param {?} platform\n * @param {?} globalOptions\n */\nconstructor(private _mdTabNavBar: MdTabNav,\nprivate _elementRef: ElementRef,\n              ngZone: NgZone,\n              ruler: ViewportRuler,\n              platform: Platform,\n                globalOptions: RippleGlobalOptions) {\n    super();\n\n    // Manually create a ripple instance that uses the tab link element as trigger element.\n    // Notice that the lifecycle hooks for the ripple config won't be called anymore.\n    this._tabLinkRipple = new MdRipple(_elementRef, ngZone, ruler, platform, globalOptions);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    // Manually call the ngOnDestroy lifecycle hook of the ripple instance because it won't be\n    // called automatically since its instance is not created by Angular.\n    this._tabLinkRipple.ngOnDestroy();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-tab-link], [mat-tab-link], [mdTabLink], [matTabLink]',\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabindex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdTabNav, },\n{type: ElementRef, },\n{type: NgZone, },\n{type: ViewportRuler, },\n{type: Platform, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_RIPPLE_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'active': [{ type: Input },],\n};\n}\n\nfunction MdTabLink_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabLink.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabLink.ctorParameters;\n/** @type {?} */\nMdTabLink.propDecorators;\n/**\n * Whether the tab link is active or not.\n * @type {?}\n */\nMdTabLink.prototype._isActive;\n/**\n * Whether the ripples for this tab should be disabled or not.\n * @type {?}\n */\nMdTabLink.prototype._disableRipple;\n/**\n * Reference to the instance of the ripple for the tab link.\n * @type {?}\n */\nMdTabLink.prototype._tabLinkRipple;\n/** @type {?} */\nMdTabLink.prototype._mdTabNavBar;\n/** @type {?} */\nMdTabLink.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ENTER, LEFT_ARROW, RIGHT_ARROW, SPACE} from '@angular/cdk/keycodes';\nimport {auditTime, startWith} from '@angular/cdk/rxjs';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  Renderer2,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple, MATERIAL_COMPATIBILITY_MODE,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MdInkBar} from './ink-bar';\nimport {MdTabLabelWrapper} from './tab-label-wrapper';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n/**\n * \\@docs-private\n */\nexport class MdTabHeaderBase {}\nexport const /** @type {?} */ _MdTabHeaderMixinBase = mixinDisableRipple(MdTabHeaderBase);\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * \\@docs-private\n */\nexport class MdTabHeader extends _MdTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n   _labelWrappers: QueryList<MdTabLabelWrapper>;\n   _inkBar: MdInkBar;\n   _tabListContainer: ElementRef;\n   _tabList: ElementRef;\n/**\n * The tab index that is focused.\n */\nprivate _focusIndex: number = 0;\n/**\n * The distance in pixels that the tab labels should be translated to the left.\n */\nprivate _scrollDistance = 0;\n/**\n * Whether the header should scroll to the selected index after the view has been checked.\n */\nprivate _selectedIndexChanged = false;\n/**\n * Combines listeners that will re-align the ink bar whenever they're invoked.\n */\nprivate _realignInkBar = Subscription.EMPTY;\n/**\n * Whether the controls for pagination should be displayed\n */\n_showPaginationControls = false;\n/**\n * Whether the tab list can be scrolled more towards the end of the tab label list.\n */\n_disableScrollAfter = true;\n/**\n * Whether the tab list can be scrolled more towards the beginning of the tab label list.\n */\n_disableScrollBefore = true;\n/**\n * The number of tab labels that are displayed on the header. When this changes, the header\n * should re-evaluate the scroll position.\n */\nprivate _tabLabelCount: number;\n/**\n * Whether the scroll distance has changed and should be applied after the view is checked.\n */\nprivate _scrollDistanceChanged: boolean;\nprivate _selectedIndex: number = 0;\n/**\n * The index of the active tab.\n * @return {?}\n */\nget selectedIndex(): number { return this._selectedIndex; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selectedIndex(value: number) {\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n/**\n * Event emitted when the option is selected.\n */\nselectFocusedIndex = new EventEmitter();\n/**\n * Event emitted when a label is focused.\n */\nindexFocused = new EventEmitter();\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _changeDetectorRef\n * @param {?} _dir\n */\nconstructor(private _elementRef: ElementRef,\nprivate _renderer: Renderer2,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _dir: Directionality) {\n    super();\n  }\n/**\n * @return {?}\n */\nngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n    }\n  }\n/**\n * Aligns the ink bar to the selected tab on load.\n * @return {?}\n */\nngAfterContentInit() {\n    const /** @type {?} */ dirChange = this._dir ? this._dir.change : observableOf(null);\n    const /** @type {?} */ resize = typeof window !== 'undefined' ?\n        auditTime.call(fromEvent(window, 'resize'), 150) :\n        observableOf(null);\n\n    this._realignInkBar = startWith.call(merge(dirChange, resize), null).subscribe(() => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n/**\n * Callback for when the MutationObserver detects that the content has changed.\n * @return {?}\n */\n_onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Updating the view whether pagination should be enabled or not\n * @return {?}\n */\n_updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n/**\n * When the focus index is set, we must manually send focus to the correct label\n * @param {?} value\n * @return {?}\n */\nset focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n/**\n * Tracks which element has focus; used for keyboard navigation\n * @return {?}\n */\nget focusIndex(): number { return this._focusIndex; }\n/**\n * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n * providing a valid index and return true.\n * @param {?} index\n * @return {?}\n */\n_isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const /** @type {?} */ tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n/**\n * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n * scrolling is enabled.\n * @param {?} tabIndex\n * @return {?}\n */\n_setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const /** @type {?} */ containerEl = this._tabListContainer.nativeElement;\n      const /** @type {?} */ dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n/**\n * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n * Valid offsets are 1 and -1.\n * @param {?} offset\n * @return {?}\n */\n_moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const /** @type {?} */ tabs: MdTabLabelWrapper[] = this._labelWrappers.toArray();\n\n      for (let /** @type {?} */ i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n/**\n * Increment the focus index by 1 until a valid tab is found.\n * @return {?}\n */\n_focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n/**\n * Decrement the focus index by 1 until a valid tab is found.\n * @return {?}\n */\n_focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n/**\n * The layout direction of the containing app.\n * @return {?}\n */\n_getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n/**\n * Performs the CSS transformation on the tab list that will cause the list to scroll.\n * @return {?}\n */\n_updateTabScrollPosition() {\n    const /** @type {?} */ scrollDistance = this.scrollDistance;\n    const /** @type {?} */ translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._renderer.setStyle(this._tabList.nativeElement, 'transform',\n        `translate3d(${translateX}px, 0, 0)`);\n  }\n/**\n * Sets the distance in pixels that the tab header should be transformed in the X-axis.\n * @param {?} v\n * @return {?}\n */\nset scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n/**\n * @return {?}\n */\nget scrollDistance(): number { return this._scrollDistance; }\n/**\n * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n * the end of the list, respectively). The distance to scroll is computed to be a third of the\n * length of the tab list view window.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @param {?} scrollDir\n * @return {?}\n */\n_scrollHeader(scrollDir: ScrollDirection) {\n    const /** @type {?} */ viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n/**\n * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @param {?} labelIndex\n * @return {?}\n */\n_scrollToLabel(labelIndex: number) {\n    const /** @type {?} */ selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const /** @type {?} */ viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let /** @type {?} */ labelBeforePos: number, /** @type {?} */ labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const /** @type {?} */ beforeVisiblePos = this.scrollDistance;\n    const /** @type {?} */ afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n/**\n * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n * tab list is wider than the size of the header container, then the pagination controls should\n * be shown.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @return {?}\n */\n_checkPaginationEnabled() {\n    const /** @type {?} */ isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n/**\n * Evaluate whether the before and after controls should be enabled or disabled.\n * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n * before button. If the header is at the end of the list (scroll distance is equal to the\n * maximum distance we can scroll), then disable the after button.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @return {?}\n */\n_checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n * is equal to the difference in width between the tab list container and tab header container.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @return {?}\n */\n_getMaxScrollDistance(): number {\n    const /** @type {?} */ lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const /** @type {?} */ viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n/**\n * Tells the ink-bar to align itself to the current label wrapper\n * @return {?}\n */\nprivate _alignInkBarToSelectedTab(): void {\n    const /** @type {?} */ selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tab-header, mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ChangeDetectorRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_labelWrappers': [{ type: ContentChildren, args: [MdTabLabelWrapper, ] },],\n'_inkBar': [{ type: ViewChild, args: [MdInkBar, ] },],\n'_tabListContainer': [{ type: ViewChild, args: ['tabListContainer', ] },],\n'_tabList': [{ type: ViewChild, args: ['tabList', ] },],\n'selectedIndex': [{ type: Input },],\n'selectFocusedIndex': [{ type: Output },],\n'indexFocused': [{ type: Output },],\n};\n}\n\nfunction MdTabHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabHeader.ctorParameters;\n/** @type {?} */\nMdTabHeader.propDecorators;\n/** @type {?} */\nMdTabHeader.prototype._labelWrappers;\n/** @type {?} */\nMdTabHeader.prototype._inkBar;\n/** @type {?} */\nMdTabHeader.prototype._tabListContainer;\n/** @type {?} */\nMdTabHeader.prototype._tabList;\n/**\n * The tab index that is focused.\n * @type {?}\n */\nMdTabHeader.prototype._focusIndex;\n/**\n * The distance in pixels that the tab labels should be translated to the left.\n * @type {?}\n */\nMdTabHeader.prototype._scrollDistance;\n/**\n * Whether the header should scroll to the selected index after the view has been checked.\n * @type {?}\n */\nMdTabHeader.prototype._selectedIndexChanged;\n/**\n * Combines listeners that will re-align the ink bar whenever they're invoked.\n * @type {?}\n */\nMdTabHeader.prototype._realignInkBar;\n/**\n * Whether the controls for pagination should be displayed\n * @type {?}\n */\nMdTabHeader.prototype._showPaginationControls;\n/**\n * Whether the tab list can be scrolled more towards the end of the tab label list.\n * @type {?}\n */\nMdTabHeader.prototype._disableScrollAfter;\n/**\n * Whether the tab list can be scrolled more towards the beginning of the tab label list.\n * @type {?}\n */\nMdTabHeader.prototype._disableScrollBefore;\n/**\n * The number of tab labels that are displayed on the header. When this changes, the header\n * should re-evaluate the scroll position.\n * @type {?}\n */\nMdTabHeader.prototype._tabLabelCount;\n/**\n * Whether the scroll distance has changed and should be applied after the view is checked.\n * @type {?}\n */\nMdTabHeader.prototype._scrollDistanceChanged;\n/** @type {?} */\nMdTabHeader.prototype._selectedIndex;\n/**\n * Event emitted when the option is selected.\n * @type {?}\n */\nMdTabHeader.prototype.selectFocusedIndex;\n/**\n * Event emitted when a label is focused.\n * @type {?}\n */\nMdTabHeader.prototype.indexFocused;\n/** @type {?} */\nMdTabHeader.prototype._elementRef;\n/** @type {?} */\nMdTabHeader.prototype._renderer;\n/** @type {?} */\nMdTabHeader.prototype._changeDetectorRef;\n/** @type {?} */\nMdTabHeader.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n/**\n * \\@docs-private\n */\nexport class MdTabLabelWrapperBase {}\nexport const /** @type {?} */ _MdTabLabelWrapperMixinBase = mixinDisabled(MdTabLabelWrapperBase);\n/**\n * Used in the `md-tab-group` view to display tab labels.\n * \\@docs-private\n */\nexport class MdTabLabelWrapper extends _MdTabLabelWrapperMixinBase implements CanDisable {\n/**\n * @param {?} elementRef\n */\nconstructor(public elementRef: ElementRef) {\n    super();\n  }\n/**\n * Sets focus on the wrapper element\n * @return {?}\n */\nfocus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n/**\n * @return {?}\n */\ngetOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n/**\n * @return {?}\n */\ngetOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdTabLabelWrapper], [matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\n}\n\nfunction MdTabLabelWrapper_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabLabelWrapper.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabLabelWrapper.ctorParameters;\n/** @type {?} */\nMdTabLabelWrapper.prototype.elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ViewChild,\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  QueryList,\n  ContentChildren,\n  ElementRef,\n  Renderer2,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  AfterViewChecked,\n  AfterContentInit,\n  AfterContentChecked,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MdTab} from './tab';\nimport {merge} from 'rxjs/observable/merge';\nimport {\n  CanDisableRipple, MATERIAL_COMPATIBILITY_MODE,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {CanColor, mixinColor, ThemePalette} from '@angular/material/core';\n/**\n * Used to generate unique ID's for each tab component\n */\nlet nextId = 0;\n/**\n * A simple change event emitted on focus or selection changes.\n */\nexport class MdTabChangeEvent {\n  index: number;\n  tab: MdTab;\n}\n\nfunction MdTabChangeEvent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabChangeEvent.prototype.index;\n/** @type {?} */\nMdTabChangeEvent.prototype.tab;\n}\n\n\n/** Possible positions for the tab header. */\nexport type MdTabHeaderPosition = 'above' | 'below';\n/**\n * \\@docs-private\n */\nexport class MdTabGroupBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdTabGroupBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabGroupBase.prototype._renderer;\n/** @type {?} */\nMdTabGroupBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdTabGroupMixinBase = mixinColor(mixinDisableRipple(MdTabGroupBase), 'primary');\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\nexport class MdTabGroup extends _MdTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, AfterViewChecked, OnDestroy, CanColor, CanDisableRipple {\n\n   _tabs: QueryList<MdTab>;\n\n   _tabBodyWrapper: ElementRef;\n/**\n * Whether this component has been initialized.\n */\nprivate _isInitialized: boolean = false;\n/**\n * The tab index that should be selected after the content has been checked.\n */\nprivate _indexToSelect: number | null = 0;\n/**\n * Snapshot of the height of the tab body wrapper before another tab is activated.\n */\nprivate _tabBodyWrapperHeight: number = 0;\n/**\n * Subscription to tabs being added/removed.\n */\nprivate _tabsSubscription = Subscription.EMPTY;\n/**\n * Subscription to changes in the tab labels.\n */\nprivate _tabLabelSubscription = Subscription.EMPTY;\n/**\n * Whether the tab group should grow to the size of the active tab.\n * @return {?}\n */\nget dynamicHeight(): boolean { return this._dynamicHeight; }\n/**\n * @param {?} value\n * @return {?}\n */\nset dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\nprivate _dynamicHeight: boolean = false;\n/**\n * @deprecated\n * @return {?}\n */\nget _dynamicHeightDeprecated(): boolean { return this._dynamicHeight; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _dynamicHeightDeprecated(value: boolean) { this._dynamicHeight = value; }\n/**\n * The index of the active tab.\n * @param {?} value\n * @return {?}\n */\nset selectedIndex(value: number | null) { this._indexToSelect = value; }\n/**\n * @return {?}\n */\nget selectedIndex(): number | null { return this._selectedIndex; }\nprivate _selectedIndex: number | null = null;\n/**\n * Position of the tab header.\n */\nheaderPosition: MdTabHeaderPosition = 'above';\n/**\n * Background color of the tab group.\n * @return {?}\n */\nget backgroundColor(): ThemePalette { return this._backgroundColor; }\n/**\n * @param {?} value\n * @return {?}\n */\nset backgroundColor(value: ThemePalette) {\n    let /** @type {?} */ nativeElement = this._elementRef.nativeElement;\n\n    this._renderer.removeClass(nativeElement, `mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      this._renderer.addClass(nativeElement, `mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\nprivate _backgroundColor: ThemePalette;\n/**\n * Output to enable support for two-way binding on `[(selectedIndex)]`\n */\nselectedIndexChange: EventEmitter<number> = new EventEmitter();\n/**\n * Event emitted when focus has changed within a tab group.\n */\nfocusChange: EventEmitter<MdTabChangeEvent> = new EventEmitter<MdTabChangeEvent>();\n/**\n * Event emitted when the tab selection has changed.\n */\nselectChange: EventEmitter<MdTabChangeEvent> = new EventEmitter<MdTabChangeEvent>(true);\nprivate _groupId: number;\n/**\n * @param {?} _renderer\n * @param {?} elementRef\n * @param {?} _changeDetectorRef\n */\nconstructor(_renderer: Renderer2,\n              elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef) {\n    super(_renderer, elementRef);\n    this._groupId = nextId++;\n  }\n/**\n * After the content is checked, this component knows what tabs have been defined\n * and what the selected index should be. This is where we can know exactly what position\n * each tab should be in according to the new selected index, and additionally we know how\n * a new selected tab should transition in (from the left or right).\n * @return {?}\n */\nngAfterContentChecked(): void {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let /** @type {?} */ indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      this.selectChange.emit(this._createChangeEvent(indexToSelect));\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MdTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n/**\n * Waits one frame for the view to update, then updates the ink bar\n * Note: This must be run outside of the zone or it will create an infinite change detection loop.\n * @return {?}\n */\nngAfterViewChecked(): void {\n    this._isInitialized = true;\n  }\n/**\n * @param {?} index\n * @return {?}\n */\n_focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n/**\n * @param {?} index\n * @return {?}\n */\nprivate _createChangeEvent(index: number): MdTabChangeEvent {\n    const /** @type {?} */ event = new MdTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n/**\n * Subscribes to changes in the tab labels. This is needed, because the \\@Input for the label is\n * on the MdTab component, whereas the data binding is inside the MdTabGroup. In order for the\n * binding to be updated, we need to subscribe to changes in it and trigger change detection\n * manually.\n * @return {?}\n */\nprivate _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n/**\n * Returns a unique id for each tab label element\n * @param {?} i\n * @return {?}\n */\n_getTabLabelId(i: number): string {\n    return `md-tab-label-${this._groupId}-${i}`;\n  }\n/**\n * Returns a unique id for each tab content element\n * @param {?} i\n * @return {?}\n */\n_getTabContentId(i: number): string {\n    return `md-tab-content-${this._groupId}-${i}`;\n  }\n/**\n * Sets the height of the body wrapper to the height of the activating tab if dynamic\n * height property is true.\n * @param {?} tabHeight\n * @return {?}\n */\n_setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    this._renderer.setStyle(this._tabBodyWrapper.nativeElement, 'height',\n        this._tabBodyWrapperHeight + 'px');\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      this._renderer.setStyle(this._tabBodyWrapper.nativeElement, 'height',\n          tabHeight + 'px');\n    }\n  }\n/**\n * Removes the height of the tab body wrapper.\n * @return {?}\n */\n_removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._renderer.setStyle(this._tabBodyWrapper.nativeElement, 'height', '');\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tab-group, mat-tab-group',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_tabs': [{ type: ContentChildren, args: [MdTab, ] },],\n'_tabBodyWrapper': [{ type: ViewChild, args: ['tabBodyWrapper', ] },],\n'dynamicHeight': [{ type: Input },],\n'_dynamicHeightDeprecated': [{ type: Input, args: ['md-dynamic-height', ] },],\n'selectedIndex': [{ type: Input },],\n'headerPosition': [{ type: Input },],\n'backgroundColor': [{ type: Input },],\n'selectedIndexChange': [{ type: Output },],\n'focusChange': [{ type: Output },],\n'selectChange': [{ type: Output },],\n};\n}\n\nfunction MdTabGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabGroup.ctorParameters;\n/** @type {?} */\nMdTabGroup.propDecorators;\n/** @type {?} */\nMdTabGroup.prototype._tabs;\n/** @type {?} */\nMdTabGroup.prototype._tabBodyWrapper;\n/**\n * Whether this component has been initialized.\n * @type {?}\n */\nMdTabGroup.prototype._isInitialized;\n/**\n * The tab index that should be selected after the content has been checked.\n * @type {?}\n */\nMdTabGroup.prototype._indexToSelect;\n/**\n * Snapshot of the height of the tab body wrapper before another tab is activated.\n * @type {?}\n */\nMdTabGroup.prototype._tabBodyWrapperHeight;\n/**\n * Subscription to tabs being added/removed.\n * @type {?}\n */\nMdTabGroup.prototype._tabsSubscription;\n/**\n * Subscription to changes in the tab labels.\n * @type {?}\n */\nMdTabGroup.prototype._tabLabelSubscription;\n/** @type {?} */\nMdTabGroup.prototype._dynamicHeight;\n/** @type {?} */\nMdTabGroup.prototype._selectedIndex;\n/**\n * Position of the tab header.\n * @type {?}\n */\nMdTabGroup.prototype.headerPosition;\n/** @type {?} */\nMdTabGroup.prototype._backgroundColor;\n/**\n * Output to enable support for two-way binding on `[(selectedIndex)]`\n * @type {?}\n */\nMdTabGroup.prototype.selectedIndexChange;\n/**\n * Event emitted when focus has changed within a tab group.\n * @type {?}\n */\nMdTabGroup.prototype.focusChange;\n/**\n * Event emitted when the tab selection has changed.\n * @type {?}\n */\nMdTabGroup.prototype.selectChange;\n/** @type {?} */\nMdTabGroup.prototype._groupId;\n/** @type {?} */\nMdTabGroup.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ViewChild,\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnInit,\n  ElementRef,\n  Optional,\n  AfterViewChecked,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationEvent,\n} from '@angular/animations';\nimport {TemplatePortal, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\n\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MdTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MdTabBodyOriginState = 'left' | 'right';\n/**\n * Wrapper for the contents of a tab.\n * \\@docs-private\n */\nexport class MdTabBody implements OnInit, AfterViewChecked {\n/**\n * The portal host inside of this container into which the tab body content will be loaded.\n */\n_portalHost: PortalHostDirective;\n/**\n * Event emitted when the tab begins to animate towards the center as the active tab.\n */\nonCentering: EventEmitter<number> = new EventEmitter<number>();\n/**\n * Event emitted when the tab completes its animation towards the center.\n */\nonCentered: EventEmitter<void> = new EventEmitter<void>(true);\n/**\n * The tab body content to display.\n */\n_content: TemplatePortal<any>;\n/**\n * The shifted index position of the tab body, where zero represents the active center tab.\n */\n_position: MdTabBodyPositionState;\n/**\n * @param {?} position\n * @return {?}\n */\nset position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n/**\n * The origin position from which this tab should appear when it is centered into view.\n */\n_origin: MdTabBodyOriginState;\n/**\n * The origin position from which this tab should appear when it is centered into view.\n * @param {?} origin\n * @return {?}\n */\nset origin(origin: number) {\n    if (origin == null) { return; }\n\n    const /** @type {?} */ dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n/**\n * @param {?} _elementRef\n * @param {?} _dir\n */\nconstructor(private _elementRef: ElementRef,\nprivate _dir: Directionality) { }\n/**\n * After initialized, check if the content is centered and has an origin. If so, set the\n * special position states that transition the tab from the left or right before centering.\n * @return {?}\n */\nngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n/**\n * After the view has been set, check if the tab content is set to the center and attach the\n * content if it is not already attached.\n * @return {?}\n */\nngAfterViewChecked() {\n    if (this._isCenterPosition(this._position) && !this._portalHost.hasAttached()) {\n      this._portalHost.attach(this._content);\n    }\n  }\n/**\n * @param {?} e\n * @return {?}\n */\n_onTranslateTabStarted(e: AnimationEvent) {\n    if (this._isCenterPosition(e.toState)) {\n      this.onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n/**\n * @param {?} e\n * @return {?}\n */\n_onTranslateTabComplete(e: AnimationEvent) {\n    // If the end state is that the tab is not centered, then detach the content.\n    if (!this._isCenterPosition(e.toState) && !this._isCenterPosition(this._position)) {\n      this._portalHost.detach();\n    }\n\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this.onCentered.emit();\n    }\n  }\n/**\n * The text direction of the containing app.\n * @return {?}\n */\n_getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n/**\n * Whether the provided position state is considered center, regardless of origin.\n * @param {?} position\n * @return {?}\n */\nprivate _isCenterPosition(position: MdTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tab-body, mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-body',\n  },\n  animations: [\n    trigger('translateTab', [\n      state('void', style({transform: 'translate3d(0%, 0, 0)'})),\n      state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n      state('left-origin-center', style({transform: 'translate3d(0%, 0, 0)'})),\n      state('right-origin-center', style({transform: 'translate3d(0%, 0, 0)'})),\n      state('center', style({transform: 'translate3d(0%, 0, 0)'})),\n      state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n      transition('* => left, * => right, left => center, right => center',\n          animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n      transition('void => left-origin-center', [\n        style({transform: 'translate3d(-100%, 0, 0)'}),\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n      ]),\n      transition('void => right-origin-center', [\n        style({transform: 'translate3d(100%, 0, 0)'}),\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n      ])\n    ])\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalHost': [{ type: ViewChild, args: [PortalHostDirective, ] },],\n'onCentering': [{ type: Output },],\n'onCentered': [{ type: Output },],\n'_content': [{ type: Input, args: ['content', ] },],\n'position': [{ type: Input, args: ['position', ] },],\n'origin': [{ type: Input, args: ['origin', ] },],\n};\n}\n\nfunction MdTabBody_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabBody.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabBody.ctorParameters;\n/** @type {?} */\nMdTabBody.propDecorators;\n/**\n * The portal host inside of this container into which the tab body content will be loaded.\n * @type {?}\n */\nMdTabBody.prototype._portalHost;\n/**\n * Event emitted when the tab begins to animate towards the center as the active tab.\n * @type {?}\n */\nMdTabBody.prototype.onCentering;\n/**\n * Event emitted when the tab completes its animation towards the center.\n * @type {?}\n */\nMdTabBody.prototype.onCentered;\n/**\n * The tab body content to display.\n * @type {?}\n */\nMdTabBody.prototype._content;\n/**\n * The shifted index position of the tab body, where zero represents the active center tab.\n * @type {?}\n */\nMdTabBody.prototype._position;\n/**\n * The origin position from which this tab should appear when it is centered into view.\n * @type {?}\n */\nMdTabBody.prototype._origin;\n/** @type {?} */\nMdTabBody.prototype._elementRef;\n/** @type {?} */\nMdTabBody.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {TemplatePortal} from '@angular/material/core';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {MdTabLabel} from './tab-label';\nimport {Subject} from 'rxjs/Subject';\n/**\n * \\@docs-private\n */\nexport class MdTabBase {}\nexport const /** @type {?} */ _MdTabMixinBase = mixinDisabled(MdTabBase);\nexport class MdTab extends _MdTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n/**\n * Content for the tab label given by <ng-template md-tab-label>.\n */\ntemplateLabel: MdTabLabel;\n/**\n * Template inside the MdTab view that contains an <ng-content>.\n */\n_content: TemplateRef<any>;\n/**\n * The plain text label for the tab, used when there is no template label.\n */\ntextLabel: string = '';\n/**\n * The portal that will be the hosted content of the tab\n */\nprivate _contentPortal: TemplatePortal<any> | null = null;\n/**\n * @return {?}\n */\nget content(): TemplatePortal<any> | null { return this._contentPortal; }\n/**\n * Emits whenever the label changes.\n */\n_labelChange = new Subject<void>();\n/**\n * Emits whenevfer the disable changes\n */\n_disableChange = new Subject<void>();\n/**\n * The relatively indexed position where 0 represents the center, negative is left, and positive\n * represents the right.\n */\nposition: number | null = null;\n/**\n * The initial relatively index origin of the tab if it was created and selected after there\n * was already a selected tab. Provides context of what position the tab should originate from.\n */\norigin: number | null = null;\n/**\n * Whether the tab is currently active.\n */\nisActive = false;\n/**\n * @param {?} _viewContainerRef\n */\nconstructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n/**\n * @return {?}\n */\nngOnInit(): void {\n    this._contentPortal = new TemplatePortal(this._content, this._viewContainerRef);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tab, mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'mdTab, matTab',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'templateLabel': [{ type: ContentChild, args: [MdTabLabel, ] },],\n'_content': [{ type: ViewChild, args: [TemplateRef, ] },],\n'textLabel': [{ type: Input, args: ['label', ] },],\n};\n}\n\nfunction MdTab_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTab.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTab.ctorParameters;\n/** @type {?} */\nMdTab.propDecorators;\n/**\n * Content for the tab label given by <ng-template md-tab-label>.\n * @type {?}\n */\nMdTab.prototype.templateLabel;\n/**\n * Template inside the MdTab view that contains an <ng-content>.\n * @type {?}\n */\nMdTab.prototype._content;\n/**\n * The plain text label for the tab, used when there is no template label.\n * @type {?}\n */\nMdTab.prototype.textLabel;\n/**\n * The portal that will be the hosted content of the tab\n * @type {?}\n */\nMdTab.prototype._contentPortal;\n/**\n * Emits whenever the label changes.\n * @type {?}\n */\nMdTab.prototype._labelChange;\n/**\n * Emits whenevfer the disable changes\n * @type {?}\n */\nMdTab.prototype._disableChange;\n/**\n * The relatively indexed position where 0 represents the center, negative is left, and positive\n * represents the right.\n * @type {?}\n */\nMdTab.prototype.position;\n/**\n * The initial relatively index origin of the tab if it was created and selected after there\n * was already a selected tab. Provides context of what position the tab should originate from.\n * @type {?}\n */\nMdTab.prototype.origin;\n/**\n * Whether the tab is currently active.\n * @type {?}\n */\nMdTab.prototype.isActive;\n/** @type {?} */\nMdTab.prototype._viewContainerRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {TemplatePortalDirective} from '@angular/cdk/portal';\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const _MdTabLabelBaseClass = TemplatePortalDirective;\n/**\n * Used to flag tab labels for use with the portal directive\n */\nexport class MdTabLabel extends _MdTabLabelBaseClass {\n/**\n * @param {?} templateRef\n * @param {?} viewContainerRef\n */\nconstructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-tab-label], [mat-tab-label], [mdTabLabel], [matTabLabel]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n{type: ViewContainerRef, },\n];\n}\n\nfunction MdTabLabel_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTabLabel.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTabLabel.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Renderer2, ElementRef, NgZone} from '@angular/core';\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * \\@docs-private\n */\nexport class MdInkBar {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _ngZone\n */\nconstructor(\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _ngZone: NgZone) {}\n/**\n * Calculates the styles from the provided element in order to align the ink-bar to that element.\n * Shows the ink bar if previously set as hidden.\n * @param {?} element\n * @return {?}\n */\nalignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n/**\n * Shows the ink bar.\n * @return {?}\n */\nshow(): void {\n    this._renderer.setStyle(this._elementRef.nativeElement, 'visibility', 'visible');\n  }\n/**\n * Hides the ink bar.\n * @return {?}\n */\nhide(): void {\n    this._renderer.setStyle(this._elementRef.nativeElement, 'visibility', 'hidden');\n  }\n/**\n * Sets the proper styles to the ink bar element.\n * @param {?} element\n * @return {?}\n */\nprivate _setStyles(element: HTMLElement) {\n    const /** @type {?} */ left = element ? (element.offsetLeft || 0) + 'px' : '0';\n    const /** @type {?} */ width = element ? (element.offsetWidth || 0) + 'px' : '0';\n\n    this._renderer.setStyle(this._elementRef.nativeElement, 'left', left);\n    this._renderer.setStyle(this._elementRef.nativeElement, 'width', width);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-ink-bar, mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: NgZone, },\n];\n}\n\nfunction MdInkBar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInkBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInkBar.ctorParameters;\n/** @type {?} */\nMdInkBar.prototype._renderer;\n/** @type {?} */\nMdInkBar.prototype._elementRef;\n/** @type {?} */\nMdInkBar.prototype._ngZone;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdTableModule,_MdCellDef,_MdHeaderCellDef,_MdColumnDef,_MdHeaderCell,_MdCell,MdCellDef,MdHeaderCellDef,MdColumnDef,MdHeaderCell,MdCell,_MdTable,MdTable,_MdHeaderRowDef,_MdCdkRowDef,_MdHeaderRow,_MdRow,MdHeaderRowDef,MatHeaderRowDef,MdRowDef,MatRowDef,MdHeaderRow,MdRow,MatCell,MatCellDef,MatColumnDef,MatHeaderCell,MatHeaderCellDef,MatHeaderRow,MatRow,MatTable,MatTableModule} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {MdCell, MdHeaderCell, MdCellDef, MdHeaderCellDef, MdColumnDef} from './cell';\nimport {MdHeaderRow, MdRow, MdHeaderRowDef, MdRowDef, MatHeaderRowDef, MatRowDef} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MdCommonModule} from '@angular/material/core';\nexport class MdTableModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CdkTableModule, CommonModule, MdCommonModule],\n  exports: [MdTable, MdCellDef, MdHeaderCellDef, MdColumnDef,\n    MdHeaderRowDef, MdRowDef,\n    MdHeaderCell, MdCell, MdHeaderRow, MdRow,\n    MatHeaderRowDef, MatRowDef],\n  declarations: [MdTable, MdCellDef, MdHeaderCellDef, MdColumnDef,\n    MdHeaderRowDef, MdRowDef,\n    MdHeaderCell, MdCell, MdHeaderRow, MdRow,\n    MatHeaderRowDef, MatRowDef],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdTableModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTableModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTableModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\nimport {\n  CdkHeaderRow,\n  CdkRow,\n  CDK_ROW_TEMPLATE,\n  CdkRowDef,\n  CdkHeaderRowDef,\n} from '@angular/cdk/table';\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const _MdHeaderRowDef = CdkHeaderRowDef;\nexport const /** @type {?} */ _MdCdkRowDef = CdkRowDef;\nexport const /** @type {?} */ _MdHeaderRow = CdkHeaderRow;\nexport const /** @type {?} */ _MdRow = CdkRow;\n/**\n * Header row definition for the md-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nexport class MdHeaderRowDef extends _MdHeaderRowDef { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MdHeaderRowDef}],\n  inputs: ['columns: mdHeaderRowDef'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdHeaderRowDef_tsickle_Closure_declarations() {\n/** @type {?} */\nMdHeaderRowDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdHeaderRowDef.ctorParameters;\n}\n\n/**\n * Mat-compatible version of MdHeaderRowDef\n */\nexport class MatHeaderRowDef extends _MdHeaderRowDef { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatHeaderRowDef_tsickle_Closure_declarations() {\n/** @type {?} */\nMatHeaderRowDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatHeaderRowDef.ctorParameters;\n}\n\n/**\n * Data row definition for the md-table.\n * Captures the header row's template and other row properties such as the columns to display.\n */\nexport class MdRowDef extends _MdCdkRowDef { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MdRowDef}],\n  inputs: ['columns: mdRowDefColumns'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRowDef_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRowDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRowDef.ctorParameters;\n}\n\n/**\n * Mat-compatible version of MdRowDef\n */\nexport class MatRowDef extends _MdCdkRowDef { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatRowDef_tsickle_Closure_declarations() {\n/** @type {?} */\nMatRowDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatRowDef.ctorParameters;\n}\n\n/**\n * Header template container that contains the cell outlet. Adds the right class and role.\n */\nexport class MdHeaderRow extends _MdHeaderRow { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-header-row, mat-header-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdHeaderRow_tsickle_Closure_declarations() {\n/** @type {?} */\nMdHeaderRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdHeaderRow.ctorParameters;\n}\n\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\nexport class MdRow extends _MdRow { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-row, mat-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRow_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRow.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, ElementRef, Input, Renderer2} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const _MdCellDef = CdkCellDef;\nexport const /** @type {?} */ _MdHeaderCellDef = CdkHeaderCellDef;\nexport const /** @type {?} */ _MdColumnDef = CdkColumnDef;\nexport const /** @type {?} */ _MdHeaderCell = CdkHeaderCell;\nexport const /** @type {?} */ _MdCell = CdkCell;\n/**\n * Cell definition for the md-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nexport class MdCellDef extends _MdCellDef { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdCellDef], [matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MdCellDef}]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCellDef_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCellDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCellDef.ctorParameters;\n}\n\n/**\n * Header cell definition for the md-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nexport class MdHeaderCellDef extends _MdHeaderCellDef { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdHeaderCellDef], [matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MdHeaderCellDef}]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdHeaderCellDef_tsickle_Closure_declarations() {\n/** @type {?} */\nMdHeaderCellDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdHeaderCellDef.ctorParameters;\n}\n\n/**\n * Column definition for the md-table.\n * Defines a set of cells available for a table column.\n */\nexport class MdColumnDef extends _MdColumnDef {\n/**\n * Unique name for this column.\n */\nname: string;\n/**\n * @return {?}\n */\nget _matColumnDefName() { return this.name; }\n/**\n * @param {?} name\n * @return {?}\n */\nset _matColumnDefName(name) { this.name = name; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdColumnDef], [matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MdColumnDef}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input, args: ['mdColumnDef', ] },],\n'_matColumnDefName': [{ type: Input, args: ['matColumnDef', ] },],\n};\n}\n\nfunction MdColumnDef_tsickle_Closure_declarations() {\n/** @type {?} */\nMdColumnDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdColumnDef.ctorParameters;\n/** @type {?} */\nMdColumnDef.propDecorators;\n/**\n * Unique name for this column.\n * @type {?}\n */\nMdColumnDef.prototype.name;\n}\n\n/**\n * Header cell template container that adds the right classes and role.\n */\nexport class MdHeaderCell extends _MdHeaderCell {\n/**\n * @param {?} columnDef\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef,\n              renderer: Renderer2) {\n    super(columnDef, elementRef, renderer);\n    renderer.addClass(elementRef.nativeElement, `mat-column-${columnDef.cssClassFriendlyName}`);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-header-cell, mat-header-cell',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkColumnDef, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\n}\n\nfunction MdHeaderCell_tsickle_Closure_declarations() {\n/** @type {?} */\nMdHeaderCell.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdHeaderCell.ctorParameters;\n}\n\n/**\n * Cell template container that adds the right classes and role.\n */\nexport class MdCell extends _MdCell {\n/**\n * @param {?} columnDef\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef,\n              renderer: Renderer2) {\n    super(columnDef, elementRef, renderer);\n    renderer.addClass(elementRef.nativeElement, `mat-column-${columnDef.cssClassFriendlyName}`);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-cell, mat-cell',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkColumnDef, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\n}\n\nfunction MdCell_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCell.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCell.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const _MdTable = CdkTable;\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\nexport class MdTable<T> extends _MdTable<T> { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-table, mat-table',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdTable_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTable.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTable.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdStepperModule,_MdStepLabel,MdStepLabel,_MdStep,_MdStepper,MdStep,MdStepper,MdHorizontalStepper,MdVerticalStepper,_MdStepperNext,_MdStepperPrevious,MdStepperNext,MdStepperPrevious,MdStepHeader,MatStep,MatStepHeader,MatStepLabel,MatStepper,MatHorizontalStepper,MatStepperModule,MatVerticalStepper,MatStepperPrevious,MatStepperNext} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MdButtonModule} from '@angular/material/button';\nimport {MdCommonModule} from '@angular/material/core';\nimport {MdIconModule} from '@angular/material/icon';\nimport {MdStepHeader} from './step-header';\nimport {MdStepLabel} from './step-label';\nimport {MdHorizontalStepper, MdStep, MdStepper, MdVerticalStepper} from './stepper';\nimport {MdStepperNext, MdStepperPrevious} from './stepper-button';\nexport class MdStepperModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    MdCommonModule,\n    CommonModule,\n    PortalModule,\n    MdButtonModule,\n    CdkStepperModule,\n    MdIconModule\n  ],\n  exports: [\n    MdCommonModule,\n    MdHorizontalStepper,\n    MdVerticalStepper,\n    MdStep,\n    MdStepLabel,\n    MdStepper,\n    MdStepperNext,\n    MdStepperPrevious,\n    MdStepHeader\n  ],\n  declarations: [MdHorizontalStepper, MdVerticalStepper, MdStep, MdStepLabel, MdStepper,\n    MdStepperNext, MdStepperPrevious, MdStepHeader],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdStepperModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdStepperModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdStepperModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MdStepper} from './stepper';\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const _MdStepperNext = CdkStepperNext;\nexport const /** @type {?} */ _MdStepperPrevious = CdkStepperPrevious;\n/**\n * Button that moves to the next step in a stepper workflow.\n */\nexport class MdStepperNext extends _MdStepperNext { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[mdStepperNext], button[matStepperNext]',\n  host: {'(click)': '_stepper.next()'},\n  providers: [{provide: CdkStepper, useExisting: MdStepper}]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdStepperNext_tsickle_Closure_declarations() {\n/** @type {?} */\nMdStepperNext.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdStepperNext.ctorParameters;\n}\n\n/**\n * Button that moves to the previous step in a stepper workflow.\n */\nexport class MdStepperPrevious extends _MdStepperPrevious { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[mdStepperPrevious], button[matStepperPrevious]',\n  host: {'(click)': '_stepper.previous()'},\n  providers: [{provide: CdkStepper, useExisting: MdStepper}]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdStepperPrevious_tsickle_Closure_declarations() {\n/** @type {?} */\nMdStepperPrevious.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdStepperPrevious.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {CdkStep, CdkStepper} from '@angular/cdk/stepper';\nimport {\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Optional,\n  QueryList,\n  SkipSelf,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {\n  defaultErrorStateMatcher,\n  ErrorOptions,\n  ErrorStateMatcher, MATERIAL_COMPATIBILITY_MODE,\n  MD_ERROR_GLOBAL_OPTIONS,\n} from '@angular/material/core';\nimport {MdStepHeader} from './step-header';\nimport {MdStepLabel} from './step-label';\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const _MdStep = CdkStep;\nexport const /** @type {?} */ _MdStepper = CdkStepper;\nexport class MdStep extends _MdStep implements ErrorOptions {\n/**\n * Content for step label given by <ng-template matStepLabel> or <ng-template mdStepLabel>.\n */\nstepLabel: MdStepLabel;\n/**\n * Original ErrorStateMatcher that checks the validity of form control.\n */\nprivate _originalErrorStateMatcher: ErrorStateMatcher;\n/**\n * @param {?} mdStepper\n * @param {?} errorOptions\n */\nconstructor( mdStepper: MdStepper,\n                 errorOptions: ErrorOptions) {\n    super(mdStepper);\n    if (errorOptions && errorOptions.errorStateMatcher) {\n      this._originalErrorStateMatcher = errorOptions.errorStateMatcher;\n    } else {\n      this._originalErrorStateMatcher = defaultErrorStateMatcher;\n    }\n  }\n/**\n * Custom error state matcher that additionally checks for validity of interacted form.\n */\nerrorStateMatcher = (control: FormControl, form: FormGroupDirective | NgForm) => {\n    let originalErrorState = this._originalErrorStateMatcher(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    let customErrorState =  control.invalid && this.interacted;\n\n    return originalErrorState || customErrorState;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-step, mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: MD_ERROR_GLOBAL_OPTIONS, useExisting: MdStep}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdStepper, decorators: [{ type: Inject, args: [forwardRef(() => MdStepper), ] }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: SkipSelf }, { type: Inject, args: [MD_ERROR_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'stepLabel': [{ type: ContentChild, args: [MdStepLabel, ] },],\n};\n}\n\nfunction MdStep_tsickle_Closure_declarations() {\n/** @type {?} */\nMdStep.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdStep.ctorParameters;\n/** @type {?} */\nMdStep.propDecorators;\n/**\n * Content for step label given by <ng-template matStepLabel> or <ng-template mdStepLabel>.\n * @type {?}\n */\nMdStep.prototype.stepLabel;\n/**\n * Original ErrorStateMatcher that checks the validity of form control.\n * @type {?}\n */\nMdStep.prototype._originalErrorStateMatcher;\n/**\n * Custom error state matcher that additionally checks for validity of interacted form.\n * @type {?}\n */\nMdStep.prototype.errorStateMatcher;\n}\n\nexport class MdStepper extends _MdStepper {\n/**\n * The list of step headers of the steps in the stepper.\n */\n_stepHeader: QueryList<ElementRef>;\n/**\n * Steps that the stepper holds.\n */\n_steps: QueryList<MdStep>;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdStepper]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_stepHeader': [{ type: ViewChildren, args: [MdStepHeader, {read: ElementRef}, ] },],\n'_steps': [{ type: ContentChildren, args: [MdStep, ] },],\n};\n}\n\nfunction MdStepper_tsickle_Closure_declarations() {\n/** @type {?} */\nMdStepper.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdStepper.ctorParameters;\n/** @type {?} */\nMdStepper.propDecorators;\n/**\n * The list of step headers of the steps in the stepper.\n * @type {?}\n */\nMdStepper.prototype._stepHeader;\n/**\n * Steps that the stepper holds.\n * @type {?}\n */\nMdStepper.prototype._steps;\n}\n\nexport class MdHorizontalStepper extends MdStepper { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-horizontal-stepper, mat-horizontal-stepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'role': 'tablist',\n  },\n  animations: [\n    trigger('stepTransition', [\n      state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n      state('current', style({transform: 'translate3d(0%, 0, 0)', visibility: 'visible'})),\n      state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n      transition('* => *',\n          animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n    ])\n  ],\n  providers: [{provide: MdStepper, useExisting: MdHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdHorizontalStepper_tsickle_Closure_declarations() {\n/** @type {?} */\nMdHorizontalStepper.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdHorizontalStepper.ctorParameters;\n}\n\nexport class MdVerticalStepper extends MdStepper { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-vertical-stepper, mat-vertical-stepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'role': 'tablist',\n  },\n  animations: [\n    trigger('stepTransition', [\n      state('previous', style({height: '0px', visibility: 'hidden'})),\n      state('next', style({height: '0px', visibility: 'hidden'})),\n      state('current', style({height: '*', visibility: 'visible'})),\n      transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n    ])\n  ],\n  providers: [{provide: MdStepper, useExisting: MdVerticalStepper}],\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdVerticalStepper_tsickle_Closure_declarations() {\n/** @type {?} */\nMdVerticalStepper.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdVerticalStepper.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Component, Input, ViewEncapsulation} from '@angular/core';\nimport {MATERIAL_COMPATIBILITY_MODE} from '@angular/material/core';\nimport {MdStepLabel} from './step-label';\nexport class MdStepHeader {\n/**\n * Icon for the given step.\n */\nicon: string;\n/**\n * Label of the given step.\n */\nlabel: MdStepLabel | string;\n/**\n * Index of the given step.\n * @return {?}\n */\nget index() { return this._index; }\n/**\n * @param {?} value\n * @return {?}\n */\nset index(value: any) {\n    this._index = coerceNumberProperty(value);\n  }\nprivate _index: number;\n/**\n * Whether the given step is selected.\n * @return {?}\n */\nget selected() { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: any) {\n    this._selected = coerceBooleanProperty(value);\n  }\nprivate _selected: boolean;\n/**\n * Whether the given step label is active.\n * @return {?}\n */\nget active() { return this._active; }\n/**\n * @param {?} value\n * @return {?}\n */\nset active(value: any) {\n    this._active = coerceBooleanProperty(value);\n  }\nprivate _active: boolean;\n/**\n * Whether the given step is optional.\n * @return {?}\n */\nget optional() { return this._optional; }\n/**\n * @param {?} value\n * @return {?}\n */\nset optional(value: any) {\n    this._optional = coerceBooleanProperty(value);\n  }\nprivate _optional: boolean;\n/**\n * Returns string label of given step if it is a text label.\n * @return {?}\n */\n_stringLabel(): string | null {\n    return this.label instanceof MdStepLabel ? null : this.label;\n  }\n/**\n * Returns MdStepLabel if the label of given step is a template label.\n * @return {?}\n */\n_templateLabel(): MdStepLabel | null {\n    return this.label instanceof MdStepLabel ? this.label : null;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-step-header, mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'icon': [{ type: Input },],\n'label': [{ type: Input },],\n'index': [{ type: Input },],\n'selected': [{ type: Input },],\n'active': [{ type: Input },],\n'optional': [{ type: Input },],\n};\n}\n\nfunction MdStepHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMdStepHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdStepHeader.ctorParameters;\n/** @type {?} */\nMdStepHeader.propDecorators;\n/**\n * Icon for the given step.\n * @type {?}\n */\nMdStepHeader.prototype.icon;\n/**\n * Label of the given step.\n * @type {?}\n */\nMdStepHeader.prototype.label;\n/** @type {?} */\nMdStepHeader.prototype._index;\n/** @type {?} */\nMdStepHeader.prototype._selected;\n/** @type {?} */\nMdStepHeader.prototype._active;\n/** @type {?} */\nMdStepHeader.prototype._optional;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const _MdStepLabel = CdkStepLabel;\nexport class MdStepLabel extends _MdStepLabel {\n/**\n * @param {?} template\n */\nconstructor(template: TemplateRef<any>) {\n    super(template);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdStepLabel], [matStepLabel]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n];\n}\n\nfunction MdStepLabel_tsickle_Closure_declarations() {\n/** @type {?} */\nMdStepLabel.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdStepLabel.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {CdkStepperModule,StepContentPositionState,StepperSelectionEvent,CdkStep,CdkStepper,CdkStepLabel,CdkStepperNext,CdkStepperPrevious} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CdkStepper, CdkStep} from './stepper';\nimport {CommonModule} from '@angular/common';\nimport {CdkStepLabel} from './step-label';\nimport {CdkStepperNext, CdkStepperPrevious} from './stepper-button';\nimport {BidiModule} from '@angular/cdk/bidi';\nexport class CdkStepperModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [BidiModule, CommonModule],\n  exports: [CdkStep, CdkStepper, CdkStepLabel, CdkStepperNext, CdkStepperPrevious],\n  declarations: [CdkStep, CdkStepper, CdkStepLabel, CdkStepperNext, CdkStepperPrevious]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CdkStepperModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkStepperModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkStepperModule.ctorParameters;\n}\n\n\nexport {StepContentPositionState,StepperSelectionEvent,CdkStep,CdkStepper} from './stepper';\nexport {CdkStepLabel} from './step-label';\nexport {CdkStepperNext,CdkStepperPrevious} from './stepper-button';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper} from './stepper';\n/**\n * Button that moves to the next step in a stepper workflow.\n */\nexport class CdkStepperNext {\n/**\n * @param {?} _stepper\n */\nconstructor(public _stepper: CdkStepper) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[cdkStepperNext]',\n  host: {'(click)': '_stepper.next()'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkStepper, },\n];\n}\n\nfunction CdkStepperNext_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkStepperNext.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkStepperNext.ctorParameters;\n/** @type {?} */\nCdkStepperNext.prototype._stepper;\n}\n\n/**\n * Button that moves to the previous step in a stepper workflow.\n */\nexport class CdkStepperPrevious {\n/**\n * @param {?} _stepper\n */\nconstructor(public _stepper: CdkStepper) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[cdkStepperPrevious]',\n  host: {'(click)': '_stepper.previous()'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkStepper, },\n];\n}\n\nfunction CdkStepperPrevious_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkStepperPrevious.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkStepperPrevious.ctorParameters;\n/** @type {?} */\nCdkStepperPrevious.prototype._stepper;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ContentChildren,\n  EventEmitter,\n  Input,\n  Output,\n  QueryList,\n  Directive,\n  // This import is only used to define a generic type. The current TypeScript version incorrectly\n  // considers such imports as unused (https://github.com/Microsoft/TypeScript/issues/14953)\n  // tslint:disable-next-line:no-unused-variable\n  ElementRef,\n  Component,\n  ContentChild,\n  ViewChild,\n  TemplateRef,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  forwardRef\n} from '@angular/core';\nimport {LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {CdkStepLabel} from './step-label';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {AbstractControl} from '@angular/forms';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\n/**\n * Used to generate unique ID for each stepper component.\n */\nlet nextId = 0;\n\n/**\n * Position state of the content of each step in stepper that is used for transitioning\n * the content into correct position upon step selection change.\n */\nexport type StepContentPositionState = 'previous' | 'current' | 'next';\n/**\n * Change event emitted on selection changes.\n */\nexport class StepperSelectionEvent {\n/**\n * Index of the step now selected.\n */\nselectedIndex: number;\n/**\n * Index of the step previously selected.\n */\npreviouslySelectedIndex: number;\n/**\n * The step instance now selected.\n */\nselectedStep: CdkStep;\n/**\n * The step instance previously selected.\n */\npreviouslySelectedStep: CdkStep;\n}\n\nfunction StepperSelectionEvent_tsickle_Closure_declarations() {\n/**\n * Index of the step now selected.\n * @type {?}\n */\nStepperSelectionEvent.prototype.selectedIndex;\n/**\n * Index of the step previously selected.\n * @type {?}\n */\nStepperSelectionEvent.prototype.previouslySelectedIndex;\n/**\n * The step instance now selected.\n * @type {?}\n */\nStepperSelectionEvent.prototype.selectedStep;\n/**\n * The step instance previously selected.\n * @type {?}\n */\nStepperSelectionEvent.prototype.previouslySelectedStep;\n}\n\nexport class CdkStep {\n/**\n * Template for step label if it exists.\n */\nstepLabel: CdkStepLabel;\n/**\n * Template for step content.\n */\ncontent: TemplateRef<any>;\n/**\n * The top level abstract control of the step.\n */\nstepControl: AbstractControl;\n/**\n * Whether user has seen the expanded step content or not .\n */\ninteracted = false;\n/**\n * Label of the step.\n */\nlabel: string;\n/**\n * @return {?}\n */\nget editable() { return this._editable; }\n/**\n * @param {?} value\n * @return {?}\n */\nset editable(value: any) {\n    this._editable = coerceBooleanProperty(value);\n  }\nprivate _editable = true;\n/**\n * Whether the completion of step is optional or not.\n * @return {?}\n */\nget optional() { return this._optional; }\n/**\n * @param {?} value\n * @return {?}\n */\nset optional(value: any) {\n    this._optional = coerceBooleanProperty(value);\n  }\nprivate _optional = false;\n/**\n * Return whether step is completed or not.\n * @return {?}\n */\nget completed() {\n    return this._customCompleted == null ? this._defaultCompleted : this._customCompleted;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset completed(value: any) {\n    this._customCompleted = coerceBooleanProperty(value);\n  }\nprivate _customCompleted: boolean | null = null;\n/**\n * @return {?}\n */\nprivate get _defaultCompleted() {\n    return this.stepControl ? this.stepControl.valid && this.interacted : this.interacted;\n  }\n/**\n * @param {?} _stepper\n */\nconstructor(\nprivate _stepper: CdkStepper) { }\n/**\n * Selects this step component.\n * @return {?}\n */\nselect(): void {\n    this._stepper.selected = this;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'cdk-step',\n  templateUrl: 'step.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkStepper, decorators: [{ type: Inject, args: [forwardRef(() => CdkStepper), ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'stepLabel': [{ type: ContentChild, args: [CdkStepLabel, ] },],\n'content': [{ type: ViewChild, args: [TemplateRef, ] },],\n'stepControl': [{ type: Input },],\n'label': [{ type: Input },],\n'editable': [{ type: Input },],\n'optional': [{ type: Input },],\n'completed': [{ type: Input },],\n};\n}\n\nfunction CdkStep_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkStep.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkStep.ctorParameters;\n/** @type {?} */\nCdkStep.propDecorators;\n/**\n * Template for step label if it exists.\n * @type {?}\n */\nCdkStep.prototype.stepLabel;\n/**\n * Template for step content.\n * @type {?}\n */\nCdkStep.prototype.content;\n/**\n * The top level abstract control of the step.\n * @type {?}\n */\nCdkStep.prototype.stepControl;\n/**\n * Whether user has seen the expanded step content or not .\n * @type {?}\n */\nCdkStep.prototype.interacted;\n/**\n * Label of the step.\n * @type {?}\n */\nCdkStep.prototype.label;\n/** @type {?} */\nCdkStep.prototype._editable;\n/** @type {?} */\nCdkStep.prototype._optional;\n/** @type {?} */\nCdkStep.prototype._customCompleted;\n/** @type {?} */\nCdkStep.prototype._stepper;\n}\n\nexport class CdkStepper {\n/**\n * The list of step components that the stepper is holding.\n */\n_steps: QueryList<CdkStep>;\n/**\n * The list of step headers of the steps in the stepper.\n */\n_stepHeader: QueryList<ElementRef>;\n/**\n * Whether the validity of previous steps should be checked or not.\n * @return {?}\n */\nget linear() { return this._linear; }\n/**\n * @param {?} value\n * @return {?}\n */\nset linear(value: any) { this._linear = coerceBooleanProperty(value); }\nprivate _linear = false;\n/**\n * The index of the selected step.\n * @return {?}\n */\nget selectedIndex() { return this._selectedIndex; }\n/**\n * @param {?} index\n * @return {?}\n */\nset selectedIndex(index: number) {\n    if (this._anyControlsInvalid(index)\n        || index < this._selectedIndex && !this._steps.toArray()[index].editable) {\n      // remove focus from clicked step header if the step is not able to be selected\n      this._stepHeader.toArray()[index].nativeElement.blur();\n    } else if (this._selectedIndex != index) {\n      this._emitStepperSelectionEvent(index);\n      this._focusIndex = this._selectedIndex;\n    }\n  }\nprivate _selectedIndex: number = 0;\n/**\n * The step that is selected.\n * @return {?}\n */\nget selected() { return this._steps[this.selectedIndex]; }\n/**\n * @param {?} step\n * @return {?}\n */\nset selected(step: CdkStep) {\n    this.selectedIndex = this._steps.toArray().indexOf(step);\n  }\n/**\n * Event emitted when the selected step has changed.\n */\nselectionChange = new EventEmitter<StepperSelectionEvent>();\n/**\n * The index of the step that the focus can be set.\n */\n_focusIndex: number = 0;\n/**\n * Used to track unique ID for each stepper component.\n */\n_groupId: number;\n/**\n * @param {?} _dir\n */\nconstructor(\nprivate _dir: Directionality) {\n    this._groupId = nextId++;\n  }\n/**\n * Selects and focuses the next step in list.\n * @return {?}\n */\nnext(): void {\n    this.selectedIndex = Math.min(this._selectedIndex + 1, this._steps.length - 1);\n  }\n/**\n * Selects and focuses the previous step in list.\n * @return {?}\n */\nprevious(): void {\n    this.selectedIndex = Math.max(this._selectedIndex - 1, 0);\n  }\n/**\n * Returns a unique id for each step label element.\n * @param {?} i\n * @return {?}\n */\n_getStepLabelId(i: number): string {\n    return `mat-step-label-${this._groupId}-${i}`;\n  }\n/**\n * Returns unique id for each step content element.\n * @param {?} i\n * @return {?}\n */\n_getStepContentId(i: number): string {\n    return `mat-step-content-${this._groupId}-${i}`;\n  }\n/**\n * Returns position state of the step with the given index.\n * @param {?} index\n * @return {?}\n */\n_getAnimationDirection(index: number): StepContentPositionState {\n    const /** @type {?} */ position = index - this._selectedIndex;\n    if (position < 0) {\n      return this._layoutDirection() === 'rtl' ? 'next' : 'previous';\n    } else if (position > 0) {\n      return this._layoutDirection() === 'rtl' ? 'previous' : 'next';\n    }\n    return 'current';\n  }\n/**\n * Returns the type of icon to be displayed.\n * @param {?} index\n * @return {?}\n */\n_getIndicatorType(index: number): 'number' | 'edit' | 'done' {\n    const /** @type {?} */ step = this._steps.toArray()[index];\n    if (!step.completed || this._selectedIndex == index) {\n      return 'number';\n    } else {\n      return step.editable ? 'edit' : 'done';\n    }\n  }\n/**\n * @param {?} newIndex\n * @return {?}\n */\nprivate _emitStepperSelectionEvent(newIndex: number): void {\n    const /** @type {?} */ stepsArray = this._steps.toArray();\n    this.selectionChange.emit({\n      selectedIndex: newIndex,\n      previouslySelectedIndex: this._selectedIndex,\n      selectedStep: stepsArray[newIndex],\n      previouslySelectedStep: stepsArray[this._selectedIndex],\n    });\n    this._selectedIndex = newIndex;\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        if (this._layoutDirection() === 'rtl') {\n          this._focusPreviousStep();\n        } else {\n          this._focusNextStep();\n        }\n        break;\n      case LEFT_ARROW:\n        if (this._layoutDirection() === 'rtl') {\n          this._focusNextStep();\n        } else {\n          this._focusPreviousStep();\n        }\n        break;\n      case SPACE:\n      case ENTER:\n        this.selectedIndex = this._focusIndex;\n        break;\n      default:\n        // Return to avoid calling preventDefault on keys that are not explicitly handled.\n        return;\n    }\n    event.preventDefault();\n  }\n/**\n * @return {?}\n */\nprivate _focusNextStep() {\n    this._focusStep((this._focusIndex + 1) % this._steps.length);\n  }\n/**\n * @return {?}\n */\nprivate _focusPreviousStep() {\n    this._focusStep((this._focusIndex + this._steps.length - 1) % this._steps.length);\n  }\n/**\n * @param {?} index\n * @return {?}\n */\nprivate _focusStep(index: number) {\n    this._focusIndex = index;\n    this._stepHeader.toArray()[this._focusIndex].nativeElement.focus();\n  }\n/**\n * @param {?} index\n * @return {?}\n */\nprivate _anyControlsInvalid(index: number): boolean {\n    this._steps.toArray()[this._selectedIndex].interacted = true;\n    if (this._linear && index >= 0) {\n      return this._steps.toArray().slice(0, index).some(step => step.stepControl.invalid);\n    }\n    return false;\n  }\n/**\n * @return {?}\n */\nprivate _layoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkStepper]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_steps': [{ type: ContentChildren, args: [CdkStep, ] },],\n'linear': [{ type: Input },],\n'selectedIndex': [{ type: Input },],\n'selected': [{ type: Input },],\n'selectionChange': [{ type: Output },],\n};\n}\n\nfunction CdkStepper_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkStepper.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkStepper.ctorParameters;\n/** @type {?} */\nCdkStepper.propDecorators;\n/**\n * The list of step components that the stepper is holding.\n * @type {?}\n */\nCdkStepper.prototype._steps;\n/**\n * The list of step headers of the steps in the stepper.\n * @type {?}\n */\nCdkStepper.prototype._stepHeader;\n/** @type {?} */\nCdkStepper.prototype._linear;\n/** @type {?} */\nCdkStepper.prototype._selectedIndex;\n/**\n * Event emitted when the selected step has changed.\n * @type {?}\n */\nCdkStepper.prototype.selectionChange;\n/**\n * The index of the step that the focus can be set.\n * @type {?}\n */\nCdkStepper.prototype._focusIndex;\n/**\n * Used to track unique ID for each stepper component.\n * @type {?}\n */\nCdkStepper.prototype._groupId;\n/** @type {?} */\nCdkStepper.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, TemplateRef} from '@angular/core';\nexport class CdkStepLabel {\n/**\n * @param {?} template\n */\nconstructor(public template: TemplateRef<any>) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkStepLabel]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n];\n}\n\nfunction CdkStepLabel_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkStepLabel.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkStepLabel.ctorParameters;\n/** @type {?} */\nCdkStepLabel.prototype.template;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdSortModule,SortDirection,MdSortHeader,MdSortHeaderIntl,MdSortable,Sort,MdSort,MatSort,MatSortable,MatSortHeader,MatSortHeaderIntl,MatSortModule} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdSortHeader} from './sort-header';\nimport {MdSort} from './sort';\nimport {MdSortHeaderIntl} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\nexport class MdSortModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule],\n  exports: [MdSort, MdSortHeader],\n  declarations: [MdSort, MdSortHeader],\n  providers: [MdSortHeaderIntl]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSortModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSortModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSortModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition\n} from '@angular/animations';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MdSort, MdSortable} from './sort';\nimport {MdSortHeaderIntl} from './sort-header-intl';\nimport {getMdSortHeaderNotContainedWithinMdSortError} from './sort-errors';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst /** @type {?} */ SORT_ANIMATION_TRANSITION =\n    AnimationDurations.ENTERING + ' ' + AnimationCurves.STANDARD_CURVE;\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n * \n * Must be provided with an id and contained within a parent MdSort directive.\n * \n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\nexport class MdSortHeader implements MdSortable {\nprivate _rerenderSubscription: Subscription;\n/**\n * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n * the column's name.\n */\nid: string;\n/**\n * Sets the position of the arrow that displays when sorted.\n */\narrowPosition: 'before' | 'after' = 'after';\n/**\n * Overrides the sort start value of the containing MdSort for this MdSortable.\n */\nstart: 'asc' | 'desc';\n/**\n * Overrides the disable clear value of the containing MdSort for this MdSortable.\n * @return {?}\n */\nget disableClear() { return this._disableClear; }\n/**\n * @param {?} v\n * @return {?}\n */\nset disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\nprivate _disableClear: boolean;\n/**\n * @return {?}\n */\nget _id() { return this.id; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _id(v: string) { this.id = v; }\n/**\n * @param {?} _intl\n * @param {?} changeDetectorRef\n * @param {?} _sort\n * @param {?} _cdkColumnDef\n */\nconstructor(public _intl: MdSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\npublic _sort: MdSort,\npublic _cdkColumnDef: CdkColumnDef) {\n    if (!_sort) {\n      throw getMdSortHeaderNotContainedWithinMdSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _intl.changes).subscribe(() => {\n      changeDetectorRef.markForCheck();\n    });\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    this._sort.register(this);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n/**\n * Whether this MdSortHeader is currently sorted in either ascending or descending order.\n * @return {?}\n */\n_isSorted() {\n    return this._sort.active == this.id && this._sort.direction;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: '[md-sort-header], [mat-sort-header]',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_sort.sort(this)',\n    '[class.mat-sort-header-sorted]': '_isSorted()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('indicator', [\n      state('asc', style({transform: 'translateY(0px)'})),\n      // 10px is the height of the sort indicator, minus the width of the pointers\n      state('desc', style({transform: 'translateY(10px)'})),\n      transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n    ]),\n    trigger('leftPointer', [\n      state('asc', style({transform: 'rotate(-45deg)'})),\n      state('desc', style({transform: 'rotate(45deg)'})),\n      transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n    ]),\n    trigger('rightPointer', [\n      state('asc', style({transform: 'rotate(45deg)'})),\n      state('desc', style({transform: 'rotate(-45deg)'})),\n      transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n    ])\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdSortHeaderIntl, },\n{type: ChangeDetectorRef, },\n{type: MdSort, decorators: [{ type: Optional }, ]},\n{type: CdkColumnDef, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input, args: ['md-sort-header', ] },],\n'arrowPosition': [{ type: Input },],\n'start': [{ type: Input, args: ['start', ] },],\n'disableClear': [{ type: Input },],\n'_id': [{ type: Input, args: ['mat-sort-header', ] },],\n};\n}\n\nfunction MdSortHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSortHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSortHeader.ctorParameters;\n/** @type {?} */\nMdSortHeader.propDecorators;\n/** @type {?} */\nMdSortHeader.prototype._rerenderSubscription;\n/**\n * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n * the column's name.\n * @type {?}\n */\nMdSortHeader.prototype.id;\n/**\n * Sets the position of the arrow that displays when sorted.\n * @type {?}\n */\nMdSortHeader.prototype.arrowPosition;\n/**\n * Overrides the sort start value of the containing MdSort for this MdSortable.\n * @type {?}\n */\nMdSortHeader.prototype.start;\n/** @type {?} */\nMdSortHeader.prototype._disableClear;\n/** @type {?} */\nMdSortHeader.prototype._intl;\n/** @type {?} */\nMdSortHeader.prototype._sort;\n/** @type {?} */\nMdSortHeader.prototype._cdkColumnDef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\nimport {SortDirection} from './sort-direction';\n/**\n * To modify the labels and text displayed, create a new instance of MdSortHeaderIntl and\n * include it in a custom provider.\n */\nexport class MdSortHeaderIntl {\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\n * components if the labels have changed after initialization.\n */\nchanges: Subject<void> = new Subject<void>();\n/**\n * ARIA label for the sorting button.\n */\nsortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n/**\n * A label to describe the current sort (visible only to screenreaders).\n */\nsortDescriptionLabel = (id: string, direction: SortDirection) => {\n    return `Sorted by ${id} ${direction == 'asc' ? 'ascending' : 'descending'}`;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSortHeaderIntl_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSortHeaderIntl.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSortHeaderIntl.ctorParameters;\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\n * components if the labels have changed after initialization.\n * @type {?}\n */\nMdSortHeaderIntl.prototype.changes;\n/**\n * ARIA label for the sorting button.\n * @type {?}\n */\nMdSortHeaderIntl.prototype.sortButtonLabel;\n/**\n * A label to describe the current sort (visible only to screenreaders).\n * @type {?}\n */\nMdSortHeaderIntl.prototype.sortDescriptionLabel;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, EventEmitter, Input, Output} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SortDirection} from './sort-direction';\nimport {getMdSortDuplicateMdSortableIdError, getMdSortHeaderMissingIdError} from './sort-errors';\n\nexport interface MdSortable {\n  id: string;\n  start: 'asc' | 'desc';\n  disableClear: boolean;\n}\n\nexport interface Sort {\n  active: string;\n  direction: SortDirection;\n}\n/**\n * Container for MdSortables to manage the sort state and provide default sort parameters.\n */\nexport class MdSort {\n/**\n * Collection of all registered sortables that this directive manages.\n */\nsortables = new Map<string, MdSortable>();\n/**\n * The id of the most recently sorted MdSortable.\n */\nactive: string;\n/**\n * The direction to set when an MdSortable is initially sorted.\n * May be overriden by the MdSortable's sort start.\n */\nstart: 'asc' | 'desc' = 'asc';\n/**\n * The sort direction of the currently active MdSortable.\n */\ndirection: SortDirection = '';\n/**\n * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n * May be overriden by the MdSortable's disable clear input.\n * @return {?}\n */\nget disableClear() { return this._disableClear; }\n/**\n * @param {?} v\n * @return {?}\n */\nset disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\nprivate _disableClear: boolean;\n/**\n * @return {?}\n */\nget _matSortActive() { return this.active; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matSortActive(v) { this.active = v; }\n/**\n * @return {?}\n */\nget _matSortStart() { return this.start; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matSortStart(v) { this.start = v; }\n/**\n * @return {?}\n */\nget _matSortDirection() { return this.direction; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matSortDirection(v) { this.direction = v; }\n/**\n * @return {?}\n */\nget _matSortDisableClear() { return this.disableClear; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matSortDisableClear(v) { this.disableClear = v; }\n/**\n * Event emitted when the user changes either the active sort or sort direction.\n */\nreadonly sortChange = new EventEmitter<Sort>();\n/**\n * @return {?}\n */\nget _matSortChange(): EventEmitter<Sort> { return this.sortChange; }\n/**\n * Register function to be used by the contained MdSortables. Adds the MdSortable to the\n * collection of MdSortables.\n * @param {?} sortable\n * @return {?}\n */\nregister(sortable: MdSortable) {\n    if (!sortable.id) {\n      throw getMdSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getMdSortDuplicateMdSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n/**\n * Unregister function to be used by the contained MdSortables. Removes the MdSortable from the\n * collection of contained MdSortables.\n * @param {?} sortable\n * @return {?}\n */\nderegister(sortable: MdSortable) {\n    this.sortables.delete(sortable.id);\n  }\n/**\n * Sets the active sort id and determines the new sort direction.\n * @param {?} sortable\n * @return {?}\n */\nsort(sortable: MdSortable) {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.next({active: this.active, direction: this.direction});\n  }\n/**\n * Returns the next sort direction of the active sortable, checking for potential overrides.\n * @param {?} sortable\n * @return {?}\n */\ngetNextSortDirection(sortable: MdSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const /** @type {?} */ disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let /** @type {?} */ sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let /** @type {?} */ nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdSort], [matSort]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'active': [{ type: Input, args: ['mdSortActive', ] },],\n'start': [{ type: Input, args: ['mdSortStart', ] },],\n'direction': [{ type: Input, args: ['mdSortDirection', ] },],\n'disableClear': [{ type: Input, args: ['mdSortDisableClear', ] },],\n'_matSortActive': [{ type: Input, args: ['matSortActive', ] },],\n'_matSortStart': [{ type: Input, args: ['matSortStart', ] },],\n'_matSortDirection': [{ type: Input, args: ['matSortDirection', ] },],\n'_matSortDisableClear': [{ type: Input, args: ['matSortDisableClear', ] },],\n'sortChange': [{ type: Output, args: ['mdSortChange', ] },],\n'_matSortChange': [{ type: Output, args: ['matSortChange', ] },],\n};\n}\n\nfunction MdSort_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSort.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSort.ctorParameters;\n/** @type {?} */\nMdSort.propDecorators;\n/**\n * Collection of all registered sortables that this directive manages.\n * @type {?}\n */\nMdSort.prototype.sortables;\n/**\n * The id of the most recently sorted MdSortable.\n * @type {?}\n */\nMdSort.prototype.active;\n/**\n * The direction to set when an MdSortable is initially sorted.\n * May be overriden by the MdSortable's sort start.\n * @type {?}\n */\nMdSort.prototype.start;\n/**\n * The sort direction of the currently active MdSortable.\n * @type {?}\n */\nMdSort.prototype.direction;\n/** @type {?} */\nMdSort.prototype._disableClear;\n/**\n * Event emitted when the user changes either the active sort or sort direction.\n * @type {?}\n */\nMdSort.prototype.sortChange;\n}\n\n/**\n * Returns the sort direction cycle to use given the provided parameters of order and clear.\n * @param {?} start\n * @param {?} disableClear\n * @return {?}\n */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let /** @type {?} */ sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * \\@docs-private\n * @param {?} id\n * @return {?}\n */\nexport function getMdSortDuplicateMdSortableIdError(id: string): Error {\n  return Error(`Cannot have two MdSortables with the same id (${id}).`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMdSortHeaderNotContainedWithinMdSortError(): Error {\n  return Error(`MdSortHeader must be placed within a parent element with the MdSort directive.`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMdSortHeaderMissingIdError(): Error {\n  return Error(`MdSortHeader must be provided with a unique id.`);\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {DataSource,CdkTableModule,RowPlaceholder,HeaderRowPlaceholder,CDK_TABLE_TEMPLATE,CdkTable,CdkCellDef,CdkHeaderCellDef,CdkColumnDef,CdkHeaderCell,CdkCell,CDK_ROW_TEMPLATE,BaseRowDef,CdkHeaderRowDef,CdkRowDef,CdkCellOutletRowContext,CdkCellOutlet,CdkHeaderRow,CdkRow} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {HeaderRowPlaceholder, RowPlaceholder, CdkTable} from './table';\nimport {CdkCellOutlet, CdkHeaderRow, CdkHeaderRowDef, CdkRow, CdkRowDef} from './row';\nimport {CdkColumnDef, CdkHeaderCellDef, CdkHeaderCell, CdkCell, CdkCellDef} from './cell';\n\nexport {RowPlaceholder,HeaderRowPlaceholder,CDK_TABLE_TEMPLATE,CdkTable} from './table';\nexport {CdkCellDef,CdkHeaderCellDef,CdkColumnDef,CdkHeaderCell,CdkCell} from './cell';\nexport {CDK_ROW_TEMPLATE,BaseRowDef,CdkHeaderRowDef,CdkRowDef,CdkCellOutletRowContext,CdkCellOutlet,CdkHeaderRow,CdkRow} from './row';\n\n/** Re-export DataSource for a more intuitive experience for users of just the table. */\nexport {DataSource} from '@angular/cdk/collections';\n\nconst /** @type {?} */ EXPORTED_DECLARATIONS = [\n  CdkTable,\n  CdkRowDef,\n  CdkCellDef,\n  CdkCellOutlet,\n  CdkHeaderCellDef,\n  CdkColumnDef,\n  CdkCell,\n  CdkRow,\n  CdkHeaderCell,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  RowPlaceholder,\n  HeaderRowPlaceholder,\n];\nexport class CdkTableModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule],\n  exports: [EXPORTED_DECLARATIONS],\n  declarations: [EXPORTED_DECLARATIONS]\n\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CdkTableModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkTableModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkTableModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EmbeddedViewRef,\n  Input,\n  isDevMode,\n  IterableChangeRecord,\n  IterableDiffer,\n  IterableDiffers,\n  NgIterable,\n  QueryList,\n  Renderer2,\n  TrackByFunction,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {CdkCellOutlet, CdkCellOutletRowContext, CdkHeaderRowDef, CdkRowDef} from './row';\nimport {takeUntil} from 'rxjs/operator/takeUntil';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {Subject} from 'rxjs/Subject';\nimport {CdkCellDef, CdkColumnDef, CdkHeaderCellDef} from './cell';\nimport {getTableDuplicateColumnNameError, getTableUnknownColumnError} from './table-errors';\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * \\@docs-private\n */\nexport class RowPlaceholder {\n/**\n * @param {?} viewContainer\n */\nconstructor(public viewContainer: ViewContainerRef) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[rowPlaceholder]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction RowPlaceholder_tsickle_Closure_declarations() {\n/** @type {?} */\nRowPlaceholder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRowPlaceholder.ctorParameters;\n/** @type {?} */\nRowPlaceholder.prototype.viewContainer;\n}\n\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * \\@docs-private\n */\nexport class HeaderRowPlaceholder {\n/**\n * @param {?} viewContainer\n */\nconstructor(public viewContainer: ViewContainerRef) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[headerRowPlaceholder]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction HeaderRowPlaceholder_tsickle_Closure_declarations() {\n/** @type {?} */\nHeaderRowPlaceholder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHeaderRowPlaceholder.ctorParameters;\n/** @type {?} */\nHeaderRowPlaceholder.prototype.viewContainer;\n}\n\n/**\n * The table template that can be used by the md-table. Should not be used outside of the\n * material library.\n */\nexport const CDK_TABLE_TEMPLATE = `\n  <ng-container headerRowPlaceholder></ng-container>\n  <ng-container rowPlaceholder></ng-container>`;\n/**\n * A data table that connects with a data source to retrieve data of type `T` and renders\n * a header row and data rows. Updates the rows when new data is provided by the data source.\n */\nexport class CdkTable<T> implements CollectionViewer {\n/**\n * Subject that emits when the component has been destroyed.\n */\nprivate _onDestroy = new Subject<void>();\n/**\n * Latest data provided by the data source through the connect interface.\n */\nprivate _data: NgIterable<T> = [];\n/**\n * Subscription that listens for the data provided by the data source.\n */\nprivate _renderChangeSubscription: Subscription | null;\n/**\n * Map of all the user's defined columns (header and data cell template) identified by name.\n */\nprivate _columnDefinitionsByName = new Map<string,  CdkColumnDef>();\n/**\n * Differ used to find the changes in the data provided by the data source.\n */\nprivate _dataDiffer: IterableDiffer<T>;\n/**\n * Tracking function that will be used to check the differences in data changes. Used similarly\n * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n * relative to the function to know if a row should be added/removed/moved.\n * Accepts a function that takes two parameters, `index` and `item`.\n * @param {?} fn\n * @return {?}\n */\nset trackBy(fn: TrackByFunction<T>) {\n    if (isDevMode() &&\n        fn != null && typeof fn !== 'function' && /** @type {?} */((\n        <any>console)) && /** @type {?} */(( <any>console.warn))) {\n        console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\n    }\n    this._trackByFn = fn;\n  }\n/**\n * @return {?}\n */\nget trackBy(): TrackByFunction<T> { return this._trackByFn; }\nprivate _trackByFn: TrackByFunction<T>;\n/**\n * Provides a stream containing the latest data array to render. Influenced by the table's\n * stream of view window (what rows are currently on screen).\n * @return {?}\n */\nget dataSource(): DataSource<T> { return this._dataSource; }\n/**\n * @param {?} dataSource\n * @return {?}\n */\nset dataSource(dataSource: DataSource<T>) {\n    if (this._dataSource !== dataSource) {\n      this._switchDataSource(dataSource);\n    }\n  }\nprivate _dataSource: DataSource<T>;\n/**\n * Stream containing the latest information on what rows are being displayed on screen.\n * Can be used by the data source to as a heuristic of what data should be provided.\n */\nviewChange =\n      new BehaviorSubject<{start: number, end: number}>({start: 0, end: Number.MAX_VALUE});\n\n  // Placeholders within the table's template where the header and data rows will be inserted.\n   _rowPlaceholder: RowPlaceholder;\n   _headerRowPlaceholder: HeaderRowPlaceholder;\n/**\n * The column definitions provided by the user that contain what the header and cells should\n * render for each column.\n */\n_columnDefinitions: QueryList<CdkColumnDef>;\n/**\n * Template used as the header container.\n */\n_headerDefinition: CdkHeaderRowDef;\n/**\n * Set of templates that used as the data row containers.\n */\n_rowDefinitions: QueryList<CdkRowDef>;\n/**\n * @param {?} _differs\n * @param {?} _changeDetectorRef\n * @param {?} elementRef\n * @param {?} renderer\n * @param {?} role\n */\nconstructor(private readonly _differs: IterableDiffers,\nprivate readonly _changeDetectorRef: ChangeDetectorRef,\n              elementRef: ElementRef,\n              renderer: Renderer2,\n               role: string) {\n    if (!role) {\n      renderer.setAttribute(elementRef.nativeElement, 'role', 'grid');\n    }\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    // TODO(andrewseguin): Setup a listener for scrolling, emit the calculated view to viewChange\n    this._dataDiffer = this._differs.find([]).create(this._trackByFn);\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._cacheColumnDefinitionsByName();\n    this._columnDefinitions.changes.subscribe(() => this._cacheColumnDefinitionsByName());\n    this._renderHeaderRow();\n  }\n/**\n * @return {?}\n */\nngAfterContentChecked() {\n    this._renderUpdatedColumns();\n    if (this.dataSource && !this._renderChangeSubscription) {\n      this._observeRenderChanges();\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._rowPlaceholder.viewContainer.clear();\n    this._headerRowPlaceholder.viewContainer.clear();\n    this._onDestroy.next();\n    this._onDestroy.complete();\n\n    if (this.dataSource) {\n      this.dataSource.disconnect(this);\n    }\n  }\n/**\n * Update the map containing the content's column definitions.\n * @return {?}\n */\nprivate _cacheColumnDefinitionsByName() {\n    this._columnDefinitionsByName.clear();\n    this._columnDefinitions.forEach(columnDef => {\n      if (this._columnDefinitionsByName.has(columnDef.name)) {\n        throw getTableDuplicateColumnNameError(columnDef.name);\n      }\n      this._columnDefinitionsByName.set(columnDef.name, columnDef);\n    });\n  }\n/**\n * Check if the header or rows have changed what columns they want to display. If there is a diff,\n * then re-render that section.\n * @return {?}\n */\nprivate _renderUpdatedColumns() {\n    // Re-render the rows when the row definition columns change.\n    this._rowDefinitions.forEach(rowDefinition => {\n      if (!!rowDefinition.getColumnsDiff()) {\n        // Reset the data to an empty array so that renderRowChanges will re-render all new rows.\n        this._dataDiffer.diff([]);\n\n        this._rowPlaceholder.viewContainer.clear();\n        this._renderRowChanges();\n      }\n    });\n\n    // Re-render the header row if there is a difference in its columns.\n    if (this._headerDefinition.getColumnsDiff()) {\n      this._headerRowPlaceholder.viewContainer.clear();\n      this._renderHeaderRow();\n    }\n  }\n/**\n * Switch to the provided data source by resetting the data and unsubscribing from the current\n * render change subscription if one exists. If the data source is null, interpret this by\n * clearing the row placeholder. Otherwise start listening for new data.\n * @param {?} dataSource\n * @return {?}\n */\nprivate _switchDataSource(dataSource: DataSource<T>) {\n    this._data = [];\n\n    if (this.dataSource) {\n      this.dataSource.disconnect(this);\n    }\n\n    // Stop listening for data from the previous data source.\n    if (this._renderChangeSubscription) {\n      this._renderChangeSubscription.unsubscribe();\n      this._renderChangeSubscription = null;\n    }\n\n    // Remove the table's rows if there is now no data source\n    if (!dataSource) {\n      this._rowPlaceholder.viewContainer.clear();\n    }\n\n    this._dataSource = dataSource;\n  }\n/**\n * Set up a subscription for the data provided by the data source.\n * @return {?}\n */\nprivate _observeRenderChanges() {\n    this._renderChangeSubscription = takeUntil.call(this.dataSource.connect(this), this._onDestroy)\n      .subscribe(data => {\n        this._data = data;\n        this._renderRowChanges();\n      });\n  }\n/**\n * Create the embedded view for the header template and place it in the header row view container.\n * @return {?}\n */\nprivate _renderHeaderRow() {\n    const /** @type {?} */ cells = this._getHeaderCellTemplatesForRow(this._headerDefinition);\n    if (!cells.length) { return; }\n\n    // TODO(andrewseguin): add some code to enforce that exactly\n    //   one CdkCellOutlet was instantiated as a result\n    //   of `createEmbeddedView`.\n    this._headerRowPlaceholder.viewContainer\n        .createEmbeddedView(this._headerDefinition.template, {cells});\n\n    cells.forEach(cell => {\n      CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cell.template, {});\n    });\n\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Check for changes made in the data and render each change (row added/removed/moved).\n * @return {?}\n */\nprivate _renderRowChanges() {\n    const /** @type {?} */ changes = this._dataDiffer.diff(this._data);\n    if (!changes) { return; }\n\n    const /** @type {?} */ viewContainer = this._rowPlaceholder.viewContainer;\n    changes.forEachOperation(\n        (item: IterableChangeRecord<any>, adjustedPreviousIndex: number, currentIndex: number) => {\n          if (item.previousIndex == null) {\n            this._insertRow(this._data[currentIndex], currentIndex);\n          } else if (currentIndex == null) {\n            viewContainer.remove(adjustedPreviousIndex);\n          } else {\n            const /** @type {?} */ view = viewContainer.get(adjustedPreviousIndex);\n            viewContainer.move( /** @type {?} */((view)), currentIndex);\n          }\n        });\n\n    this._updateRowContext();\n  }\n/**\n * Create the embedded view for the data row template and place it in the correct index location\n * within the data row view container.\n * @param {?} rowData\n * @param {?} index\n * @return {?}\n */\nprivate _insertRow(rowData: T, index: number) {\n    // TODO(andrewseguin): Add when predicates to the row definitions\n    //   to find the right template to used based on\n    //   the data rather than choosing the first row definition.\n    const /** @type {?} */ row = this._rowDefinitions.first;\n\n    // Row context that will be provided to both the created embedded row view and its cells.\n    const /** @type {?} */ context: CdkCellOutletRowContext<T> = {$implicit: rowData};\n\n    // TODO(andrewseguin): add some code to enforce that exactly one\n    //   CdkCellOutlet was instantiated as a result  of `createEmbeddedView`.\n    this._rowPlaceholder.viewContainer.createEmbeddedView(row.template, context, index);\n\n    // Insert empty cells if there is no data to improve rendering time.\n    const /** @type {?} */ cells = rowData ? this._getCellTemplatesForRow(row) : [];\n\n    cells.forEach(cell => {\n      CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cell.template, context);\n    });\n\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Updates the context for each row to reflect any data changes that may have caused\n * rows to be added, removed, or moved. The view container contains the same context\n * that was provided to each of its cells.\n * @return {?}\n */\nprivate _updateRowContext() {\n    const /** @type {?} */ viewContainer = this._rowPlaceholder.viewContainer;\n    for (let /** @type {?} */ index = 0, /** @type {?} */ count = viewContainer.length; index < count; index++) {\n      const /** @type {?} */ viewRef = /** @type {?} */(( viewContainer.get(index) as EmbeddedViewRef<CdkCellOutletRowContext<T>>));\n      viewRef.context.index = index;\n      viewRef.context.count = count;\n      viewRef.context.first = index === 0;\n      viewRef.context.last = index === count - 1;\n      viewRef.context.even = index % 2 === 0;\n      viewRef.context.odd = !viewRef.context.even;\n    }\n  }\n/**\n * Returns the cell template definitions to insert into the header\n * as defined by its list of columns to display.\n * @param {?} headerDef\n * @return {?}\n */\nprivate _getHeaderCellTemplatesForRow(headerDef: CdkHeaderRowDef): CdkHeaderCellDef[] {\n    if (!headerDef.columns) { return []; }\n    return headerDef.columns.map(columnId => {\n      const /** @type {?} */ column = this._columnDefinitionsByName.get(columnId);\n\n      if (!column) {\n        throw getTableUnknownColumnError(columnId);\n      }\n\n      return column.headerCell;\n    });\n  }\n/**\n * Returns the cell template definitions to insert in the provided row\n * as defined by its list of columns to display.\n * @param {?} rowDef\n * @return {?}\n */\nprivate _getCellTemplatesForRow(rowDef: CdkRowDef): CdkCellDef[] {\n    if (!rowDef.columns) { return []; }\n    return rowDef.columns.map(columnId => {\n      const /** @type {?} */ column = this._columnDefinitionsByName.get(columnId);\n\n      if (!column) {\n        throw getTableUnknownColumnError(columnId);\n      }\n\n      return column.cell;\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'cdk-table',\n  template: CDK_TABLE_TEMPLATE,\n  host: {\n    'class': 'cdk-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: IterableDiffers, },\n{type: ChangeDetectorRef, },\n{type: ElementRef, },\n{type: Renderer2, },\n{type: undefined, decorators: [{ type: Attribute, args: ['role', ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'trackBy': [{ type: Input },],\n'dataSource': [{ type: Input },],\n'_rowPlaceholder': [{ type: ViewChild, args: [RowPlaceholder, ] },],\n'_headerRowPlaceholder': [{ type: ViewChild, args: [HeaderRowPlaceholder, ] },],\n'_columnDefinitions': [{ type: ContentChildren, args: [CdkColumnDef, ] },],\n'_headerDefinition': [{ type: ContentChild, args: [CdkHeaderRowDef, ] },],\n'_rowDefinitions': [{ type: ContentChildren, args: [CdkRowDef, ] },],\n};\n}\n\nfunction CdkTable_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkTable.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkTable.ctorParameters;\n/** @type {?} */\nCdkTable.propDecorators;\n/**\n * Subject that emits when the component has been destroyed.\n * @type {?}\n */\nCdkTable.prototype._onDestroy;\n/**\n * Latest data provided by the data source through the connect interface.\n * @type {?}\n */\nCdkTable.prototype._data;\n/**\n * Subscription that listens for the data provided by the data source.\n * @type {?}\n */\nCdkTable.prototype._renderChangeSubscription;\n/**\n * Map of all the user's defined columns (header and data cell template) identified by name.\n * @type {?}\n */\nCdkTable.prototype._columnDefinitionsByName;\n/**\n * Differ used to find the changes in the data provided by the data source.\n * @type {?}\n */\nCdkTable.prototype._dataDiffer;\n/** @type {?} */\nCdkTable.prototype._trackByFn;\n/** @type {?} */\nCdkTable.prototype._dataSource;\n/**\n * Stream containing the latest information on what rows are being displayed on screen.\n * Can be used by the data source to as a heuristic of what data should be provided.\n * @type {?}\n */\nCdkTable.prototype.viewChange;\n/** @type {?} */\nCdkTable.prototype._rowPlaceholder;\n/** @type {?} */\nCdkTable.prototype._headerRowPlaceholder;\n/**\n * The column definitions provided by the user that contain what the header and cells should\n * render for each column.\n * @type {?}\n */\nCdkTable.prototype._columnDefinitions;\n/**\n * Template used as the header container.\n * @type {?}\n */\nCdkTable.prototype._headerDefinition;\n/**\n * Set of templates that used as the data row containers.\n * @type {?}\n */\nCdkTable.prototype._rowDefinitions;\n/** @type {?} */\nCdkTable.prototype._differs;\n/** @type {?} */\nCdkTable.prototype._changeDetectorRef;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Returns an error to be thrown when attempting to find an unexisting column.\n * \\@docs-private\n * @param {?} id Id whose lookup failed.\n * @return {?}\n */\nexport function getTableUnknownColumnError(id: string) {\n  return Error(`cdk-table: Could not find column with id \"${id}\".`);\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * \\@docs-private\n * @param {?} name\n * @return {?}\n */\nexport function getTableDuplicateColumnNameError(name: string) {\n  return Error(`cdk-table: Duplicate column definition name provided: \"${name}\".`);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ContentChild, Directive, ElementRef, Input, Renderer2, TemplateRef} from '@angular/core';\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nexport class CdkCellDef {\n/**\n * @param {?} template\n */\nconstructor(public template: TemplateRef<any>) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[cdkCellDef]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n];\n}\n\nfunction CdkCellDef_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkCellDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkCellDef.ctorParameters;\n/** @type {?} */\nCdkCellDef.prototype.template;\n}\n\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nexport class CdkHeaderCellDef {\n/**\n * @param {?} template\n */\nconstructor(public template: TemplateRef<any>) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[cdkHeaderCellDef]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n];\n}\n\nfunction CdkHeaderCellDef_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkHeaderCellDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkHeaderCellDef.ctorParameters;\n/** @type {?} */\nCdkHeaderCellDef.prototype.template;\n}\n\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\nexport class CdkColumnDef {\n/**\n * Unique name for this column.\n * @return {?}\n */\nget name(): string { return this._name; }\n/**\n * @param {?} name\n * @return {?}\n */\nset name(name: string) {\n    this._name = name;\n    this.cssClassFriendlyName = name.replace(/[^a-z0-9_-]/ig, '-');\n  }\n  _name: string;\n/**\n * \\@docs-private\n */\ncell: CdkCellDef;\n/**\n * \\@docs-private\n */\nheaderCell: CdkHeaderCellDef;\n/**\n * Transformed version of the column name that can be used as part of a CSS classname. Excludes\n * all non-alphanumeric characters and the special characters '-' and '_'. Any characters that\n * do not match are replaced by the '-' character.\n */\ncssClassFriendlyName: string;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[cdkColumnDef]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input, args: ['cdkColumnDef', ] },],\n'cell': [{ type: ContentChild, args: [CdkCellDef, ] },],\n'headerCell': [{ type: ContentChild, args: [CdkHeaderCellDef, ] },],\n};\n}\n\nfunction CdkColumnDef_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkColumnDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkColumnDef.ctorParameters;\n/** @type {?} */\nCdkColumnDef.propDecorators;\n/** @type {?} */\nCdkColumnDef.prototype._name;\n/**\n * \\@docs-private\n * @type {?}\n */\nCdkColumnDef.prototype.cell;\n/**\n * \\@docs-private\n * @type {?}\n */\nCdkColumnDef.prototype.headerCell;\n/**\n * Transformed version of the column name that can be used as part of a CSS classname. Excludes\n * all non-alphanumeric characters and the special characters '-' and '_'. Any characters that\n * do not match are replaced by the '-' character.\n * @type {?}\n */\nCdkColumnDef.prototype.cssClassFriendlyName;\n}\n\n/**\n * Header cell template container that adds the right classes and role.\n */\nexport class CdkHeaderCell {\n/**\n * @param {?} columnDef\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(columnDef: CdkColumnDef, elementRef: ElementRef, renderer: Renderer2) {\n    renderer.addClass(elementRef.nativeElement, `cdk-column-${columnDef.cssClassFriendlyName}`);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'cdk-header-cell',\n  host: {\n    'class': 'cdk-header-cell',\n    'role': 'columnheader',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkColumnDef, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\n}\n\nfunction CdkHeaderCell_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkHeaderCell.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkHeaderCell.ctorParameters;\n}\n\n/**\n * Cell template container that adds the right classes and role.\n */\nexport class CdkCell {\n/**\n * @param {?} columnDef\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(columnDef: CdkColumnDef, elementRef: ElementRef, renderer: Renderer2) {\n    renderer.addClass(elementRef.nativeElement, `cdk-column-${columnDef.cssClassFriendlyName}`);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'cdk-cell',\n  host: {\n    'class': 'cdk-cell',\n    'role': 'gridcell',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkColumnDef, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\n}\n\nfunction CdkCell_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkCell.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkCell.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  IterableChanges,\n  IterableDiffer,\n  IterableDiffers,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CdkCellDef} from './cell';\n/**\n * The row template that can be used by the md-table. Should not be used outside of the\n * material library.\n */\nexport const CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n * @abstract\n */\nexport abstract class BaseRowDef {\n/**\n * The columns to be displayed on this row.\n */\ncolumns: string[];\n/**\n * Differ used to check if any changes were made to the columns.\n */\nprotected _columnsDiffer: IterableDiffer<any>;\n/**\n * @param {?} template\n * @param {?} _differs\n */\nconstructor(public template: TemplateRef<any>,\n              protected _differs: IterableDiffers) { }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n    // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n    // of the columns property or an empty array if none is provided.\n    const /** @type {?} */ columns = changes['columns'].currentValue || [];\n    if (!this._columnsDiffer && columns) {\n      this._columnsDiffer = this._differs.find(columns).create();\n      this._columnsDiffer.diff(columns);\n    }\n  }\n/**\n * Returns the difference between the current columns and the columns from the last diff, or null\n * if there is no difference.\n * @return {?}\n */\ngetColumnsDiff(): IterableChanges<any> | null {\n    return this._columnsDiffer.diff(this.columns);\n  }\n}\n\nfunction BaseRowDef_tsickle_Closure_declarations() {\n/**\n * The columns to be displayed on this row.\n * @type {?}\n */\nBaseRowDef.prototype.columns;\n/**\n * Differ used to check if any changes were made to the columns.\n * @type {?}\n */\nBaseRowDef.prototype._columnsDiffer;\n/** @type {?} */\nBaseRowDef.prototype.template;\n/** @type {?} */\nBaseRowDef.prototype._differs;\n}\n\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nexport class CdkHeaderRowDef extends BaseRowDef {\n/**\n * @param {?} template\n * @param {?} _differs\n */\nconstructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkHeaderRowDef]',\n  inputs: ['columns: cdkHeaderRowDef'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n{type: IterableDiffers, },\n];\n}\n\nfunction CdkHeaderRowDef_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkHeaderRowDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkHeaderRowDef.ctorParameters;\n}\n\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display.\n */\nexport class CdkRowDef extends BaseRowDef {\n/**\n * @param {?} template\n * @param {?} _differs\n */\nconstructor(template: TemplateRef<any>, _differs: IterableDiffers) {\n    super(template, _differs);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkRowDef]',\n  inputs: ['columns: cdkRowDefColumns'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n{type: IterableDiffers, },\n];\n}\n\nfunction CdkRowDef_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkRowDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkRowDef.ctorParameters;\n}\n\n\n/** Context provided to the row cells */\nexport interface CdkCellOutletRowContext<T> {\n  /** Data for the row that this cell is located within. */\n  $implicit: T;\n\n  /** Index location of the row that this cell is located within. */\n  index?: number;\n\n  /** Length of the number of total rows. */\n  count?: number;\n\n  /** True if this cell is contained in the first row. */\n  first?: boolean;\n\n  /** True if this cell is contained in the last row. */\n  last?: boolean;\n\n  /** True if this cell is contained in a row with an even-numbered index. */\n  even?: boolean;\n\n  /** True if this cell is contained in a row with an odd-numbered index. */\n  odd?: boolean;\n}\n/**\n * Outlet for rendering cells inside of a row or header row.\n * \\@docs-private\n */\nexport class CdkCellOutlet {\n/**\n * The ordered list of cells to render within this outlet's view container\n */\ncells: CdkCellDef[];\n/**\n * The data context to be provided to each cell\n */\ncontext: any;\n/**\n * Static property containing the latest constructed instance of this class.\n * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n * createEmbeddedView. After one of these components are created, this property will provide\n * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n * construct the cells with the provided context.\n */\nstatic mostRecentCellOutlet: CdkCellOutlet;\n/**\n * @param {?} _viewContainer\n */\nconstructor(public _viewContainer: ViewContainerRef) {\n    CdkCellOutlet.mostRecentCellOutlet = this;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[cdkCellOutlet]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\n}\n\nfunction CdkCellOutlet_tsickle_Closure_declarations() {\n/**\n * Static property containing the latest constructed instance of this class.\n * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n * createEmbeddedView. After one of these components are created, this property will provide\n * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n * construct the cells with the provided context.\n * @type {?}\n */\nCdkCellOutlet.mostRecentCellOutlet;\n/** @type {?} */\nCdkCellOutlet.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkCellOutlet.ctorParameters;\n/**\n * The ordered list of cells to render within this outlet's view container\n * @type {?}\n */\nCdkCellOutlet.prototype.cells;\n/**\n * The data context to be provided to each cell\n * @type {?}\n */\nCdkCellOutlet.prototype.context;\n/** @type {?} */\nCdkCellOutlet.prototype._viewContainer;\n}\n\n/**\n * Header template container that contains the cell outlet. Adds the right class and role.\n */\nexport class CdkHeaderRow { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'cdk-header-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'cdk-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CdkHeaderRow_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkHeaderRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkHeaderRow.ctorParameters;\n}\n\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\nexport class CdkRow { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'cdk-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'cdk-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CdkRow_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkRow.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdSnackBarModule,MdSnackBar,SnackBarState,SHOW_ANIMATION,HIDE_ANIMATION,MdSnackBarContainer,MD_SNACK_BAR_DATA,MdSnackBarHorizontalPosition,MdSnackBarVerticalPosition,MdSnackBarConfig,MdSnackBarRef,SimpleSnackBar,MAT_SNACK_BAR_DATA,MatSnackBar,MatSnackBarConfig,MatSnackBarContainer,MatSnackBarModule,MatSnackBarRef} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {LIVE_ANNOUNCER_PROVIDER} from '@angular/cdk/a11y';\nimport {MdCommonModule} from '@angular/material/core';\nimport {MdSnackBar} from './snack-bar';\nimport {MdSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\nexport class MdSnackBarModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MdCommonModule,\n  ],\n  exports: [MdSnackBarContainer, MdCommonModule],\n  declarations: [MdSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MdSnackBarContainer, SimpleSnackBar],\n  providers: [MdSnackBar, LIVE_ANNOUNCER_PROVIDER]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSnackBarModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBarModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSnackBarModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf } from '@angular/core';\nimport {Overlay, OverlayRef, OverlayConfig} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {PortalInjector} from '@angular/material/core';\nimport {extendObject} from '@angular/material/core';\nimport {MD_SNACK_BAR_DATA, MdSnackBarConfig} from './snack-bar-config';\nimport {MdSnackBarRef} from './snack-bar-ref';\nimport {MdSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nexport class MdSnackBar {\n/**\n * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n * If there is a parent snack-bar service, all operations should delegate to that parent\n * via `_openedSnackBarRef`.\n */\nprivate _snackBarRefAtThisLevel: MdSnackBarRef<any> | null = null;\n/**\n * Reference to the currently opened snackbar at *any* level.\n * @return {?}\n */\nget _openedSnackBarRef(): MdSnackBarRef<any> | null {\n    const /** @type {?} */ parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset _openedSnackBarRef(value: MdSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n/**\n * @param {?} _overlay\n * @param {?} _live\n * @param {?} _injector\n * @param {?} _parentSnackBar\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _live: LiveAnnouncer,\nprivate _injector: Injector,\nprivate _parentSnackBar: MdSnackBar) {}\n/**\n * Creates and dispatches a snack bar with a custom component for the content, removing any\n * currently opened snack bars.\n * \n * @template T\n * @param {?} component Component to be instantiated.\n * @param {?=} config Extra configuration for the snack bar.\n * @return {?}\n */\nopenFromComponent<T>(component: ComponentType<T>, config?: MdSnackBarConfig): MdSnackBarRef<T> {\n    const /** @type {?} */ _config = _applyConfigDefaults(config);\n    const /** @type {?} */ snackBarRef = this._attach(component, _config);\n\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (_config.duration && _config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter( /** @type {?} */(( /** @type {?} */((_config)).duration))));\n    }\n\n    if (_config.announcementMessage) {\n      this._live.announce(_config.announcementMessage, _config.politeness);\n    }\n\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n/**\n * Opens a snackbar with a message and an optional action.\n * @param {?} message The message to show in the snackbar.\n * @param {?=} action The label for the snackbar action.\n * @param {?=} config Additional configuration options for the snackbar.\n * @return {?}\n */\nopen(message: string, action = '', config?: MdSnackBarConfig): MdSnackBarRef<SimpleSnackBar> {\n    const /** @type {?} */ _config = _applyConfigDefaults(config);\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n/**\n * Dismisses the currently-visible snack bar.\n * @return {?}\n */\ndismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n/**\n * Attaches the snack bar container component to the overlay.\n * @param {?} overlayRef\n * @param {?} config\n * @return {?}\n */\nprivate _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MdSnackBarConfig): MdSnackBarContainer {\n    const /** @type {?} */ containerPortal = new ComponentPortal(MdSnackBarContainer, config.viewContainerRef);\n    const /** @type {?} */ containerRef: ComponentRef<MdSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n/**\n * Places a new component as the content of the snack bar container.\n * @template T\n * @param {?} component\n * @param {?} config\n * @return {?}\n */\nprivate _attach<T>(component: ComponentType<T>, config: MdSnackBarConfig): MdSnackBarRef<T> {\n    const /** @type {?} */ overlayRef = this._createOverlay(config);\n    const /** @type {?} */ container = this._attachSnackBarContainer(overlayRef, config);\n    const /** @type {?} */ snackBarRef = new MdSnackBarRef<T>(container, overlayRef);\n    const /** @type {?} */ injector = this._createInjector(config, snackBarRef);\n    const /** @type {?} */ portal = new ComponentPortal(component, undefined, injector);\n    const /** @type {?} */ contentRef = container.attachComponentPortal(portal);\n\n    // We can't pass this via the injector, because the injector is created earlier.\n    snackBarRef.instance = contentRef.instance;\n\n    return snackBarRef;\n  }\n/**\n * Creates a new overlay and places it in the correct location.\n * @param {?} config The user-specified snack bar config.\n * @return {?}\n */\nprivate _createOverlay(config: MdSnackBarConfig): OverlayRef {\n    const /** @type {?} */ state = new OverlayConfig();\n    state.direction = config.direction;\n\n    let /** @type {?} */ positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const /** @type {?} */ isRtl = config.direction === 'rtl';\n    const /** @type {?} */ isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const /** @type {?} */ isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    state.positionStrategy = positionStrategy;\n    return this._overlay.create(state);\n  }\n/**\n * Creates an injector to be used inside of a snack bar component.\n * @template T\n * @param {?} config Config that was used to create the snack bar.\n * @param {?} snackBarRef Reference to the snack bar.\n * @return {?}\n */\nprivate _createInjector<T>(\n      config: MdSnackBarConfig,\n      snackBarRef: MdSnackBarRef<T>): PortalInjector {\n\n    const /** @type {?} */ userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const /** @type {?} */ injectionTokens = new WeakMap();\n\n    injectionTokens.set(MdSnackBarRef, snackBarRef);\n    injectionTokens.set(MD_SNACK_BAR_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: LiveAnnouncer, },\n{type: Injector, },\n{type: MdSnackBar, decorators: [{ type: Optional }, { type: SkipSelf }, ]},\n];\n}\n\nfunction MdSnackBar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSnackBar.ctorParameters;\n/**\n * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n * If there is a parent snack-bar service, all operations should delegate to that parent\n * via `_openedSnackBarRef`.\n * @type {?}\n */\nMdSnackBar.prototype._snackBarRefAtThisLevel;\n/** @type {?} */\nMdSnackBar.prototype._overlay;\n/** @type {?} */\nMdSnackBar.prototype._live;\n/** @type {?} */\nMdSnackBar.prototype._injector;\n/** @type {?} */\nMdSnackBar.prototype._parentSnackBar;\n}\n\n/**\n * Applies default options to the snackbar config.\n * @param {?=} config The configuration to which the defaults will be applied.\n * @return {?} The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MdSnackBarConfig): MdSnackBarConfig {\n  return extendObject(new MdSnackBarConfig(), config);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MdSnackBarRef} from './snack-bar-ref';\nimport {MD_SNACK_BAR_DATA} from './snack-bar-config';\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nexport class SimpleSnackBar {\n/**\n * Data that was injected into the snack bar.\n */\ndata: { message: string, action: string };\n/**\n * @param {?} snackBarRef\n * @param {?} data\n */\nconstructor(\npublic snackBarRef: MdSnackBarRef<SimpleSnackBar>,\n     data: any) {\n    this.data = data;\n  }\n/**\n * Performs the action on the snack bar.\n * @return {?}\n */\naction(): void {\n    this.snackBarRef.closeWithAction();\n  }\n/**\n * If the action button should be shown.\n * @return {?}\n */\nget hasAction(): boolean {\n    return !!this.data.action;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdSnackBarRef, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_SNACK_BAR_DATA, ] }, ]},\n];\n}\n\nfunction SimpleSnackBar_tsickle_Closure_declarations() {\n/** @type {?} */\nSimpleSnackBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSimpleSnackBar.ctorParameters;\n/**\n * Data that was injected into the snack bar.\n * @type {?}\n */\nSimpleSnackBar.prototype.data;\n/** @type {?} */\nSimpleSnackBar.prototype.snackBarRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  NgZone,\n  OnDestroy,\n  Renderer2,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n  AnimationEvent,\n} from '@angular/animations';\nimport {\n  BasePortalHost,\n  ComponentPortal,\n  PortalHostDirective,\n} from '@angular/cdk/portal';\nimport {first} from '@angular/cdk/rxjs';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MdSnackBarConfig} from './snack-bar-config';\n\n\nexport type SnackBarState = 'visible' | 'hidden' | 'void';\n\n// TODO(jelbourn): we can't use constants from animation.ts here because you can't use\n// a text interpolation in anything that is analyzed statically with ngc (for AoT compile).\nexport const /** @type {?} */ SHOW_ANIMATION = '225ms cubic-bezier(0.4,0.0,1,1)';\nexport const /** @type {?} */ HIDE_ANIMATION = '195ms cubic-bezier(0.0,0.0,0.2,1)';\n/**\n * Internal component that wraps user-provided snack bar content.\n * \\@docs-private\n */\nexport class MdSnackBarContainer extends BasePortalHost implements OnDestroy {\n/**\n * Whether the component has been destroyed.\n */\nprivate _destroyed = false;\n/**\n * The portal host inside of this container into which the snack bar content will be loaded.\n */\n_portalHost: PortalHostDirective;\n/**\n * Subject for notifying that the snack bar has exited from view.\n */\n_onExit: Subject<any> = new Subject();\n/**\n * Subject for notifying that the snack bar has finished entering the view.\n */\n_onEnter: Subject<any> = new Subject();\n/**\n * The state of the snack bar animations.\n */\nprivate _animationState: SnackBarState;\n/**\n * The snack bar configuration.\n */\nsnackBarConfig: MdSnackBarConfig;\n/**\n * @param {?} _ngZone\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _changeDetectorRef\n */\nconstructor(\nprivate _ngZone: NgZone,\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef) {\n    super();\n  }\n/**\n * Gets the current animation state both combining one of the possibilities from\n * SnackBarState and the vertical location.\n * @return {?}\n */\ngetAnimationState(): string {\n    return `${this._animationState}-${this.snackBarConfig.verticalPosition}`;\n  }\n/**\n * Attach a component portal as content to this snack bar container.\n * @template T\n * @param {?} portal\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalHost.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n\n    if (this.snackBarConfig.extraClasses) {\n      // Not the most efficient way of adding classes, but the renderer doesn't allow us\n      // to pass in an array or a space-separated list.\n      for (let /** @type {?} */ cssClass of this.snackBarConfig.extraClasses) {\n        this._renderer.addClass(this._elementRef.nativeElement, cssClass);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      this._renderer.addClass(this._elementRef.nativeElement, 'mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      this._renderer.addClass(this._elementRef.nativeElement, 'mat-snack-bar-top');\n    }\n\n    return this._portalHost.attachComponentPortal(portal);\n  }\n/**\n * Attach a template portal as content to this snack bar container.\n * @return {?}\n */\nattachTemplatePortal(): EmbeddedViewRef<any> {\n    throw Error('Not yet implemented');\n  }\n/**\n * Handle end of animations, updating the state of the snackbar.\n * @param {?} event\n * @return {?}\n */\nonAnimationEnd(event: AnimationEvent) {\n    if (event.toState === 'void' || event.toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (event.toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const /** @type {?} */ onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n/**\n * Begin animation of snack bar entrance into view.\n * @return {?}\n */\nenter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n/**\n * Begin animation of the snack bar exiting from view.\n * @return {?}\n */\nexit(): Observable<void> {\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n/**\n * Makes sure the exit callbacks have been invoked when the element is destroyed.\n * @return {?}\n */\nngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n/**\n * Waits for the zone to settle before removing the element. Helps prevent\n * errors where we end up removing an element which is in the middle of an animation.\n * @return {?}\n */\nprivate _completeExit() {\n    first.call(this._ngZone.onMicrotaskEmpty.asObservable()).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': 'getAnimationState()',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n  animations: [\n    trigger('state', [\n      // Animation from top.\n      state('visible-top', style({transform: 'translateY(0%)'})),\n      state('hidden-top', style({transform: 'translateY(-100%)'})),\n      transition('visible-top => hidden-top', animate(HIDE_ANIMATION)),\n      transition('void => visible-top', animate(SHOW_ANIMATION)),\n      // Animation from bottom.\n      state('visible-bottom', style({transform: 'translateY(0%)'})),\n      state('hidden-bottom', style({transform: 'translateY(100%)'})),\n      transition('visible-bottom => hidden-bottom', animate(HIDE_ANIMATION)),\n      transition('void => visible-bottom',\n        animate(SHOW_ANIMATION)),\n    ])\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: Renderer2, },\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalHost': [{ type: ViewChild, args: [PortalHostDirective, ] },],\n};\n}\n\nfunction MdSnackBarContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSnackBarContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSnackBarContainer.ctorParameters;\n/** @type {?} */\nMdSnackBarContainer.propDecorators;\n/**\n * Whether the component has been destroyed.\n * @type {?}\n */\nMdSnackBarContainer.prototype._destroyed;\n/**\n * The portal host inside of this container into which the snack bar content will be loaded.\n * @type {?}\n */\nMdSnackBarContainer.prototype._portalHost;\n/**\n * Subject for notifying that the snack bar has exited from view.\n * @type {?}\n */\nMdSnackBarContainer.prototype._onExit;\n/**\n * Subject for notifying that the snack bar has finished entering the view.\n * @type {?}\n */\nMdSnackBarContainer.prototype._onEnter;\n/**\n * The state of the snack bar animations.\n * @type {?}\n */\nMdSnackBarContainer.prototype._animationState;\n/**\n * The snack bar configuration.\n * @type {?}\n */\nMdSnackBarContainer.prototype.snackBarConfig;\n/** @type {?} */\nMdSnackBarContainer.prototype._ngZone;\n/** @type {?} */\nMdSnackBarContainer.prototype._renderer;\n/** @type {?} */\nMdSnackBarContainer.prototype._elementRef;\n/** @type {?} */\nMdSnackBarContainer.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MdSnackBarContainer} from './snack-bar-container';\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MdSnackBarRef<T> {\n/**\n * The instance of the component making up the content of the snack bar.\n */\ninstance: T;\n/**\n * The instance of the component making up the content of the snack bar.\n * \\@docs-private\n */\ncontainerInstance: MdSnackBarContainer;\n/**\n * Subject for notifying the user that the snack bar has closed.\n */\nprivate _afterClosed = new Subject<void>();\n/**\n * Subject for notifying the user that the snack bar has opened and appeared.\n */\nprivate _afterOpened = new Subject<void>();\n/**\n * Subject for notifying the user that the snack bar action was called.\n */\nprivate _onAction = new Subject<void>();\n/**\n * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n * dismissed before the duration passes.\n */\nprivate _durationTimeoutId: number;\n/**\n * @param {?} containerInstance\n * @param {?} _overlayRef\n */\nconstructor(containerInstance: MdSnackBarContainer,\nprivate _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n/**\n * Dismisses the snack bar.\n * @return {?}\n */\ndismiss(): void {\n    if (!this._afterClosed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n/**\n * Marks the snackbar action clicked.\n * @return {?}\n */\ncloseWithAction(): void {\n    if (!this._onAction.closed) {\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n/**\n * Dismisses the snack bar after some duration\n * @param {?} duration\n * @return {?}\n */\n_dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n/**\n * Marks the snackbar as opened\n * @return {?}\n */\n_open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n/**\n * Cleans up the DOM after closing.\n * @return {?}\n */\nprivate _finishDismiss(): void {\n    this._overlayRef.dispose();\n    this._afterClosed.next();\n    this._afterClosed.complete();\n  }\n/**\n * Gets an observable that is notified when the snack bar is finished closing.\n * @return {?}\n */\nafterDismissed(): Observable<void> {\n    return this._afterClosed.asObservable();\n  }\n/**\n * Gets an observable that is notified when the snack bar has opened and appeared.\n * @return {?}\n */\nafterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n/**\n * Gets an observable that is notified when the snack bar action is called.\n * @return {?}\n */\nonAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n\nfunction MdSnackBarRef_tsickle_Closure_declarations() {\n/**\n * The instance of the component making up the content of the snack bar.\n * @type {?}\n */\nMdSnackBarRef.prototype.instance;\n/**\n * The instance of the component making up the content of the snack bar.\n * \\@docs-private\n * @type {?}\n */\nMdSnackBarRef.prototype.containerInstance;\n/**\n * Subject for notifying the user that the snack bar has closed.\n * @type {?}\n */\nMdSnackBarRef.prototype._afterClosed;\n/**\n * Subject for notifying the user that the snack bar has opened and appeared.\n * @type {?}\n */\nMdSnackBarRef.prototype._afterOpened;\n/**\n * Subject for notifying the user that the snack bar action was called.\n * @type {?}\n */\nMdSnackBarRef.prototype._onAction;\n/**\n * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n * dismissed before the duration passes.\n * @type {?}\n */\nMdSnackBarRef.prototype._durationTimeoutId;\n/** @type {?} */\nMdSnackBarRef.prototype._overlayRef;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\nexport const /** @type {?} */ MD_SNACK_BAR_DATA = new InjectionToken<any>('MdSnackBarData');\n\n/** Possible values for horizontalPosition on MdSnackBarConfig. */\nexport type MdSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MdSnackBarConfig. */\nexport type MdSnackBarVerticalPosition = 'top' | 'bottom';\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MdSnackBarConfig {\n/**\n * The politeness level for the MdAriaLiveAnnouncer announcement.\n */\npoliteness?: AriaLivePoliteness = 'assertive';\n/**\n * Message to be announced by the MdAriaLiveAnnouncer\n */\nannouncementMessage?: string = '';\n/**\n * The view container to place the overlay for the snack bar into.\n */\nviewContainerRef?: ViewContainerRef;\n/**\n * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n */\nduration?: number = 0;\n/**\n * Extra CSS classes to be added to the snack bar container.\n */\nextraClasses?: string[];\n/**\n * Text layout direction for the snack bar.\n */\ndirection?: Direction = 'ltr';\n/**\n * Data being injected into the child component.\n */\ndata?: any = null;\n/**\n * The horizontal position to place the snack bar.\n */\nhorizontalPosition?: MdSnackBarHorizontalPosition = 'center';\n/**\n * The vertical position to place the snack bar.\n */\nverticalPosition?: MdSnackBarVerticalPosition = 'bottom';\n}\n\nfunction MdSnackBarConfig_tsickle_Closure_declarations() {\n/**\n * The politeness level for the MdAriaLiveAnnouncer announcement.\n * @type {?}\n */\nMdSnackBarConfig.prototype.politeness;\n/**\n * Message to be announced by the MdAriaLiveAnnouncer\n * @type {?}\n */\nMdSnackBarConfig.prototype.announcementMessage;\n/**\n * The view container to place the overlay for the snack bar into.\n * @type {?}\n */\nMdSnackBarConfig.prototype.viewContainerRef;\n/**\n * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n * @type {?}\n */\nMdSnackBarConfig.prototype.duration;\n/**\n * Extra CSS classes to be added to the snack bar container.\n * @type {?}\n */\nMdSnackBarConfig.prototype.extraClasses;\n/**\n * Text layout direction for the snack bar.\n * @type {?}\n */\nMdSnackBarConfig.prototype.direction;\n/**\n * Data being injected into the child component.\n * @type {?}\n */\nMdSnackBarConfig.prototype.data;\n/**\n * The horizontal position to place the snack bar.\n * @type {?}\n */\nMdSnackBarConfig.prototype.horizontalPosition;\n/**\n * The vertical position to place the snack bar.\n * @type {?}\n */\nMdSnackBarConfig.prototype.verticalPosition;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {CommonModule} from '@angular/common';\nimport {MdCommonModule, GestureConfig} from '@angular/material/core';\nimport {MdSlider} from './slider';\nimport {BidiModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nexport class MdSliderModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MdCommonModule, BidiModule, A11yModule],\n  exports: [MdSlider, MdCommonModule],\n  declarations: [MdSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSliderModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSliderModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSliderModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  Renderer2,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  mixinColor,\n  mixinDisabled,\n} from '@angular/material/core';\nimport {FocusOrigin, FocusMonitor} from '@angular/cdk/a11y';\nimport {Subscription} from 'rxjs/Subscription';\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n/**\n * The thumb gap size for a disabled slider.\n */\nconst DISABLED_THUMB_GAP = 7;\n/**\n * The thumb gap size for a non-active slider at its minimum value.\n */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n/**\n * The thumb gap size for an active slider at its minimum value.\n */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n/**\n * Provider Expression that allows md-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MD_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdSlider),\n  multi: true\n};\n/**\n * A simple change event emitted by the MdSlider component.\n */\nexport class MdSliderChange {\n/**\n * The MdSlider that changed.\n */\nsource: MdSlider;\n/**\n * The new value of the source slider.\n */\nvalue: number | null;\n}\n\nfunction MdSliderChange_tsickle_Closure_declarations() {\n/**\n * The MdSlider that changed.\n * @type {?}\n */\nMdSliderChange.prototype.source;\n/**\n * The new value of the source slider.\n * @type {?}\n */\nMdSliderChange.prototype.value;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdSliderBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdSliderBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSliderBase.prototype._renderer;\n/** @type {?} */\nMdSliderBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdSliderMixinBase = mixinColor(mixinDisabled(MdSliderBase), 'accent');\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\nexport class MdSlider extends _MdSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit {\n/**\n * Whether the slider is inverted.\n * @return {?}\n */\nget invert() { return this._invert; }\n/**\n * @param {?} value\n * @return {?}\n */\nset invert(value: any) {\n    this._invert = coerceBooleanProperty(value);\n  }\nprivate _invert = false;\n/**\n * The maximum value that the slider can have.\n * @return {?}\n */\nget max() { return this._max; }\n/**\n * @param {?} v\n * @return {?}\n */\nset max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\nprivate _max: number = 100;\n/**\n * The minimum value that the slider can have.\n * @return {?}\n */\nget min() { return this._min; }\n/**\n * @param {?} v\n * @return {?}\n */\nset min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\nprivate _min: number = 0;\n/**\n * The values at which the thumb will snap.\n * @return {?}\n */\nget step() { return this._step; }\n/**\n * @param {?} v\n * @return {?}\n */\nset step(v) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = /** @type {?} */(( this._step.toString().split('.').pop())).length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\nprivate _step: number = 1;\n/**\n * Whether or not to show the thumb label.\n * @return {?}\n */\nget thumbLabel(): boolean { return this._thumbLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset thumbLabel(value) { this._thumbLabel = coerceBooleanProperty(value); }\nprivate _thumbLabel: boolean = false;\n/**\n * @deprecated\n * @return {?}\n */\nget _thumbLabelDeprecated(): boolean { return this._thumbLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _thumbLabelDeprecated(value) { this._thumbLabel = value; }\n/**\n * How often to show ticks. Relative to the step so that a tick always appears on a step.\n * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n * @return {?}\n */\nget tickInterval() { return this._tickInterval; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tickInterval(value) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, /** @type {?} */(( this._tickInterval as number)));\n    } else {\n      this._tickInterval = 0;\n    }\n  }\nprivate _tickInterval: 'auto' | number = 0;\n/**\n * @deprecated\n * @return {?}\n */\nget _tickIntervalDeprecated() { return this.tickInterval; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _tickIntervalDeprecated(v) { this.tickInterval = v; }\n/**\n * Value of the slider.\n * @return {?}\n */\nget value() {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: number | null) {\n    if (v !== this._value) {\n      this._value = coerceNumberProperty(v, this._value || 0);\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\nprivate _value: number | null = null;\n/**\n * Whether the slider is vertical.\n * @return {?}\n */\nget vertical() { return this._vertical; }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value: any) {\n    this._vertical = coerceBooleanProperty(value);\n  }\nprivate _vertical = false;\n/**\n * Event emitted when the slider value has changed.\n */\nchange = new EventEmitter<MdSliderChange>();\n/**\n * Event emitted when the slider thumb moves.\n */\ninput = new EventEmitter<MdSliderChange>();\n/**\n * The value to be used for display purposes.\n * @return {?}\n */\nget displayValue(): string | number {\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value || 0;\n  }\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n */\nonTouched: () => any = () => {};\n/**\n * The percentage of the slider that coincides with the value.\n * @return {?}\n */\nget percent() { return this._clamp(this._percent); }\nprivate _percent: number = 0;\n/**\n * Whether or not the thumb is sliding.\n * Used to determine if there should be a transition for the thumb and fill track.\n */\n_isSliding: boolean = false;\n/**\n * Whether or not the slider is active (clicked or sliding).\n * Used to shrink and grow the thumb as according to the Material Design spec.\n */\n_isActive: boolean = false;\n/**\n * Whether the axis of the slider is inverted.\n * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n * @return {?}\n */\nget _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n/**\n * Whether the slider is at its minimum value.\n * @return {?}\n */\nget _isMinValue() {\n    return this.percent === 0;\n  }\n/**\n * The amount of space to leave between the slider thumb and the track fill & track background\n * elements.\n * @return {?}\n */\nget _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n/**\n * CSS styles for the track background element.\n * @return {?}\n */\nget _trackBackgroundStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    let /** @type {?} */ sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n/**\n * CSS styles for the track fill element.\n * @return {?}\n */\nget _trackFillStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    let /** @type {?} */ sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n/**\n * CSS styles for the ticks container element.\n * @return {?}\n */\nget _ticksContainerStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let /** @type {?} */ sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let /** @type {?} */ offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n/**\n * CSS styles for the ticks element.\n * @return {?}\n */\nget _ticksStyles(): { [key: string]: string } {\n    let /** @type {?} */ tickSize = this._tickIntervalPercent * 100;\n    let /** @type {?} */ backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let /** @type {?} */ sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let /** @type {?} */ rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let /** @type {?} */ styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let /** @type {?} */ side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n/**\n * @return {?}\n */\nget _thumbContainerStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let /** @type {?} */ invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let /** @type {?} */ offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n/**\n * The size of a tick interval as a percentage of the size of the track.\n */\nprivate _tickIntervalPercent: number = 0;\n/**\n * The dimensions of the slider.\n */\nprivate _sliderDimensions: ClientRect | null = null;\nprivate _controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * Decimal places to round to, based on the step amount.\n */\nprivate _roundLabelTo: number;\n/**\n * Subscription to the Directionality change EventEmitter.\n */\nprivate _dirChangeSubscription = Subscription.EMPTY;\n/**\n * The value of the slider when the slide start event fires.\n */\nprivate _valueOnSlideStart: number | null;\n/**\n * Reference to the inner slider wrapper element.\n */\nprivate _sliderWrapper: ElementRef;\n/**\n * Whether mouse events should be converted to a slider position by calculating their distance\n * from the right or bottom edge of the slider as opposed to the top or left.\n * @return {?}\n */\nprivate get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n/**\n * The language direction for this slider element.\n * @return {?}\n */\nprivate get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _focusMonitor\n * @param {?} _changeDetectorRef\n * @param {?} _dir\n */\nconstructor(renderer: Renderer2,\n              elementRef: ElementRef,\nprivate _focusMonitor: FocusMonitor,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _dir: Directionality) {\n    super(renderer, elementRef);\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, this._renderer, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n/**\n * @return {?}\n */\n_onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let /** @type {?} */ oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    /* Emit a change and input event if the value changed. */\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let /** @type {?} */ oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onSlideStart(event: HammerInput | null) {\n    if (this.disabled) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n/**\n * @return {?}\n */\n_onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n/**\n * @return {?}\n */\n_onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n/**\n * @return {?}\n */\n_onBlur() {\n    this.onTouched();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let /** @type {?} */ oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n/**\n * @return {?}\n */\n_onKeyup() {\n    this._isSliding = false;\n  }\n/**\n * Increments the slider by the given number of steps (negative number decrements).\n * @param {?} numSteps\n * @return {?}\n */\nprivate _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n/**\n * Calculate the new value from the new physical location. The value will always be snapped.\n * @param {?} pos\n * @return {?}\n */\nprivate _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let /** @type {?} */ offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let /** @type {?} */ size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let /** @type {?} */ posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let /** @type {?} */ percent = this._clamp((posComponent - offset) / size);\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n    let /** @type {?} */ exactValue = this._calculateValue(percent);\n\n    // This calculation finds the closest step by finding the closest whole number divisible by the\n    // step relative to the min.\n    let /** @type {?} */ closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n    // The value needs to snap to the min and max.\n    this.value = this._clamp(closestValue, this.min, this.max);\n  }\n/**\n * Emits a change event if the current value is different from the last emitted value.\n * @return {?}\n */\nprivate _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n/**\n * Emits an input event when the current value is different from the last emitted value.\n * @return {?}\n */\nprivate _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n/**\n * Updates the amount of space between ticks as a percentage of the width of the slider.\n * @return {?}\n */\nprivate _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let /** @type {?} */ trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let /** @type {?} */ pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let /** @type {?} */ stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let /** @type {?} */ pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n/**\n * Creates a slider change object from the specified value.\n * @param {?=} value\n * @return {?}\n */\nprivate _createChangeEvent(value = this.value): MdSliderChange {\n    let /** @type {?} */ event = new MdSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n/**\n * Calculates the percentage of the slider that a value is.\n * @param {?} value\n * @return {?}\n */\nprivate _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n/**\n * Calculates the value a percentage of the slider corresponds to.\n * @param {?} percentage\n * @return {?}\n */\nprivate _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n/**\n * Return a number between two numbers.\n * @param {?} value\n * @param {?=} min\n * @param {?=} max\n * @return {?}\n */\nprivate _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n/**\n * Get the bounding client rect of the slider track element.\n * The track is used rather than the native element to ignore the extra space that the thumb can\n * take up.\n * @return {?}\n */\nprivate _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n/**\n * Focuses the native element.\n * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n * @return {?}\n */\nprivate _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any) {\n    this.value = value;\n  }\n/**\n * Registers a callback to eb triggered when the value has changed.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback to be triggered when the component is touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Sets whether the component should be disabled.\n * Implemented as part of ControlValueAccessor.\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-slider, mat-slider',\n  providers: [MD_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    'tabindex': '0',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: FocusMonitor, },\n{type: ChangeDetectorRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'invert': [{ type: Input },],\n'max': [{ type: Input },],\n'min': [{ type: Input },],\n'step': [{ type: Input },],\n'thumbLabel': [{ type: Input },],\n'_thumbLabelDeprecated': [{ type: Input, args: ['thumb-label', ] },],\n'tickInterval': [{ type: Input },],\n'_tickIntervalDeprecated': [{ type: Input, args: ['tick-interval', ] },],\n'value': [{ type: Input },],\n'vertical': [{ type: Input },],\n'change': [{ type: Output },],\n'input': [{ type: Output },],\n'_sliderWrapper': [{ type: ViewChild, args: ['sliderWrapper', ] },],\n};\n}\n\nfunction MdSlider_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlider.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSlider.ctorParameters;\n/** @type {?} */\nMdSlider.propDecorators;\n/** @type {?} */\nMdSlider.prototype._invert;\n/** @type {?} */\nMdSlider.prototype._max;\n/** @type {?} */\nMdSlider.prototype._min;\n/** @type {?} */\nMdSlider.prototype._step;\n/** @type {?} */\nMdSlider.prototype._thumbLabel;\n/** @type {?} */\nMdSlider.prototype._tickInterval;\n/** @type {?} */\nMdSlider.prototype._value;\n/** @type {?} */\nMdSlider.prototype._vertical;\n/**\n * Event emitted when the slider value has changed.\n * @type {?}\n */\nMdSlider.prototype.change;\n/**\n * Event emitted when the slider thumb moves.\n * @type {?}\n */\nMdSlider.prototype.input;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * @type {?}\n */\nMdSlider.prototype.onTouched;\n/** @type {?} */\nMdSlider.prototype._percent;\n/**\n * Whether or not the thumb is sliding.\n * Used to determine if there should be a transition for the thumb and fill track.\n * @type {?}\n */\nMdSlider.prototype._isSliding;\n/**\n * Whether or not the slider is active (clicked or sliding).\n * Used to shrink and grow the thumb as according to the Material Design spec.\n * @type {?}\n */\nMdSlider.prototype._isActive;\n/**\n * The size of a tick interval as a percentage of the size of the track.\n * @type {?}\n */\nMdSlider.prototype._tickIntervalPercent;\n/**\n * The dimensions of the slider.\n * @type {?}\n */\nMdSlider.prototype._sliderDimensions;\n/** @type {?} */\nMdSlider.prototype._controlValueAccessorChangeFn;\n/**\n * Decimal places to round to, based on the step amount.\n * @type {?}\n */\nMdSlider.prototype._roundLabelTo;\n/**\n * Subscription to the Directionality change EventEmitter.\n * @type {?}\n */\nMdSlider.prototype._dirChangeSubscription;\n/**\n * The value of the slider when the slide start event fires.\n * @type {?}\n */\nMdSlider.prototype._valueOnSlideStart;\n/**\n * Reference to the inner slider wrapper element.\n * @type {?}\n */\nMdSlider.prototype._sliderWrapper;\n/** @type {?} */\nMdSlider.prototype._focusMonitor;\n/** @type {?} */\nMdSlider.prototype._changeDetectorRef;\n/** @type {?} */\nMdSlider.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdSlideToggleModule,MD_SLIDE_TOGGLE_VALUE_ACCESSOR,MdSlideToggleChange,MdSlideToggleBase,_MdSlideToggleMixinBase,MdSlideToggle,MAT_SLIDE_TOGGLE_VALUE_ACCESSOR,MatSlideToggle,MatSlideToggleBase,MatSlideToggleChange,MatSlideToggleModule} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {\n  GestureConfig,\n  MdCommonModule,\n  MdRippleModule,\n} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MdSlideToggle} from './slide-toggle';\nexport class MdSlideToggleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdRippleModule, MdCommonModule, PlatformModule, ObserversModule, A11yModule],\n  exports: [MdSlideToggle, MdCommonModule],\n  declarations: [MdSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSlideToggleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSlideToggleModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  Renderer2,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  applyCssTransform,\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MATERIAL_COMPATIBILITY_MODE,\n  MdRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet /** @type {?} */ nextUniqueId = 0;\n\nexport const /** @type {?} */ MD_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdSlideToggle),\n  multi: true\n};\n/**\n * Change event object emitted by a MdSlideToggle.\n */\nexport class MdSlideToggleChange {\n  source: MdSlideToggle;\n  checked: boolean;\n}\n\nfunction MdSlideToggleChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggleChange.prototype.source;\n/** @type {?} */\nMdSlideToggleChange.prototype.checked;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdSlideToggleBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdSlideToggleBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggleBase.prototype._renderer;\n/** @type {?} */\nMdSlideToggleBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MdSlideToggleBase)), 'accent'));\n/**\n * Represents a slidable \"switch\" toggle that can be moved between on and off.\n */\nexport class MdSlideToggle extends _MdSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\nprivate onChange = (_: any) => {};\nprivate onTouched = () => {};\nprivate _uniqueId: string = `md-slide-toggle-${++nextUniqueId}`;\nprivate _slideRenderer: SlideToggleRenderer;\nprivate _required: boolean = false;\nprivate _checked: boolean = false;\n/**\n * Reference to the focus state ripple.\n */\nprivate _focusRipple: RippleRef | null;\n/**\n * Name value will be applied to the input element if present\n */\nname: string | null = null;\n/**\n * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n */\nid: string = this._uniqueId;\n/**\n * Whether the label should appear after or before the slide-toggle. Defaults to 'after'\n */\nlabelPosition: 'before' | 'after' = 'after';\n/**\n * Used to set the aria-label attribute on the underlying input element.\n */\nariaLabel: string | null = null;\n/**\n * Used to set the aria-labelledby attribute on the underlying input element.\n */\nariaLabelledby: string | null = null;\n/**\n * Whether the slide-toggle is required.\n * @return {?}\n */\nget required(): boolean { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value) { this._required = coerceBooleanProperty(value); }\n/**\n * Whether the slide-toggle element is checked or not\n * @return {?}\n */\nget checked(): boolean { return this._checked; }\n/**\n * @param {?} value\n * @return {?}\n */\nset checked(value) {\n    this._checked = !!value;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * An event will be dispatched each time the slide-toggle changes its value.\n */\nchange: EventEmitter<MdSlideToggleChange> = new EventEmitter<MdSlideToggleChange>();\n/**\n * Returns the unique id for the visual hidden input.\n * @return {?}\n */\nget inputId(): string { return `${this.id || this._uniqueId}-input`; }\n/**\n * Reference to the underlying input element.\n */\n_inputElement: ElementRef;\n/**\n * Reference to the ripple directive on the thumb container.\n */\n_ripple: MdRipple;\n/**\n * @param {?} elementRef\n * @param {?} renderer\n * @param {?} _platform\n * @param {?} _focusMonitor\n * @param {?} _changeDetectorRef\n * @param {?} tabIndex\n */\nconstructor(elementRef: ElementRef,\n              renderer: Renderer2,\nprivate _platform: Platform,\nprivate _focusMonitor: FocusMonitor,\nprivate _changeDetectorRef: ChangeDetectorRef,\n               tabIndex: string) {\n    super(renderer, elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\n\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement, this._renderer, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n/**\n * This function will called if the underlying input changed its value through user interaction.\n * @param {?} event\n * @return {?}\n */\n_onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Sync the value from the underlying input element with the slide-toggle component.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event if the native input emitted one.\n    // It is important to only emit it, if the native input triggered one, because we don't want\n    // to trigger a change event, when the `checked` variable changes programmatically.\n    this._emitChangeEvent();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // In some situations the user will release the mouse on the label element. The label element\n    // redirects the click to the underlying input element and will result in a value change.\n    // Prevent the default behavior if dragging, because the value will be set after drag.\n    if (this._slideRenderer.dragging) {\n      event.preventDefault();\n    }\n\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n/**\n * Implemented as part of ControlValueAccessor.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n    this.checked = !!value;\n  }\n/**\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n/**\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n/**\n * Implemented as a part of ControlValueAccessor.\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Focuses the slide-toggle.\n * @return {?}\n */\nfocus() {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n/**\n * Toggles the checked state of the slide-toggle.\n * @return {?}\n */\ntoggle() {\n    this.checked = !this.checked;\n  }\n/**\n * Function is called whenever the focus changes for the input element.\n * @param {?} focusOrigin\n * @return {?}\n */\nprivate _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, centered: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n/**\n * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n * @return {?}\n */\nprivate _emitChangeEvent() {\n    let /** @type {?} */ event = new MdSlideToggleChange();\n    event.source = this;\n    event.checked = this.checked;\n    this.change.emit(event);\n    this.onChange(this.checked);\n  }\n/**\n * @return {?}\n */\n_onDragStart() {\n    if (!this.disabled) {\n      this._slideRenderer.startThumbDrag(this.checked);\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onDrag(event: HammerInput) {\n    if (this._slideRenderer.dragging) {\n      this._slideRenderer.updateThumbPosition(event.deltaX);\n    }\n  }\n/**\n * @return {?}\n */\n_onDragEnd() {\n    if (this._slideRenderer.dragging) {\n      let /** @type {?} */ _previousChecked = this.checked;\n      this.checked = this._slideRenderer.dragPercentage > 50;\n\n      if (_previousChecked !== this.checked) {\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, because otherwise the\n      // click event will be fired before and will revert the drag change.\n      setTimeout(() => this._slideRenderer.stopThumbDrag());\n    }\n  }\n/**\n * Method being called whenever the label text changes.\n * @return {?}\n */\n_onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-slide-toggle, mat-slide-toggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MD_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: Platform, },\n{type: FocusMonitor, },\n{type: ChangeDetectorRef, },\n{type: undefined, decorators: [{ type: Attribute, args: ['tabindex', ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input },],\n'id': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'required': [{ type: Input },],\n'checked': [{ type: Input },],\n'change': [{ type: Output },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n'_ripple': [{ type: ViewChild, args: [MdRipple, ] },],\n};\n}\n\nfunction MdSlideToggle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSlideToggle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSlideToggle.ctorParameters;\n/** @type {?} */\nMdSlideToggle.propDecorators;\n/** @type {?} */\nMdSlideToggle.prototype.onChange;\n/** @type {?} */\nMdSlideToggle.prototype.onTouched;\n/** @type {?} */\nMdSlideToggle.prototype._uniqueId;\n/** @type {?} */\nMdSlideToggle.prototype._slideRenderer;\n/** @type {?} */\nMdSlideToggle.prototype._required;\n/** @type {?} */\nMdSlideToggle.prototype._checked;\n/**\n * Reference to the focus state ripple.\n * @type {?}\n */\nMdSlideToggle.prototype._focusRipple;\n/**\n * Name value will be applied to the input element if present\n * @type {?}\n */\nMdSlideToggle.prototype.name;\n/**\n * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n * @type {?}\n */\nMdSlideToggle.prototype.id;\n/**\n * Whether the label should appear after or before the slide-toggle. Defaults to 'after'\n * @type {?}\n */\nMdSlideToggle.prototype.labelPosition;\n/**\n * Used to set the aria-label attribute on the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype.ariaLabel;\n/**\n * Used to set the aria-labelledby attribute on the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype.ariaLabelledby;\n/**\n * An event will be dispatched each time the slide-toggle changes its value.\n * @type {?}\n */\nMdSlideToggle.prototype.change;\n/**\n * Reference to the underlying input element.\n * @type {?}\n */\nMdSlideToggle.prototype._inputElement;\n/**\n * Reference to the ripple directive on the thumb container.\n * @type {?}\n */\nMdSlideToggle.prototype._ripple;\n/** @type {?} */\nMdSlideToggle.prototype._platform;\n/** @type {?} */\nMdSlideToggle.prototype._focusMonitor;\n/** @type {?} */\nMdSlideToggle.prototype._changeDetectorRef;\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\n/**\n * Reference to the thumb HTMLElement.\n */\nprivate _thumbEl: HTMLElement;\n/**\n * Reference to the thumb bar HTMLElement.\n */\nprivate _thumbBarEl: HTMLElement;\n/**\n * Width of the thumb bar of the slide-toggle.\n */\nprivate _thumbBarWidth: number;\n/**\n * Previous checked state before drag started.\n */\nprivate _previousChecked: boolean;\n/**\n * Percentage of the thumb while dragging. Percentage as fraction of 100.\n */\ndragPercentage: number;\n/**\n * Whether the thumb is currently being dragged.\n */\ndragging: boolean = false;\n/**\n * @param {?} elementRef\n * @param {?} platform\n */\nconstructor(elementRef: ElementRef, platform: Platform) {\n    // We only need to interact with these elements when we're on the browser, so only grab\n    // the reference in that case.\n    if (platform.isBrowser) {\n      this._thumbEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n      this._thumbBarEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n    }\n  }\n/**\n * Initializes the drag of the slide-toggle.\n * @param {?} checked\n * @return {?}\n */\nstartThumbDrag(checked: boolean) {\n    if (this.dragging) { return; }\n\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n    this._thumbEl.classList.add('mat-dragging');\n\n    this._previousChecked = checked;\n    this.dragging = true;\n  }\n/**\n * Resets the current drag and returns the new checked value.\n * @return {?}\n */\nstopThumbDrag(): boolean {\n    if (!this.dragging) { return false; }\n\n    this.dragging = false;\n    this._thumbEl.classList.remove('mat-dragging');\n\n    // Reset the transform because the component will take care of the thumb position after drag.\n    applyCssTransform(this._thumbEl, '');\n\n    return this.dragPercentage > 50;\n  }\n/**\n * Updates the thumb containers position from the specified distance.\n * @param {?} distance\n * @return {?}\n */\nupdateThumbPosition(distance: number) {\n    this.dragPercentage = this._getDragPercentage(distance);\n    // Calculate the moved distance based on the thumb bar width.\n    let /** @type {?} */ dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n    applyCssTransform(this._thumbEl, `translate3d(${dragX}px, 0, 0)`);\n  }\n/**\n * Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100.\n * @param {?} distance\n * @return {?}\n */\nprivate _getDragPercentage(distance: number) {\n    let /** @type {?} */ percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n}\n\nfunction SlideToggleRenderer_tsickle_Closure_declarations() {\n/**\n * Reference to the thumb HTMLElement.\n * @type {?}\n */\nSlideToggleRenderer.prototype._thumbEl;\n/**\n * Reference to the thumb bar HTMLElement.\n * @type {?}\n */\nSlideToggleRenderer.prototype._thumbBarEl;\n/**\n * Width of the thumb bar of the slide-toggle.\n * @type {?}\n */\nSlideToggleRenderer.prototype._thumbBarWidth;\n/**\n * Previous checked state before drag started.\n * @type {?}\n */\nSlideToggleRenderer.prototype._previousChecked;\n/**\n * Percentage of the thumb while dragging. Percentage as fraction of 100.\n * @type {?}\n */\nSlideToggleRenderer.prototype.dragPercentage;\n/**\n * Whether the thumb is currently being dragged.\n * @type {?}\n */\nSlideToggleRenderer.prototype.dragging;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdSidenavModule,throwMdDuplicatedDrawerError,MdDrawerToggleResult,MdDrawer,MdDrawerContainer,MdSidenav,MdSidenavContainer,MatDrawerToggleResult,MatDrawer,MatDrawerContainer,MatSidenav,MatSidenavContainer,MatSidenavModule} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MdCommonModule} from '@angular/material/core';\nimport {MdDrawer, MdDrawerContainer} from './drawer';\nimport {MdSidenav, MdSidenavContainer} from './sidenav';\nexport class MdSidenavModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MdCommonModule, A11yModule, OverlayModule],\n  exports: [MdDrawerContainer, MdDrawer, MdSidenavContainer, MdSidenav, MdCommonModule],\n  declarations: [MdDrawerContainer, MdDrawer, MdSidenavContainer, MdSidenav],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSidenavModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenavModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSidenavModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  ViewEncapsulation\n} from '@angular/core';\nimport {MdDrawer, MdDrawerContainer} from './drawer';\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nexport class MdSidenav extends MdDrawer {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-sidenav, mat-sidenav',\n  templateUrl: 'drawer.html',\n  animations: [\n    trigger('transform', [\n      state('open, open-instant', style({\n        transform: 'translate3d(0, 0, 0)',\n        visibility: 'visible',\n      })),\n      state('void', style({\n        visibility: 'hidden',\n      })),\n      transition('void => open-instant', animate('0ms')),\n      transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n    ])\n  ],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart()',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSidenav_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenav.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSidenav.ctorParameters;\n}\n\nexport class MdSidenavContainer extends MdDrawerContainer {\n   _drawers;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-sidenav-container, mat-sidenav-container',\n  templateUrl: 'drawer-container.html',\n  styleUrls: [\n    'drawer.css',\n    'drawer-transitions.css',\n  ],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_drawers': [{ type: ContentChildren, args: [MdSidenav, ] },],\n};\n}\n\nfunction MdSidenavContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSidenavContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSidenavContainer.ctorParameters;\n/** @type {?} */\nMdSidenavContainer.propDecorators;\n/** @type {?} */\nMdSidenavContainer.prototype._drawers;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {animate, AnimationEvent, state, style, transition, trigger} from '@angular/animations';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  Renderer2,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ESCAPE, first, startWith, takeUntil} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\n/**\n * Throws an exception when two MdDrawer are matching the same position.\n * @param {?} position\n * @return {?}\n */\nexport function throwMdDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n/**\n * Drawer toggle promise result.\n * @deprecated\n */\nexport class MdDrawerToggleResult {\n/**\n * @param {?} type\n * @param {?} animationFinished\n */\nconstructor(public type: 'open' | 'close',\npublic animationFinished: boolean) {}\n}\n\nfunction MdDrawerToggleResult_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDrawerToggleResult.prototype.type;\n/** @type {?} */\nMdDrawerToggleResult.prototype.animationFinished;\n}\n\n/**\n * <md-drawer> component.\n * \n * This component corresponds to a drawer that can be opened on the drawer container.\n * \n * Please refer to README.md for examples on how to use it.\n */\nexport class MdDrawer implements AfterContentInit, OnDestroy {\nprivate _focusTrap: FocusTrap;\nprivate _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n/**\n * Whether the drawer is initialized. Used for disabling the initial animation.\n */\nprivate _enableAnimations = false;\n/**\n * The side that the drawer is attached to.\n * @return {?}\n */\nget position() { return this._position; }\n/**\n * @param {?} value\n * @return {?}\n */\nset position(value) {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onAlignChanged.emit();\n      this.onPositionChanged.emit();\n    }\n  }\nprivate _position: 'start' | 'end' = 'start';\n/**\n * @deprecated\n * @return {?}\n */\nget align() { return this.position; }\n/**\n * @param {?} value\n * @return {?}\n */\nset align(value) { this.position = value; }\n/**\n * Mode of the drawer; one of 'over', 'push' or 'side'.\n */\nmode: 'over' | 'push' | 'side' = 'over';\n/**\n * Whether the drawer can be closed with the escape key or by clicking on the backdrop.\n * @return {?}\n */\nget disableClose(): boolean { return this._disableClose; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\nprivate _disableClose: boolean = false;\n/**\n * Whether the drawer is opened.\n */\nprivate _opened: boolean = false;\n/**\n * Emits whenever the drawer has started animating.\n */\n_animationStarted = new EventEmitter<void>();\n/**\n * Whether the drawer is animating. Used to prevent overlapping animations.\n */\n_isAnimating = false;\n/**\n * Current state of the sidenav animation.\n */\n_animationState: 'open-instant' | 'open' | 'void' = 'void';\n/**\n * Promise that resolves when the open/close animation completes. It is here for backwards\n * compatibility and should be removed next time we do drawer breaking changes.\n * @deprecated\n */\nprivate _currentTogglePromise: Promise<MdDrawerToggleResult> | null;\n/**\n * Event emitted when the drawer is fully opened.\n */\nonOpen = new EventEmitter<MdDrawerToggleResult | void>();\n/**\n * Event emitted when the drawer is fully closed.\n */\nonClose = new EventEmitter<MdDrawerToggleResult | void>();\n/**\n * Event emitted when the drawer's position changes.\n */\nonPositionChanged = new EventEmitter<void>();\n/**\n * @deprecated\n */\nonAlignChanged = new EventEmitter<void>();\n/**\n * @return {?}\n */\nget isFocusTrapEnabled() {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n/**\n * @param {?} _elementRef\n * @param {?} _focusTrapFactory\n * @param {?} _doc\n */\nconstructor(private _elementRef: ElementRef,\nprivate _focusTrapFactory: FocusTrapFactory,\nprivate _doc: any) {\n    this.onOpen.subscribe(() => {\n      if (this._doc) {\n        this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n      }\n\n      if (this.isFocusTrapEnabled && this._focusTrap) {\n        this._focusTrap.focusInitialElementWhenReady();\n      }\n    });\n\n    this.onClose.subscribe(() => this._restoreFocus());\n  }\n/**\n * If focus is currently inside the drawer, restores it to where it was before the drawer\n * opened.\n * @return {?}\n */\nprivate _restoreFocus() {\n    let /** @type {?} */ activeEl = this._doc && this._doc.activeElement;\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._elementFocusedBeforeDrawerWasOpened.focus();\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this.isFocusTrapEnabled;\n    this._enableAnimations = true;\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n/**\n * Whether the drawer is opened. We overload this because we trigger an event when it\n * starts or end.\n * @return {?}\n */\nget opened(): boolean { return this._opened; }\n/**\n * @param {?} v\n * @return {?}\n */\nset opened(v: boolean) {\n    this.toggle(coerceBooleanProperty(v));\n  }\n/**\n * Open the drawer.\n * @return {?}\n */\nopen(): Promise<MdDrawerToggleResult> {\n    return this.toggle(true);\n  }\n/**\n * Close the drawer.\n * @return {?}\n */\nclose(): Promise<MdDrawerToggleResult> {\n    return this.toggle(false);\n  }\n/**\n * Toggle this drawer.\n * @param {?=} isOpen Whether the drawer should be open.\n * @return {?}\n */\ntoggle(isOpen: boolean = !this.opened): Promise<MdDrawerToggleResult> {\n    if (!this._isAnimating) {\n      this._opened = isOpen;\n\n      if (isOpen) {\n        this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      } else {\n        this._animationState = 'void';\n      }\n\n      this._currentTogglePromise = new Promise(resolve => {\n        first.call(isOpen ? this.onOpen : this.onClose).subscribe(resolve);\n      });\n\n      if (this._focusTrap) {\n        this._focusTrap.enabled = this.isFocusTrapEnabled;\n      }\n    }\n\n    // TODO(crisbeto): This promise is here for backwards-compatibility.\n    // It should be removed next time we do breaking changes in the drawer.\n    return /** @type {?} */(( this._currentTogglePromise));\n  }\n/**\n * Handles the keyboard events.\n * \\@docs-private\n * @param {?} event\n * @return {?}\n */\nhandleKeydown(event: KeyboardEvent) {\n    if (event.keyCode === ESCAPE && !this.disableClose) {\n      this.close();\n      event.stopPropagation();\n    }\n  }\n/**\n * @return {?}\n */\n_onAnimationStart() {\n    this._isAnimating = true;\n    this._animationStarted.emit();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if (toState === 'open' && fromState === 'void') {\n      this.onOpen.emit(new MdDrawerToggleResult('open', true));\n    } else if (toState === 'void' && fromState === 'open') {\n      this.onClose.emit(new MdDrawerToggleResult('close', true));\n    }\n\n    // Note: as of Angular 4.3, the animations module seems to fire the `start` callback before\n    // the end if animations are disabled. Make this call async to ensure that it still fires\n    // at the appropriate time.\n    Promise.resolve().then(() => {\n      this._isAnimating = false;\n      this._currentTogglePromise = null;\n    });\n  }\n/**\n * @return {?}\n */\nget _width() {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-drawer, mat-drawer',\n  templateUrl: 'drawer.html',\n  animations: [\n    trigger('transform', [\n      state('open, open-instant', style({\n        transform: 'translate3d(0, 0, 0)',\n        visibility: 'visible',\n      })),\n      state('void', style({\n        visibility: 'hidden',\n      })),\n      transition('void => open-instant', animate('0ms')),\n      transition('void <=> open, open-instant => void',\n          animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n    ])\n  ],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart()',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: FocusTrapFactory, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'position': [{ type: Input },],\n'align': [{ type: Input },],\n'mode': [{ type: Input },],\n'disableClose': [{ type: Input },],\n'onOpen': [{ type: Output, args: ['open', ] },],\n'onClose': [{ type: Output, args: ['close', ] },],\n'onPositionChanged': [{ type: Output, args: ['positionChanged', ] },],\n'onAlignChanged': [{ type: Output, args: ['align-changed', ] },],\n'opened': [{ type: Input },],\n};\n}\n\nfunction MdDrawer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDrawer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDrawer.ctorParameters;\n/** @type {?} */\nMdDrawer.propDecorators;\n/** @type {?} */\nMdDrawer.prototype._focusTrap;\n/** @type {?} */\nMdDrawer.prototype._elementFocusedBeforeDrawerWasOpened;\n/**\n * Whether the drawer is initialized. Used for disabling the initial animation.\n * @type {?}\n */\nMdDrawer.prototype._enableAnimations;\n/** @type {?} */\nMdDrawer.prototype._position;\n/**\n * Mode of the drawer; one of 'over', 'push' or 'side'.\n * @type {?}\n */\nMdDrawer.prototype.mode;\n/** @type {?} */\nMdDrawer.prototype._disableClose;\n/**\n * Whether the drawer is opened.\n * @type {?}\n */\nMdDrawer.prototype._opened;\n/**\n * Emits whenever the drawer has started animating.\n * @type {?}\n */\nMdDrawer.prototype._animationStarted;\n/**\n * Whether the drawer is animating. Used to prevent overlapping animations.\n * @type {?}\n */\nMdDrawer.prototype._isAnimating;\n/**\n * Current state of the sidenav animation.\n * @type {?}\n */\nMdDrawer.prototype._animationState;\n/**\n * Promise that resolves when the open/close animation completes. It is here for backwards\n * compatibility and should be removed next time we do drawer breaking changes.\n * @deprecated\n * @type {?}\n */\nMdDrawer.prototype._currentTogglePromise;\n/**\n * Event emitted when the drawer is fully opened.\n * @type {?}\n */\nMdDrawer.prototype.onOpen;\n/**\n * Event emitted when the drawer is fully closed.\n * @type {?}\n */\nMdDrawer.prototype.onClose;\n/**\n * Event emitted when the drawer's position changes.\n * @type {?}\n */\nMdDrawer.prototype.onPositionChanged;\n/**\n * @deprecated\n * @type {?}\n */\nMdDrawer.prototype.onAlignChanged;\n/** @type {?} */\nMdDrawer.prototype._elementRef;\n/** @type {?} */\nMdDrawer.prototype._focusTrapFactory;\n/** @type {?} */\nMdDrawer.prototype._doc;\n}\n\n/**\n * <md-drawer-container> component.\n * \n * This is the parent component to one or two <md-drawer>s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\nexport class MdDrawerContainer implements AfterContentInit, OnDestroy {\n   _drawers: QueryList<MdDrawer>;\n/**\n * The drawer child with the `start` position.\n * @return {?}\n */\nget start() { return this._start; }\n/**\n * The drawer child with the `end` position.\n * @return {?}\n */\nget end() { return this._end; }\n/**\n * Event emitted when the drawer backdrop is clicked.\n */\nbackdropClick = new EventEmitter<void>();\n/**\n * The drawer at the start/end position, independent of direction.\n */\nprivate _start: MdDrawer | null;\nprivate _end: MdDrawer | null;\n/**\n * The drawer at the left/right. When direction changes, these will change as well.\n * They're used as aliases for the above to set the left/right style properly.\n * In LTR, _left == _start and _right == _end.\n * In RTL, _left == _end and _right == _start.\n */\nprivate _left: MdDrawer | null;\nprivate _right: MdDrawer | null;\n/**\n * Subscription to the Directionality change EventEmitter.\n */\nprivate _dirChangeSubscription = Subscription.EMPTY;\n/**\n * Inline styles to be applied to the container.\n */\n_styles: { marginLeft: string; marginRight: string; transform: string; };\n/**\n * @param {?} _dir\n * @param {?} _element\n * @param {?} _renderer\n * @param {?} _ngZone\n * @param {?} _changeDetectorRef\n */\nconstructor(\nprivate _dir: Directionality,\nprivate _element: ElementRef,\nprivate _renderer: Renderer2,\nprivate _ngZone: NgZone,\nprivate _changeDetectorRef: ChangeDetectorRef) {\n    // If a `Dir` directive exists up the tree, listen direction changes and update the left/right\n    // properties to point to the proper start/end.\n    if (_dir != null) {\n      this._dirChangeSubscription = _dir.change.subscribe(() => this._validateDrawers());\n    }\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    startWith.call(this._drawers.changes, null).subscribe(() => {\n      this._validateDrawers();\n      this._drawers.forEach((drawer: MdDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n      });\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n  }\n/**\n * Calls `open` of both start and end drawers\n * @return {?}\n */\nopen(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n/**\n * Calls `close` of both start and end drawers\n * @return {?}\n */\nclose(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n/**\n * Subscribes to drawer events in order to set a class on the main container element when the\n * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n * is properly hidden.\n * @param {?} drawer\n * @return {?}\n */\nprivate _watchDrawerToggle(drawer: MdDrawer): void {\n    takeUntil.call(drawer._animationStarted, this._drawers.changes).subscribe(() => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      this._renderer.addClass(this._element.nativeElement, 'mat-drawer-transition');\n      this._updateStyles();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      takeUntil.call(merge(drawer.onOpen, drawer.onClose), this._drawers.changes).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n/**\n * Subscribes to drawer onPositionChanged event in order to re-validate drawers when the position\n * changes.\n * @param {?} drawer\n * @return {?}\n */\nprivate _watchDrawerPosition(drawer: MdDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    takeUntil.call(drawer.onPositionChanged, this._drawers.changes).subscribe(() => {\n      first.call(this._ngZone.onMicrotaskEmpty.asObservable()).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n/**\n * Toggles the 'mat-drawer-opened' class on the main 'md-drawer-container' element.\n * @param {?} isAdd\n * @return {?}\n */\nprivate _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._renderer.addClass(this._element.nativeElement, 'mat-drawer-opened');\n    } else {\n      this._renderer.removeClass(this._element.nativeElement, 'mat-drawer-opened');\n    }\n  }\n/**\n * Validate the state of the drawer children components.\n * @return {?}\n */\nprivate _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMdDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMdDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir == null || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n/**\n * @return {?}\n */\n_onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n/**\n * @return {?}\n */\n_closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && drawer.mode !== 'side')\n      .forEach(drawer => /** @type {?} */(( drawer)).close());\n  }\n/**\n * @return {?}\n */\n_isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && /** @type {?} */(( this._start)).mode != 'side')\n        || (this._isDrawerOpen(this._end) && /** @type {?} */(( this._end)).mode != 'side');\n  }\n/**\n * @param {?} drawer\n * @return {?}\n */\nprivate _isDrawerOpen(drawer: MdDrawer | null): boolean {\n    return drawer != null && drawer.opened;\n  }\n/**\n * Return the width of the drawer, if it's in the proper mode and opened.\n * This may relayout the view, so do not call this often.\n * @param {?} drawer\n * @param {?} mode\n * @return {?}\n */\nprivate _getDrawerEffectiveWidth(drawer: MdDrawer, mode: string): number {\n    return (this._isDrawerOpen(drawer) && drawer.mode == mode) ? drawer._width : 0;\n  }\n/**\n * Recalculates and updates the inline styles. Note that this\n * should be used sparingly, because it causes a reflow.\n * @return {?}\n */\nprivate _updateStyles() {\n    const /** @type {?} */ marginLeft = this._left ? this._getDrawerEffectiveWidth(this._left, 'side') : 0;\n    const /** @type {?} */ marginRight = this._right ? this._getDrawerEffectiveWidth(this._right, 'side') : 0;\n    const /** @type {?} */ leftWidth = this._left ? this._getDrawerEffectiveWidth(this._left, 'push') : 0;\n    const /** @type {?} */ rightWidth = this._right ? this._getDrawerEffectiveWidth(this._right, 'push') : 0;\n\n    this._styles = {\n      marginLeft: `${marginLeft}px`,\n      marginRight: `${marginRight}px`,\n      transform: `translate3d(${leftWidth - rightWidth}px, 0, 0)`\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-drawer-container, mat-drawer-container',\n  templateUrl: 'drawer-container.html',\n  styleUrls: [\n    'drawer.css',\n    'drawer-transitions.css',\n  ],\n  host: {\n    'class': 'mat-drawer-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: ElementRef, },\n{type: Renderer2, },\n{type: NgZone, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_drawers': [{ type: ContentChildren, args: [MdDrawer, ] },],\n'backdropClick': [{ type: Output },],\n};\n}\n\nfunction MdDrawerContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDrawerContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDrawerContainer.ctorParameters;\n/** @type {?} */\nMdDrawerContainer.propDecorators;\n/** @type {?} */\nMdDrawerContainer.prototype._drawers;\n/**\n * Event emitted when the drawer backdrop is clicked.\n * @type {?}\n */\nMdDrawerContainer.prototype.backdropClick;\n/**\n * The drawer at the start/end position, independent of direction.\n * @type {?}\n */\nMdDrawerContainer.prototype._start;\n/** @type {?} */\nMdDrawerContainer.prototype._end;\n/**\n * The drawer at the left/right. When direction changes, these will change as well.\n * They're used as aliases for the above to set the left/right style properly.\n * In LTR, _left == _start and _right == _end.\n * In RTL, _left == _end and _right == _start.\n * @type {?}\n */\nMdDrawerContainer.prototype._left;\n/** @type {?} */\nMdDrawerContainer.prototype._right;\n/**\n * Subscription to the Directionality change EventEmitter.\n * @type {?}\n */\nMdDrawerContainer.prototype._dirChangeSubscription;\n/**\n * Inline styles to be applied to the container.\n * @type {?}\n */\nMdDrawerContainer.prototype._styles;\n/** @type {?} */\nMdDrawerContainer.prototype._dir;\n/** @type {?} */\nMdDrawerContainer.prototype._element;\n/** @type {?} */\nMdDrawerContainer.prototype._renderer;\n/** @type {?} */\nMdDrawerContainer.prototype._ngZone;\n/** @type {?} */\nMdDrawerContainer.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdRadioModule,MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,MdRadioChange,MdRadioGroupBase,_MdRadioGroupMixinBase,MdRadioGroup,MdRadioButtonBase,_MdRadioButtonMixinBase,MdRadioButton,MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,MatRadioButton,MatRadioButtonBase,MatRadioChange,MatRadioGroup,MatRadioGroupBase,MatRadioModule} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {VIEWPORT_RULER_PROVIDER} from '@angular/cdk/overlay';\nimport {\n  MdRippleModule,\n  MdCommonModule,\n  UNIQUE_SELECTION_DISPATCHER_PROVIDER,\n} from '@angular/material/core';\nimport {MdRadioGroup, MdRadioButton} from './radio';\nimport {A11yModule} from '@angular/cdk/a11y';\nexport class MdRadioModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MdRippleModule, MdCommonModule, A11yModule],\n  exports: [MdRadioGroup, MdRadioButton, MdCommonModule],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER, VIEWPORT_RULER_PROVIDER],\n  declarations: [MdRadioGroup, MdRadioButton],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRadioModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRadioModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Renderer2,\n  EventEmitter,\n  Input,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  forwardRef,\n  ViewChild,\n  OnDestroy,\n  AfterViewInit,\n} from '@angular/core';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\nimport {\n  RippleRef,\n  UniqueSelectionDispatcher,\n  MdRipple, MATERIAL_COMPATIBILITY_MODE,\n} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {mixinDisabled, CanDisable} from '@angular/material/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\n\n// Increasing integer for generating unique ids for radio components.\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Provider Expression that allows md-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * \\@docs-private\n */\nexport const MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdRadioGroup),\n  multi: true\n};\n/**\n * Change event object emitted by MdRadio and MdRadioGroup.\n */\nexport class MdRadioChange {\n/**\n * The MdRadioButton that emits the change event.\n */\nsource: MdRadioButton | null;\n/**\n * The value of the MdRadioButton.\n */\nvalue: any;\n}\n\nfunction MdRadioChange_tsickle_Closure_declarations() {\n/**\n * The MdRadioButton that emits the change event.\n * @type {?}\n */\nMdRadioChange.prototype.source;\n/**\n * The value of the MdRadioButton.\n * @type {?}\n */\nMdRadioChange.prototype.value;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdRadioGroupBase { }\nexport const /** @type {?} */ _MdRadioGroupMixinBase = mixinDisabled(MdRadioGroupBase);\n/**\n * A group of radio buttons. May contain one or more `<md-radio-button>` elements.\n */\nexport class MdRadioGroup extends _MdRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n/**\n * Selected value for group. Should equal the value of the selected radio button if there *is*\n * a corresponding radio button with a matching value. If there is *not* such a corresponding\n * radio button, this value persists to be applied in case a new radio button is added with a\n * matching value.\n */\nprivate _value: any = null;\n/**\n * The HTML name attribute applied to radio buttons in this group.\n */\nprivate _name: string = `md-radio-group-${nextUniqueId++}`;\n/**\n * The currently selected radio button. Should match value.\n */\nprivate _selected: MdRadioButton | null = null;\n/**\n * Whether the `value` has been set to its initial value.\n */\nprivate _isInitialized: boolean = false;\n/**\n * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n */\nprivate _labelPosition: 'before' | 'after' = 'after';\n/**\n * Whether the radio group is disabled.\n */\nprivate _disabled: boolean = false;\n/**\n * Whether the radio group is required.\n */\nprivate _required: boolean = false;\n/**\n * The method to be called in order to update ngModel\n */\n_controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * \\@docs-private\n */\nonTouched: () => any = () => {};\n/**\n * Event emitted when the group value changes.\n * Change events are only emitted when the value changes due to user interaction with\n * a radio button (the same behavior as `<input type-\"radio\">`).\n */\nchange: EventEmitter<MdRadioChange> = new EventEmitter<MdRadioChange>();\n/**\n * Child radio buttons.\n */\n_radios: QueryList<MdRadioButton>;\n/**\n * Name of the radio button group. All radio buttons inside this group will use this name.\n * @return {?}\n */\nget name(): string { return this._name; }\n/**\n * @param {?} value\n * @return {?}\n */\nset name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n/**\n * Alignment of the radio-buttons relative to their labels. Can be 'before' or 'after'.\n * @deprecated\n * @return {?}\n */\nget align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n/**\n * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n * @return {?}\n */\nget labelPosition() {\n    return this._labelPosition;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset labelPosition(v) {\n    this._labelPosition = (v == 'before') ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n/**\n * Value of the radio button.\n * @return {?}\n */\nget value(): any { return this._value; }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\n    if (this._value != newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n/**\n * @return {?}\n */\n_checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n/**\n * Whether the radio button is selected.\n * @return {?}\n */\nget selected() { return this._selected; }\n/**\n * @param {?} selected\n * @return {?}\n */\nset selected(selected: MdRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n/**\n * Whether the radio group is disabled\n * @return {?}\n */\nget disabled(): boolean { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n/**\n * Whether the radio group is required\n * @return {?}\n */\nget required(): boolean { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n/**\n * @param {?} _changeDetector\n */\nconstructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n/**\n * Initialize properties once content children are available.\n * This allows us to propagate relevant attributes to associated buttons.\n * @return {?}\n */\nngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MdRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MdRadioGroup.\n    this._isInitialized = true;\n  }\n/**\n * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n * radio buttons upon their blur.\n * @return {?}\n */\n_touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n/**\n * @return {?}\n */\nprivate _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n/**\n * Updates the `selected` radio button from the internal _value state.\n * @return {?}\n */\nprivate _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const /** @type {?} */ isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value == radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n/**\n * Dispatch change event with current selection and group value.\n * @return {?}\n */\n_emitChangeEvent(): void {\n    if (this._isInitialized) {\n      const /** @type {?} */ event = new MdRadioChange();\n      event.source = this._selected;\n      event.value = this._value;\n      this.change.emit(event);\n    }\n  }\n/**\n * @return {?}\n */\n_markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n/**\n * Registers a callback to be triggered when the model value changes.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback to be triggered when the control is touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n * @param {?} isDisabled Whether the control should be disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-radio-group, mat-radio-group',\n  providers: [MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'change': [{ type: Output },],\n'_radios': [{ type: ContentChildren, args: [forwardRef(() => MdRadioButton), ] },],\n'name': [{ type: Input },],\n'align': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'value': [{ type: Input },],\n'selected': [{ type: Input },],\n'disabled': [{ type: Input },],\n'required': [{ type: Input },],\n};\n}\n\nfunction MdRadioGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRadioGroup.ctorParameters;\n/** @type {?} */\nMdRadioGroup.propDecorators;\n/**\n * Selected value for group. Should equal the value of the selected radio button if there *is*\n * a corresponding radio button with a matching value. If there is *not* such a corresponding\n * radio button, this value persists to be applied in case a new radio button is added with a\n * matching value.\n * @type {?}\n */\nMdRadioGroup.prototype._value;\n/**\n * The HTML name attribute applied to radio buttons in this group.\n * @type {?}\n */\nMdRadioGroup.prototype._name;\n/**\n * The currently selected radio button. Should match value.\n * @type {?}\n */\nMdRadioGroup.prototype._selected;\n/**\n * Whether the `value` has been set to its initial value.\n * @type {?}\n */\nMdRadioGroup.prototype._isInitialized;\n/**\n * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n * @type {?}\n */\nMdRadioGroup.prototype._labelPosition;\n/**\n * Whether the radio group is disabled.\n * @type {?}\n */\nMdRadioGroup.prototype._disabled;\n/**\n * Whether the radio group is required.\n * @type {?}\n */\nMdRadioGroup.prototype._required;\n/**\n * The method to be called in order to update ngModel\n * @type {?}\n */\nMdRadioGroup.prototype._controlValueAccessorChangeFn;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * \\@docs-private\n * @type {?}\n */\nMdRadioGroup.prototype.onTouched;\n/**\n * Event emitted when the group value changes.\n * Change events are only emitted when the value changes due to user interaction with\n * a radio button (the same behavior as `<input type-\"radio\">`).\n * @type {?}\n */\nMdRadioGroup.prototype.change;\n/**\n * Child radio buttons.\n * @type {?}\n */\nMdRadioGroup.prototype._radios;\n/** @type {?} */\nMdRadioGroup.prototype._changeDetector;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdRadioButtonBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdRadioButtonBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioButtonBase.prototype._renderer;\n/** @type {?} */\nMdRadioButtonBase.prototype._elementRef;\n}\n\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const /** @type {?} */ _MdRadioButtonMixinBase = mixinColor(mixinDisableRipple(MdRadioButtonBase), 'accent');\n/**\n * A radio-button. May be inside of\n */\nexport class MdRadioButton extends _MdRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple {\nprivate _uniqueId: string = `md-radio-${++nextUniqueId}`;\n/**\n * The unique ID for the radio button.\n */\nid: string = this._uniqueId;\n/**\n * Analog to HTML 'name' attribute used to group radios for unique selection.\n */\nname: string;\n/**\n * Used to set the 'aria-label' attribute on the underlying input element.\n */\nariaLabel: string;\n/**\n * The 'aria-labelledby' attribute takes precedence as the element's text alternative.\n */\nariaLabelledby: string;\n/**\n * Whether this radio button is checked.\n * @return {?}\n */\nget checked(): boolean {\n    return this._checked;\n  }\n/**\n * @param {?} newCheckedState\n * @return {?}\n */\nset checked(newCheckedState: boolean) {\n    if (this._checked != newCheckedState) {\n      this._checked = newCheckedState;\n\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n/**\n * The value of this radio button.\n * @return {?}\n */\nget value(): any {\n    return this._value;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      if (this.radioGroup != null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value == value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n/**\n * Whether or not the radio-button should appear before or after the label.\n * @deprecated\n * @return {?}\n */\nget align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\nprivate _labelPosition: 'before' | 'after';\n/**\n * Whether the label should appear after or before the radio button. Defaults to 'after'\n * @return {?}\n */\nget labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset labelPosition(value) {\n    this._labelPosition = value;\n  }\n/**\n * Whether the radio button is disabled.\n * @return {?}\n */\nget disabled(): boolean {\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n/**\n * Whether the radio button is required.\n * @return {?}\n */\nget required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n/**\n * Event emitted when the checked state of this radio button changes.\n * Change events are only emitted when the value changes due to user interaction with\n * the radio button (the same behavior as `<input type-\"radio\">`).\n */\nchange: EventEmitter<MdRadioChange> = new EventEmitter<MdRadioChange>();\n/**\n * The parent radio group. May or may not be present.\n */\nradioGroup: MdRadioGroup;\n/**\n * ID of the native input element inside `<md-radio-button>`\n * @return {?}\n */\nget inputId(): string { return `${this.id || this._uniqueId}-input`; }\n/**\n * Whether this radio is checked.\n */\nprivate _checked: boolean = false;\n/**\n * Whether this radio is disabled.\n */\nprivate _disabled: boolean;\n/**\n * Whether this radio is required.\n */\nprivate _required: boolean;\n/**\n * Value assigned to this radio.\n */\nprivate _value: any = null;\n/**\n * The child ripple instance.\n */\n_ripple: MdRipple;\n/**\n * Reference to the current focus ripple.\n */\nprivate _focusRipple: RippleRef | null;\n/**\n * Unregister function for _radioDispatcher *\n */\nprivate _removeUniqueSelectionListener: () => void = () => {};\n/**\n * The native `<input type=radio>` element\n */\n_inputElement: ElementRef;\n/**\n * @param {?} radioGroup\n * @param {?} elementRef\n * @param {?} renderer\n * @param {?} _changeDetector\n * @param {?} _focusMonitor\n * @param {?} _radioDispatcher\n */\nconstructor( radioGroup: MdRadioGroup,\n              elementRef: ElementRef,\n              renderer: Renderer2,\nprivate _changeDetector: ChangeDetectorRef,\nprivate _focusMonitor: FocusMonitor,\nprivate _radioDispatcher: UniqueSelectionDispatcher) {\n    super(renderer, elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id != this.id && name == this.name) {\n          this.checked = false;\n        }\n      });\n  }\n/**\n * Focuses the radio button.\n * @return {?}\n */\nfocus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n/**\n * Marks the radio button as needing checking for change detection.\n * This method is exposed because the parent radio group will directly\n * update bound properties of the radio button.\n * @return {?}\n */\n_markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement, this._renderer, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n/**\n * Dispatch change event with current value.\n * @return {?}\n */\nprivate _emitChangeEvent(): void {\n    const /** @type {?} */ event = new MdRadioChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n/**\n * @return {?}\n */\n_isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n/**\n * Triggered when the radio button received a click or the input recognized any change.\n * Clicking on a label element, will trigger a change event on the associated input.\n * @param {?} event\n * @return {?}\n */\n_onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const /** @type {?} */ groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n/**\n * Function is called whenever the focus changes for the input element.\n * @param {?} focusOrigin\n * @return {?}\n */\nprivate _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, centered: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-radio-button, mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdRadioGroup, decorators: [{ type: Optional }, ]},\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ChangeDetectorRef, },\n{type: FocusMonitor, },\n{type: UniqueSelectionDispatcher, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n'name': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'checked': [{ type: Input },],\n'value': [{ type: Input },],\n'align': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'disabled': [{ type: Input },],\n'required': [{ type: Input },],\n'change': [{ type: Output },],\n'_ripple': [{ type: ViewChild, args: [MdRipple, ] },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n};\n}\n\nfunction MdRadioButton_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRadioButton.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRadioButton.ctorParameters;\n/** @type {?} */\nMdRadioButton.propDecorators;\n/** @type {?} */\nMdRadioButton.prototype._uniqueId;\n/**\n * The unique ID for the radio button.\n * @type {?}\n */\nMdRadioButton.prototype.id;\n/**\n * Analog to HTML 'name' attribute used to group radios for unique selection.\n * @type {?}\n */\nMdRadioButton.prototype.name;\n/**\n * Used to set the 'aria-label' attribute on the underlying input element.\n * @type {?}\n */\nMdRadioButton.prototype.ariaLabel;\n/**\n * The 'aria-labelledby' attribute takes precedence as the element's text alternative.\n * @type {?}\n */\nMdRadioButton.prototype.ariaLabelledby;\n/** @type {?} */\nMdRadioButton.prototype._labelPosition;\n/**\n * Event emitted when the checked state of this radio button changes.\n * Change events are only emitted when the value changes due to user interaction with\n * the radio button (the same behavior as `<input type-\"radio\">`).\n * @type {?}\n */\nMdRadioButton.prototype.change;\n/**\n * The parent radio group. May or may not be present.\n * @type {?}\n */\nMdRadioButton.prototype.radioGroup;\n/**\n * Whether this radio is checked.\n * @type {?}\n */\nMdRadioButton.prototype._checked;\n/**\n * Whether this radio is disabled.\n * @type {?}\n */\nMdRadioButton.prototype._disabled;\n/**\n * Whether this radio is required.\n * @type {?}\n */\nMdRadioButton.prototype._required;\n/**\n * Value assigned to this radio.\n * @type {?}\n */\nMdRadioButton.prototype._value;\n/**\n * The child ripple instance.\n * @type {?}\n */\nMdRadioButton.prototype._ripple;\n/**\n * Reference to the current focus ripple.\n * @type {?}\n */\nMdRadioButton.prototype._focusRipple;\n/**\n * Unregister function for _radioDispatcher *\n * @type {?}\n */\nMdRadioButton.prototype._removeUniqueSelectionListener;\n/**\n * The native `<input type=radio>` element\n * @type {?}\n */\nMdRadioButton.prototype._inputElement;\n/** @type {?} */\nMdRadioButton.prototype._changeDetector;\n/** @type {?} */\nMdRadioButton.prototype._focusMonitor;\n/** @type {?} */\nMdRadioButton.prototype._radioDispatcher;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdProgressSpinnerModule,PROGRESS_SPINNER_STROKE_WIDTH,ProgressSpinnerMode,MdProgressSpinnerCssMatStyler,MdProgressSpinnerBase,_MdProgressSpinnerMixinBase,MdProgressSpinner,MdSpinner,MatProgressSpinner,MatProgressSpinnerBase,MatProgressSpinnerCssMatStyler,MatProgressSpinnerModule,MatSpinner} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdCommonModule} from '@angular/material/core';\nimport {\n  MdProgressSpinner,\n  MdSpinner,\n  MdProgressSpinnerCssMatStyler,\n} from './progress-spinner';\nexport class MdProgressSpinnerModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule],\n  exports: [\n    MdProgressSpinner,\n    MdSpinner,\n    MdCommonModule,\n    MdProgressSpinnerCssMatStyler\n  ],\n  declarations: [\n    MdProgressSpinner,\n    MdSpinner,\n    MdProgressSpinnerCssMatStyler\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdProgressSpinnerModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinnerModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressSpinnerModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  OnDestroy,\n  Input,\n  ElementRef,\n  NgZone,\n  Renderer2,\n  Directive,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\n/**\n * A single degree in radians.\n */\nconst DEGREE_IN_RADIANS = Math.PI / 180;\n/**\n * Duration of the indeterminate animation.\n */\nconst DURATION_INDETERMINATE = 667;\n/**\n * Duration of the indeterminate animation.\n */\nconst DURATION_DETERMINATE = 225;\n/**\n * Start animation value of the indeterminate animation\n */\nconst startIndeterminate = 3;\n/**\n * End animation value of the indeterminate animation\n */\nconst endIndeterminate = 80;\n/**\n * Maximum angle for the arc. The angle can't be exactly 360, because the arc becomes hidden.\n */\nconst MAX_ANGLE = 359.99 / 100;\n/**\n * Whether the user's browser supports requestAnimationFrame.\n */\nconst HAS_RAF = typeof requestAnimationFrame !== 'undefined';\n/**\n * Default stroke width as a percentage of the viewBox.\n */\nexport const PROGRESS_SPINNER_STROKE_WIDTH = 10;\n\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\ntype EasingFn = (currentTime: number, startValue: number,\n                 changeInValue: number, duration: number) => number;\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdProgressSpinnerCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-progress-spinner, mat-progress-spinner',\n  host: {'class': 'mat-progress-spinner'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdProgressSpinnerCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinnerCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressSpinnerCssMatStyler.ctorParameters;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdProgressSpinnerBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdProgressSpinnerBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinnerBase.prototype._renderer;\n/** @type {?} */\nMdProgressSpinnerBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdProgressSpinnerMixinBase = mixinColor(MdProgressSpinnerBase, 'primary');\n/**\n * <md-progress-spinner> component.\n */\nexport class MdProgressSpinner extends _MdProgressSpinnerMixinBase\n    implements OnDestroy, CanColor {\n/**\n * The id of the last requested animation.\n */\nprivate _lastAnimationId: number = 0;\n/**\n * The id of the indeterminate interval.\n */\nprivate _interdeterminateInterval: number | null;\n/**\n * The SVG <path> node that is used to draw the circle.\n */\nprivate _path: ElementRef;\nprivate _mode: ProgressSpinnerMode = 'determinate';\nprivate _value: number;\n/**\n * Stroke width of the progress spinner. By default uses 10px as stroke width.\n */\nstrokeWidth: number = PROGRESS_SPINNER_STROKE_WIDTH;\n/**\n * Values for aria max and min are only defined as numbers when in a determinate mode.  We do this\n * because voiceover does not report the progress indicator as indeterminate if the aria min\n * and/or max value are number values.\n * @return {?}\n */\nget _ariaValueMin() {\n    return this.mode == 'determinate' ? 0 : null;\n  }\n/**\n * @return {?}\n */\nget _ariaValueMax() {\n    return this.mode == 'determinate' ? 100 : null;\n  }\n/**\n * \\@docs-private\n * @return {?}\n */\nget interdeterminateInterval() {\n    return this._interdeterminateInterval;\n  }\n/**\n * \\@docs-private\n * @param {?} interval\n * @return {?}\n */\nset interdeterminateInterval(interval: number | null) {\n    if (this._interdeterminateInterval) {\n      clearInterval(this._interdeterminateInterval);\n    }\n\n    this._interdeterminateInterval = interval;\n  }\n/**\n * Clean up any animations that were running.\n * @return {?}\n */\nngOnDestroy() {\n    this._cleanupIndeterminateAnimation();\n  }\n/**\n * Value of the progress circle. It is bound to the host as the attribute aria-valuenow.\n * @return {?}\n */\nget value() {\n    if (this.mode == 'determinate') {\n      return this._value;\n    }\n\n    return 0;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: number) {\n    if (v != null && this.mode == 'determinate') {\n      let /** @type {?} */ newValue = clamp(v);\n      this._animateCircle(this.value || 0, newValue);\n      this._value = newValue;\n    }\n  }\n/**\n * Mode of the progress circle\n * \n * Input must be one of the values from ProgressMode, defaults to 'determinate'.\n * mode is bound to the host as the attribute host.\n * @return {?}\n */\nget mode() { return this._mode; }\n/**\n * @param {?} mode\n * @return {?}\n */\nset mode(mode: ProgressSpinnerMode) {\n    if (mode !== this._mode) {\n      if (mode === 'indeterminate') {\n        this._startIndeterminateAnimation();\n      } else {\n        this._cleanupIndeterminateAnimation();\n        this._animateCircle(0, this._value);\n      }\n      this._mode = mode;\n    }\n  }\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _ngZone\n */\nconstructor(renderer: Renderer2,\n              elementRef: ElementRef,\nprivate _ngZone: NgZone) {\n    super(renderer, elementRef);\n  }\n/**\n * Animates the circle from one percentage value to another.\n * \n * @param {?} animateFrom The percentage of the circle filled starting the animation.\n * @param {?} animateTo The percentage of the circle filled ending the animation.\n * @param {?=} ease The easing function to manage the pace of change in the animation.\n * @param {?=} duration The length of time to show the animation, in milliseconds.\n * @param {?=} rotation The starting angle of the circle fill, with 0° represented at the top center\n *    of the circle.\n * @return {?}\n */\nprivate _animateCircle(animateFrom: number, animateTo: number, ease: EasingFn = linearEase,\n                        duration = DURATION_DETERMINATE, rotation = 0) {\n\n    let /** @type {?} */ id = ++this._lastAnimationId;\n    let /** @type {?} */ startTime = Date.now();\n    let /** @type {?} */ changeInValue = animateTo - animateFrom;\n\n    // No need to animate it if the values are the same\n    if (animateTo === animateFrom) {\n      this._renderArc(animateTo, rotation);\n    } else {\n      let /** @type {?} */ animation = () => {\n        // If there is no requestAnimationFrame, skip ahead to the end of the animation.\n        let /** @type {?} */ elapsedTime = HAS_RAF ?\n            Math.max(0, Math.min(Date.now() - startTime, duration)) :\n            duration;\n\n        this._renderArc(\n          ease(elapsedTime, animateFrom, changeInValue, duration),\n          rotation\n        );\n\n        // Prevent overlapping animations by checking if a new animation has been called for and\n        // if the animation has lasted longer than the animation duration.\n        if (id === this._lastAnimationId && elapsedTime < duration) {\n          requestAnimationFrame(animation);\n        }\n      };\n\n      // Run the animation outside of Angular's zone, in order to avoid\n      // hitting ZoneJS and change detection on each frame.\n      this._ngZone.runOutsideAngular(animation);\n    }\n  }\n/**\n * Starts the indeterminate animation interval, if it is not already running.\n * @return {?}\n */\nprivate _startIndeterminateAnimation() {\n    let /** @type {?} */ rotationStartPoint = 0;\n    let /** @type {?} */ start = startIndeterminate;\n    let /** @type {?} */ end = endIndeterminate;\n    let /** @type {?} */ duration = DURATION_INDETERMINATE;\n    let /** @type {?} */ animate = () => {\n      this._animateCircle(start, end, materialEase, duration, rotationStartPoint);\n      // Prevent rotation from reaching Number.MAX_SAFE_INTEGER.\n      rotationStartPoint = (rotationStartPoint + end) % 100;\n      let /** @type {?} */ temp = start;\n      start = -end;\n      end = -temp;\n    };\n\n    if (!this.interdeterminateInterval) {\n      this._ngZone.runOutsideAngular(() => {\n        this.interdeterminateInterval = setInterval(animate, duration + 50, 0, false);\n        animate();\n      });\n    }\n  }\n/**\n * Removes interval, ending the animation.\n * @return {?}\n */\nprivate _cleanupIndeterminateAnimation() {\n    this.interdeterminateInterval = null;\n  }\n/**\n * Renders the arc onto the SVG element. Proxies `getArc` while setting the proper\n * DOM attribute on the `<path>`.\n * @param {?} currentValue\n * @param {?=} rotation\n * @return {?}\n */\nprivate _renderArc(currentValue: number, rotation = 0) {\n    if (this._path) {\n      const /** @type {?} */ svgArc = getSvgArc(currentValue, rotation, this.strokeWidth);\n      this._renderer.setAttribute(this._path.nativeElement, 'd', svgArc);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-progress-spinner, mat-progress-spinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[attr.aria-valuemin]': '_ariaValueMin',\n    '[attr.aria-valuemax]': '_ariaValueMax',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: NgZone, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_path': [{ type: ViewChild, args: ['path', ] },],\n'strokeWidth': [{ type: Input },],\n'value': [{ type: Input },],\n'mode': [{ type: Input },],\n};\n}\n\nfunction MdProgressSpinner_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressSpinner.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressSpinner.ctorParameters;\n/** @type {?} */\nMdProgressSpinner.propDecorators;\n/**\n * The id of the last requested animation.\n * @type {?}\n */\nMdProgressSpinner.prototype._lastAnimationId;\n/**\n * The id of the indeterminate interval.\n * @type {?}\n */\nMdProgressSpinner.prototype._interdeterminateInterval;\n/**\n * The SVG <path> node that is used to draw the circle.\n * @type {?}\n */\nMdProgressSpinner.prototype._path;\n/** @type {?} */\nMdProgressSpinner.prototype._mode;\n/** @type {?} */\nMdProgressSpinner.prototype._value;\n/**\n * Stroke width of the progress spinner. By default uses 10px as stroke width.\n * @type {?}\n */\nMdProgressSpinner.prototype.strokeWidth;\n/** @type {?} */\nMdProgressSpinner.prototype._ngZone;\n}\n\n/**\n * <md-spinner> component.\n * \n * This is a component definition to be used as a convenience reference to create an\n * indeterminate <md-progress-spinner> instance.\n */\nexport class MdSpinner extends MdProgressSpinner {\n/**\n * @param {?} elementRef\n * @param {?} ngZone\n * @param {?} renderer\n */\nconstructor(elementRef: ElementRef, ngZone: NgZone, renderer: Renderer2) {\n    super(renderer, elementRef, ngZone);\n    this.mode = 'indeterminate';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-spinner, mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: Renderer2, },\n];\n}\n\nfunction MdSpinner_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSpinner.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSpinner.ctorParameters;\n}\n\n/**\n * Clamps a value to be between 0 and 100.\n * @param {?} v\n * @return {?}\n */\nfunction clamp(v: number) {\n  return Math.max(0, Math.min(100, v));\n}\n/**\n * Converts Polar coordinates to Cartesian.\n * @param {?} radius\n * @param {?} pathRadius\n * @param {?} angleInDegrees\n * @return {?}\n */\nfunction polarToCartesian(radius: number, pathRadius: number, angleInDegrees: number) {\n  let /** @type {?} */ angleInRadians = (angleInDegrees - 90) * DEGREE_IN_RADIANS;\n\n  return (radius + (pathRadius * Math.cos(angleInRadians))) +\n    ',' + (radius + (pathRadius * Math.sin(angleInRadians)));\n}\n/**\n * Easing function for linear animation.\n * @param {?} currentTime\n * @param {?} startValue\n * @param {?} changeInValue\n * @param {?} duration\n * @return {?}\n */\nfunction linearEase(currentTime: number, startValue: number,\n                    changeInValue: number, duration: number) {\n  return changeInValue * currentTime / duration + startValue;\n}\n/**\n * Easing function to match material design indeterminate animation.\n * @param {?} currentTime\n * @param {?} startValue\n * @param {?} changeInValue\n * @param {?} duration\n * @return {?}\n */\nfunction materialEase(currentTime: number, startValue: number,\n                      changeInValue: number, duration: number) {\n  let /** @type {?} */ time = currentTime / duration;\n  let /** @type {?} */ timeCubed = Math.pow(time, 3);\n  let /** @type {?} */ timeQuad = Math.pow(time, 4);\n  let /** @type {?} */ timeQuint = Math.pow(time, 5);\n  return startValue + changeInValue * ((6 * timeQuint) + (-15 * timeQuad) + (10 * timeCubed));\n}\n/**\n * Determines the path value to define the arc.  Converting percentage values to to polar\n * coordinates on the circle, and then to cartesian coordinates in the viewport.\n * \n * @param {?} currentValue The current percentage value of the progress circle, the percentage of the\n *    circle to fill.\n * @param {?} rotation The starting point of the circle with 0 being the 0 degree point.\n * @param {?} strokeWidth Stroke width of the progress spinner arc.\n * @return {?} A string for an SVG path representing a circle filled from the starting point to the\n *    percentage value provided.\n */\nfunction getSvgArc(currentValue: number, rotation: number, strokeWidth: number): string {\n  let /** @type {?} */ startPoint = rotation || 0;\n  let /** @type {?} */ radius = 50;\n  let /** @type {?} */ pathRadius = radius - strokeWidth;\n\n  let /** @type {?} */ startAngle = startPoint * MAX_ANGLE;\n  let /** @type {?} */ endAngle = currentValue * MAX_ANGLE;\n  let /** @type {?} */ start = polarToCartesian(radius, pathRadius, startAngle);\n  let /** @type {?} */ end = polarToCartesian(radius, pathRadius, endAngle + startAngle);\n  let /** @type {?} */ arcSweep = endAngle < 0 ? 0 : 1;\n  let /** @type {?} */ largeArcFlag: number;\n\n  if (endAngle < 0) {\n    largeArcFlag = endAngle >= -180 ? 0 : 1;\n  } else {\n    largeArcFlag = endAngle <= 180 ? 0 : 1;\n  }\n\n  return `M${start}A${pathRadius},${pathRadius} 0 ${largeArcFlag},${arcSweep} ${end}`;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdProgressBarModule,MdProgressBar,MatProgressBar,MatProgressBarModule} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdCommonModule} from '@angular/material/core';\nimport {MdProgressBar} from './progress-bar';\nexport class MdProgressBarModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MdCommonModule],\n  exports: [MdProgressBar, MdCommonModule],\n  declarations: [MdProgressBar],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdProgressBarModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressBarModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressBarModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Component, ChangeDetectionStrategy, Input, ViewEncapsulation} from '@angular/core';\n/**\n * <md-progress-bar> component.\n */\nexport class MdProgressBar {\n/**\n * Color of the progress bar.\n */\ncolor: 'primary' | 'accent' | 'warn' = 'primary';\nprivate _value: number = 0;\n/**\n * Value of the progressbar. Defaults to zero. Mirrored to aria-valuenow.\n * @return {?}\n */\nget value() { return this._value; }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: number) { this._value = clamp(v || 0); }\nprivate _bufferValue: number = 0;\n/**\n * Buffer value of the progress bar. Defaults to zero.\n * @return {?}\n */\nget bufferValue() { return this._bufferValue; }\n/**\n * @param {?} v\n * @return {?}\n */\nset bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n/**\n * Mode of the progress bar.\n * \n * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n * 'determinate'.\n * Mirrored to mode attribute.\n */\nmode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n/**\n * Gets the current transform value for the progress bar's primary indicator.\n * @return {?}\n */\n_primaryTransform() {\n    let /** @type {?} */ scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n/**\n * Gets the current transform value for the progress bar's buffer indicator.  Only used if the\n * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n * @return {?}\n */\n_bufferTransform() {\n    if (this.mode == 'buffer') {\n      let /** @type {?} */ scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-progress-bar, mat-progress-bar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    'class': 'mat-progress-bar',\n  },\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'color': [{ type: Input },],\n'value': [{ type: Input },],\n'bufferValue': [{ type: Input },],\n'mode': [{ type: Input },],\n};\n}\n\nfunction MdProgressBar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdProgressBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdProgressBar.ctorParameters;\n/** @type {?} */\nMdProgressBar.propDecorators;\n/**\n * Color of the progress bar.\n * @type {?}\n */\nMdProgressBar.prototype.color;\n/** @type {?} */\nMdProgressBar.prototype._value;\n/** @type {?} */\nMdProgressBar.prototype._bufferValue;\n/**\n * Mode of the progress bar.\n * \n * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n * 'determinate'.\n * Mirrored to mode attribute.\n * @type {?}\n */\nMdProgressBar.prototype.mode;\n}\n\n/**\n * Clamps a value to be between two numbers, by default 0 and 100.\n * @param {?} v\n * @param {?=} min\n * @param {?=} max\n * @return {?}\n */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdPaginatorModule,PageEvent,MdPaginator,MdPaginatorIntl,MatPaginator,MatPaginatorIntl,MatPaginatorModule} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MdButtonModule} from '@angular/material/button';\nimport {MdSelectModule} from '@angular/material/select';\nimport {MdTooltipModule} from '@angular/material/tooltip';\nimport {MdPaginator} from './paginator';\nimport {MdPaginatorIntl} from './paginator-intl';\nexport class MdPaginatorModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    MdButtonModule,\n    MdSelectModule,\n    MdTooltipModule,\n  ],\n  exports: [MdPaginator],\n  declarations: [MdPaginator],\n  providers: [MdPaginatorIntl],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPaginatorModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPaginatorModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPaginatorModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {MATERIAL_COMPATIBILITY_MODE} from '@angular/material/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MdPaginatorIntl} from './paginator-intl';\n/**\n * The default page size if there is no page size and there are no provided page size options.\n */\nconst DEFAULT_PAGE_SIZE = 50;\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n/**\n * The current page index.\n */\npageIndex: number;\n/**\n * The current page size\n */\npageSize: number;\n/**\n * The current total number of items being paged\n */\nlength: number;\n}\n\nfunction PageEvent_tsickle_Closure_declarations() {\n/**\n * The current page index.\n * @type {?}\n */\nPageEvent.prototype.pageIndex;\n/**\n * The current page size\n * @type {?}\n */\nPageEvent.prototype.pageSize;\n/**\n * The current total number of items being paged\n * @type {?}\n */\nPageEvent.prototype.length;\n}\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\nexport class MdPaginator implements OnInit, OnDestroy {\nprivate _initialized: boolean;\nprivate _intlChanges: Subscription;\n/**\n * The zero-based page index of the displayed list of items. Defaulted to 0.\n * @return {?}\n */\nget pageIndex(): number { return this._pageIndex; }\n/**\n * @param {?} pageIndex\n * @return {?}\n */\nset pageIndex(pageIndex: number) {\n    this._pageIndex = pageIndex;\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n/**\n * The length of the total number of items that are being paginated. Defaulted to 0.\n * @return {?}\n */\nget length(): number { return this._length; }\n/**\n * @param {?} length\n * @return {?}\n */\nset length(length: number) {\n    this._length = length;\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n/**\n * Number of items to display on a page. By default set to 50.\n * @return {?}\n */\nget pageSize(): number { return this._pageSize; }\n/**\n * @param {?} pageSize\n * @return {?}\n */\nset pageSize(pageSize: number) {\n    this._pageSize = pageSize;\n    this._updateDisplayedPageSizeOptions();\n  }\nprivate _pageSize: number;\n/**\n * The set of provided page size options to display to the user.\n * @return {?}\n */\nget pageSizeOptions(): number[] { return this._pageSizeOptions; }\n/**\n * @param {?} pageSizeOptions\n * @return {?}\n */\nset pageSizeOptions(pageSizeOptions: number[]) {\n    this._pageSizeOptions = pageSizeOptions;\n    this._updateDisplayedPageSizeOptions();\n  }\nprivate _pageSizeOptions: number[] = [];\n/**\n * Event emitted when the paginator changes the page size or page index.\n */\npage = new EventEmitter<PageEvent>();\n/**\n * Displayed set of page size options. Will be sorted and include current page size.\n */\n_displayedPageSizeOptions: number[];\n/**\n * @param {?} _intl\n * @param {?} _changeDetectorRef\n */\nconstructor(public _intl: MdPaginatorIntl,\nprivate _changeDetectorRef: ChangeDetectorRef) {\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n/**\n * Advances to the next page if it exists.\n * @return {?}\n */\nnextPage() {\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex++;\n    this._emitPageEvent();\n  }\n/**\n * Move back to the previous page if it exists.\n * @return {?}\n */\npreviousPage() {\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex--;\n    this._emitPageEvent();\n  }\n/**\n * Whether there is a previous page.\n * @return {?}\n */\nhasPreviousPage() {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n/**\n * Whether there is a next page.\n * @return {?}\n */\nhasNextPage() {\n    const /** @type {?} */ numberOfPages = Math.ceil(this.length / this.pageSize) - 1;\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n/**\n * Changes the page size so that the first item displayed on the page will still be\n * displayed using the new page size.\n * \n * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n * switching so that the page size is 5 will set the third page as the current page so\n * that the 10th item will still be displayed.\n * @param {?} pageSize\n * @return {?}\n */\n_changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const /** @type {?} */ startIndex = this.pageIndex * this.pageSize;\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n\n    this.pageSize = pageSize;\n    this._emitPageEvent();\n  }\n/**\n * Updates the list of page size options to display to the user. Includes making sure that\n * the page size is an option and that the list is sorted.\n * @return {?}\n */\nprivate _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) == -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Emits an event notifying that a change of the paginator's properties has been triggered.\n * @return {?}\n */\nprivate _emitPageEvent() {\n    this.page.next({\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-paginator, mat-paginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdPaginatorIntl, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'pageIndex': [{ type: Input },],\n'length': [{ type: Input },],\n'pageSize': [{ type: Input },],\n'pageSizeOptions': [{ type: Input },],\n'page': [{ type: Output },],\n};\n}\n\nfunction MdPaginator_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPaginator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPaginator.ctorParameters;\n/** @type {?} */\nMdPaginator.propDecorators;\n/** @type {?} */\nMdPaginator.prototype._initialized;\n/** @type {?} */\nMdPaginator.prototype._intlChanges;\n/** @type {?} */\nMdPaginator.prototype._pageIndex;\n/** @type {?} */\nMdPaginator.prototype._length;\n/** @type {?} */\nMdPaginator.prototype._pageSize;\n/** @type {?} */\nMdPaginator.prototype._pageSizeOptions;\n/**\n * Event emitted when the paginator changes the page size or page index.\n * @type {?}\n */\nMdPaginator.prototype.page;\n/**\n * Displayed set of page size options. Will be sorted and include current page size.\n * @type {?}\n */\nMdPaginator.prototype._displayedPageSizeOptions;\n/** @type {?} */\nMdPaginator.prototype._intl;\n/** @type {?} */\nMdPaginator.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n/**\n * To modify the labels and text displayed, create a new instance of MdPaginatorIntl and\n * include it in a custom provider\n */\nexport class MdPaginatorIntl {\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\n * components if the labels have changed after initialization.\n */\nchanges: Subject<void> = new Subject<void>();\n/**\n * A label for the page size selector.\n */\nitemsPerPageLabel = 'Items per page:';\n/**\n * A label for the button that increments the current page.\n */\nnextPageLabel = 'Next page';\n/**\n * A label for the button that decrements the current page.\n */\npreviousPageLabel = 'Previous page';\n/**\n * A label for the range of items within the current page and the length of the whole list.\n */\ngetRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPaginatorIntl_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPaginatorIntl.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPaginatorIntl.ctorParameters;\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\n * components if the labels have changed after initialization.\n * @type {?}\n */\nMdPaginatorIntl.prototype.changes;\n/**\n * A label for the page size selector.\n * @type {?}\n */\nMdPaginatorIntl.prototype.itemsPerPageLabel;\n/**\n * A label for the button that increments the current page.\n * @type {?}\n */\nMdPaginatorIntl.prototype.nextPageLabel;\n/**\n * A label for the button that decrements the current page.\n * @type {?}\n */\nMdPaginatorIntl.prototype.previousPageLabel;\n/**\n * A label for the range of items within the current page and the length of the whole list.\n * @type {?}\n */\nMdPaginatorIntl.prototype.getRangeLabel;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdTooltipModule,TooltipPosition,TOUCHEND_HIDE_DELAY,SCROLL_THROTTLE_MS,TOOLTIP_PANEL_CLASS,getMdTooltipInvalidPositionError,MD_TOOLTIP_SCROLL_STRATEGY,MD_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY,MD_TOOLTIP_SCROLL_STRATEGY_PROVIDER,MdTooltip,TooltipVisibility,TooltipComponent,MatTooltip,MatTooltipModule,MAT_TOOLTIP_SCROLL_STRATEGY,MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {A11yModule, ARIA_DESCRIBER_PROVIDER} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MdCommonModule} from '@angular/material/core';\nimport {MD_TOOLTIP_SCROLL_STRATEGY_PROVIDER, MdTooltip, TooltipComponent} from './tooltip';\nexport class MdTooltipModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MdCommonModule,\n    PlatformModule,\n    A11yModule,\n  ],\n  exports: [MdTooltip, TooltipComponent, MdCommonModule],\n  declarations: [MdTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [MD_TOOLTIP_SCROLL_STRATEGY_PROVIDER, ARIA_DESCRIBER_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdTooltipModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTooltipModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTooltipModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {animate, AnimationEvent, state, style, transition, trigger} from '@angular/animations';\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  OverlayConfig,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {first} from '@angular/cdk/rxjs';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n/**\n * Time in ms to delay before changing the tooltip visibility to hidden\n */\nexport const TOUCHEND_HIDE_DELAY = 1500;\n/**\n * Time in ms to throttle repositioning after scroll events.\n */\nexport const SCROLL_THROTTLE_MS = 20;\n/**\n * CSS class that will be attached to the overlay panel.\n */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @param {?} position\n * @return {?}\n */\nexport function getMdTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/**\n * Injection token that determines the scroll handling while a tooltip is visible.\n */\nexport const MD_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('md-tooltip-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MD_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n/**\n * \\@docs-private\n */\nexport const MD_TOOLTIP_SCROLL_STRATEGY_PROVIDER = {\n  provide: MD_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MD_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n * \n * https://material.google.com/components/tooltips.html\n */\nexport class MdTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\nprivate _position: TooltipPosition = 'below';\nprivate _disabled: boolean = false;\nprivate _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n/**\n * Allows the user to define the position of the tooltip relative to the parent element\n * @return {?}\n */\nget position(): TooltipPosition { return this._position; }\n/**\n * @param {?} value\n * @return {?}\n */\nset position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      // TODO(andrewjs): When the overlay's position can be dynamically changed, do not destroy\n      // the tooltip.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    }\n  }\n/**\n * Disables the display of the tooltip.\n * @return {?}\n */\nget disabled(): boolean { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n/**\n * @deprecated\n * @return {?}\n */\nget _positionDeprecated(): TooltipPosition { return this._position; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _positionDeprecated(value: TooltipPosition) { this._position = value; }\n/**\n * The default delay in ms before showing the tooltip after show is called\n */\nshowDelay = 0;\n/**\n * The default delay in ms before hiding the tooltip after hide is called\n */\nhideDelay = 0;\nprivate _message = '';\n/**\n * The message to be displayed in the tooltip\n * @return {?}\n */\nget message() { return this._message; }\n/**\n * @param {?} value\n * @return {?}\n */\nset message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n    this._updateTooltipMessage();\n    this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n  }\n/**\n * Classes to be passed to the tooltip. Supports the same syntax as `ngClass`.\n * @return {?}\n */\nget tooltipClass() { return this._tooltipClass; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedMessage(): string { return this.message; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedMessage(v: string) { this.message = v; }\n/**\n * @return {?}\n */\nget _matMessage() { return this.message; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matMessage(v) { this.message = v; }\n/**\n * @return {?}\n */\nget _matPosition() { return this.position; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matPosition(v) { this.position = v; }\n/**\n * @return {?}\n */\nget _matDisabled() { return this.disabled; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matDisabled(v) { this.disabled = v; }\n/**\n * @return {?}\n */\nget _matHideDelay() { return this.hideDelay; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matHideDelay(v) { this.hideDelay = v; }\n/**\n * @return {?}\n */\nget _matShowDelay() { return this.showDelay; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matShowDelay(v) { this.showDelay = v; }\n/**\n * @return {?}\n */\nget _matClass() { return this.tooltipClass; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matClass(v) { this.tooltipClass = v; }\nprivate _enterListener: Function;\nprivate _leaveListener: Function;\n/**\n * @param {?} renderer\n * @param {?} _overlay\n * @param {?} _elementRef\n * @param {?} _scrollDispatcher\n * @param {?} _viewContainerRef\n * @param {?} _ngZone\n * @param {?} _platform\n * @param {?} _ariaDescriber\n * @param {?} _scrollStrategy\n * @param {?} _dir\n */\nconstructor(\n    renderer: Renderer2,\nprivate _overlay: Overlay,\nprivate _elementRef: ElementRef,\nprivate _scrollDispatcher: ScrollDispatcher,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _ngZone: NgZone,\nprivate _platform: Platform,\nprivate _ariaDescriber: AriaDescriber,\nprivate _scrollStrategy,\nprivate _dir: Directionality) {\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._enterListener =\n        renderer.listen(_elementRef.nativeElement, 'mouseenter', () => this.show());\n      this._leaveListener =\n        renderer.listen(_elementRef.nativeElement, 'mouseleave', () => this.hide());\n    }\n  }\n/**\n * Dispose the tooltip when destroyed.\n * @return {?}\n */\nngOnDestroy() {\n    if (this._tooltipInstance) {\n      this._disposeTooltip();\n    }\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._enterListener();\n      this._leaveListener();\n    }\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n  }\n/**\n * Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input\n * @param {?=} delay\n * @return {?}\n */\nshow(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    if (!this._tooltipInstance) {\n      this._createTooltip();\n    }\n\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage(); /** @type {?} */((\n    this._tooltipInstance)).show(this._position, delay);\n  }\n/**\n * Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input\n * @param {?=} delay\n * @return {?}\n */\nhide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n/**\n * Shows/hides the tooltip\n * @return {?}\n */\ntoggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n/**\n * Returns true if the tooltip is currently visible to the user\n * @return {?}\n */\n_isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n/**\n * Handles the keydown events on the host element.\n * @param {?} e\n * @return {?}\n */\n_handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n/**\n * Create the tooltip to display\n * @return {?}\n */\nprivate _createTooltip(): void {\n    let /** @type {?} */ overlayRef = this._createOverlay();\n    let /** @type {?} */ portal = new ComponentPortal(TooltipComponent, this._viewContainerRef);\n\n    this._tooltipInstance = overlayRef.attach(portal).instance; /** @type {?} */((\n\n    // Dispose the overlay when finished the shown tooltip.\n    this._tooltipInstance)).afterHidden().subscribe(() => {\n      // Check first if the tooltip has already been removed through this components destroy.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    });\n  }\n/**\n * Create the overlay config and position strategy\n * @return {?}\n */\nprivate _createOverlay(): OverlayRef {\n    const /** @type {?} */ origin = this._getOrigin();\n    const /** @type {?} */ position = this._getOverlayPosition();\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    // After position changes occur and the overlay is clipped by a parent scrollable then\n    // close the tooltip.\n    const /** @type {?} */ strategy = this._overlay.position().connectedTo(this._elementRef, origin, position);\n    strategy.withScrollableContainers(this._scrollDispatcher.getScrollContainers(this._elementRef));\n    strategy.onPositionChange.subscribe(change => {\n      if (change.scrollableViewProperties.isOverlayClipped &&\n          this._tooltipInstance && this._tooltipInstance.isVisible()) {\n        this.hide(0);\n      }\n    });\n\n    const /** @type {?} */ config = new OverlayConfig({\n      direction: this._dir ? this._dir.value : 'ltr',\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._overlayRef = this._overlay.create(config);\n\n    return this._overlayRef;\n  }\n/**\n * Disposes the current tooltip and the overlay it is attached to\n * @return {?}\n */\nprivate _disposeTooltip(): void {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._tooltipInstance = null;\n  }\n/**\n * Returns the origin position based on the user's position preference\n * @return {?}\n */\n_getOrigin(): OriginConnectionPosition {\n    if (this.position == 'above' || this.position == 'below') {\n      return {originX: 'center', originY: this.position == 'above' ? 'top' : 'bottom'};\n    }\n\n    const /** @type {?} */ isDirectionLtr = !this._dir || this._dir.value == 'ltr';\n    if (this.position == 'left' ||\n        this.position == 'before' && isDirectionLtr ||\n        this.position == 'after' && !isDirectionLtr) {\n      return {originX: 'start', originY: 'center'};\n    }\n\n    if (this.position == 'right' ||\n        this.position == 'after' && isDirectionLtr ||\n        this.position == 'before' && !isDirectionLtr) {\n      return {originX: 'end', originY: 'center'};\n    }\n\n    throw getMdTooltipInvalidPositionError(this.position);\n  }\n/**\n * Returns the overlay position based on the user's preference\n * @return {?}\n */\n_getOverlayPosition(): OverlayConnectionPosition {\n    if (this.position == 'above') {\n      return {overlayX: 'center', overlayY: 'bottom'};\n    }\n\n    if (this.position == 'below') {\n      return {overlayX: 'center', overlayY: 'top'};\n    }\n\n    const /** @type {?} */ isLtr = !this._dir || this._dir.value == 'ltr';\n    if (this.position == 'left' ||\n        this.position == 'before' && isLtr ||\n        this.position == 'after' && !isLtr) {\n      return {overlayX: 'end', overlayY: 'center'};\n    }\n\n    if (this.position == 'right' ||\n        this.position == 'after' && isLtr ||\n        this.position == 'before' && !isLtr) {\n      return {overlayX: 'start', overlayY: 'center'};\n    }\n\n    throw getMdTooltipInvalidPositionError(this.position);\n  }\n/**\n * Updates the tooltip message and repositions the overlay according to the new message length\n * @return {?}\n */\nprivate _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      first.call(this._ngZone.onMicrotaskEmpty.asObservable()).subscribe(() => {\n        if (this._tooltipInstance) { /** @type {?} */((\n          this._overlayRef)).updatePosition();\n        }\n      });\n    }\n  }\n/**\n * Updates the tooltip class\n * @param {?} tooltipClass\n * @return {?}\n */\nprivate _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-tooltip], [mdTooltip], [mat-tooltip], [matTooltip]',\n  host: {\n    '(longpress)': 'show()',\n    '(focus)': 'show()',\n    '(blur)': 'hide(0)',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': 'hide(' + TOUCHEND_HIDE_DELAY + ')',\n  },\n  exportAs: 'mdTooltip, matTooltip',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: Overlay, },\n{type: ElementRef, },\n{type: ScrollDispatcher, },\n{type: ViewContainerRef, },\n{type: NgZone, },\n{type: Platform, },\n{type: AriaDescriber, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_TOOLTIP_SCROLL_STRATEGY, ] }, ]},\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'position': [{ type: Input, args: ['mdTooltipPosition', ] },],\n'disabled': [{ type: Input, args: ['mdTooltipDisabled', ] },],\n'_positionDeprecated': [{ type: Input, args: ['tooltip-position', ] },],\n'showDelay': [{ type: Input, args: ['mdTooltipShowDelay', ] },],\n'hideDelay': [{ type: Input, args: ['mdTooltipHideDelay', ] },],\n'message': [{ type: Input, args: ['mdTooltip', ] },],\n'tooltipClass': [{ type: Input, args: ['mdTooltipClass', ] },],\n'_deprecatedMessage': [{ type: Input, args: ['md-tooltip', ] },],\n'_matMessage': [{ type: Input, args: ['matTooltip', ] },],\n'_matPosition': [{ type: Input, args: ['matTooltipPosition', ] },],\n'_matDisabled': [{ type: Input, args: ['matTooltipDisabled', ] },],\n'_matHideDelay': [{ type: Input, args: ['matTooltipHideDelay', ] },],\n'_matShowDelay': [{ type: Input, args: ['matTooltipShowDelay', ] },],\n'_matClass': [{ type: Input, args: ['matTooltipClass', ] },],\n};\n}\n\nfunction MdTooltip_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTooltip.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTooltip.ctorParameters;\n/** @type {?} */\nMdTooltip.propDecorators;\n/** @type {?} */\nMdTooltip.prototype._overlayRef;\n/** @type {?} */\nMdTooltip.prototype._tooltipInstance;\n/** @type {?} */\nMdTooltip.prototype._position;\n/** @type {?} */\nMdTooltip.prototype._disabled;\n/** @type {?} */\nMdTooltip.prototype._tooltipClass;\n/**\n * The default delay in ms before showing the tooltip after show is called\n * @type {?}\n */\nMdTooltip.prototype.showDelay;\n/**\n * The default delay in ms before hiding the tooltip after hide is called\n * @type {?}\n */\nMdTooltip.prototype.hideDelay;\n/** @type {?} */\nMdTooltip.prototype._message;\n/** @type {?} */\nMdTooltip.prototype._enterListener;\n/** @type {?} */\nMdTooltip.prototype._leaveListener;\n/** @type {?} */\nMdTooltip.prototype._overlay;\n/** @type {?} */\nMdTooltip.prototype._elementRef;\n/** @type {?} */\nMdTooltip.prototype._scrollDispatcher;\n/** @type {?} */\nMdTooltip.prototype._viewContainerRef;\n/** @type {?} */\nMdTooltip.prototype._ngZone;\n/** @type {?} */\nMdTooltip.prototype._platform;\n/** @type {?} */\nMdTooltip.prototype._ariaDescriber;\n/** @type {?} */\nMdTooltip.prototype._scrollStrategy;\n/** @type {?} */\nMdTooltip.prototype._dir;\n}\n\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n/**\n * Internal component that wraps the tooltip's content.\n * \\@docs-private\n */\nexport class TooltipComponent {\n/**\n * Message to display in the tooltip\n */\nmessage: string;\n/**\n * Classes to be added to the tooltip. Supports the same syntax as `ngClass`.\n */\ntooltipClass: string|string[]|Set<string>|{[key: string]: any};\n/**\n * The timeout ID of any current timer set to show the tooltip\n */\n_showTimeoutId: number;\n/**\n * The timeout ID of any current timer set to hide the tooltip\n */\n_hideTimeoutId: number;\n/**\n * Property watched by the animation framework to show or hide the tooltip\n */\n_visibility: TooltipVisibility = 'initial';\n/**\n * Whether interactions on the page should close the tooltip\n */\nprivate _closeOnInteraction: boolean = false;\n/**\n * The transform origin used in the animation for showing and hiding the tooltip\n */\n_transformOrigin: string = 'bottom';\n/**\n * Subject for notifying that the tooltip has been hidden from the view\n */\nprivate _onHide: Subject<any> = new Subject();\n/**\n * @param {?} _dir\n * @param {?} _changeDetectorRef\n */\nconstructor(\nprivate _dir: Directionality,\nprivate _changeDetectorRef: ChangeDetectorRef) {}\n/**\n * Shows the tooltip with an animation originating from the provided origin\n * @param {?} position Position of the tooltip.\n * @param {?} delay Amount of milliseconds to the delay showing the tooltip.\n * @return {?}\n */\nshow(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    this._setTransformOrigin(position);\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n/**\n * Begins the animation to hide the tooltip after the provided delay in ms.\n * @param {?} delay Amount of milliseconds to delay showing the tooltip.\n * @return {?}\n */\nhide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n/**\n * Returns an observable that notifies when the tooltip has been hidden from view\n * @return {?}\n */\nafterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n/**\n * Whether the tooltip is being displayed\n * @return {?}\n */\nisVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n/**\n * Sets the tooltip transform origin according to the tooltip position\n * @param {?} value\n * @return {?}\n */\n_setTransformOrigin(value: TooltipPosition) {\n    const /** @type {?} */ isLtr = !this._dir || this._dir.value == 'ltr';\n    switch (value) {\n      case 'before': this._transformOrigin = isLtr ? 'right' : 'left'; break;\n      case 'after':  this._transformOrigin = isLtr ? 'left' : 'right'; break;\n      case 'left':   this._transformOrigin = 'right'; break;\n      case 'right':  this._transformOrigin = 'left'; break;\n      case 'above':  this._transformOrigin = 'bottom'; break;\n      case 'below':  this._transformOrigin = 'top'; break;\n      default: throw getMdTooltipInvalidPositionError(value);\n    }\n  }\n/**\n * @return {?}\n */\n_animationStart() {\n    this._closeOnInteraction = false;\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_animationDone(event: AnimationEvent): void {\n    const /** @type {?} */ toState = /** @type {?} */(( event.toState as TooltipVisibility));\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      // Note: as of Angular 4.3, the animations module seems to fire the `start` callback before\n      // the end if animations are disabled. Make this call async to ensure that it still fires\n      // at the appropriate time.\n      Promise.resolve().then(() => this._closeOnInteraction = true);\n    }\n  }\n/**\n * Interactions on the HTML body should close the tooltip immediately as defined in the\n * material design spec.\n * https://material.google.com/components/tooltips.html#tooltips-interaction\n * @return {?}\n */\n_handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n/**\n * Marks that the tooltip needs to be checked in the next change detection run.\n * Mainly used for rendering the initial text before positioning a tooltip, which\n * can be problematic in components with OnPush change detection.\n * @return {?}\n */\n_markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-tooltip-component, mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('state', [\n      state('initial, void, hidden', style({transform: 'scale(0)'})),\n      state('visible', style({transform: 'scale(1)'})),\n      transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n      transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n    ])\n  ],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: ChangeDetectorRef, },\n];\n}\n\nfunction TooltipComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nTooltipComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTooltipComponent.ctorParameters;\n/**\n * Message to display in the tooltip\n * @type {?}\n */\nTooltipComponent.prototype.message;\n/**\n * Classes to be added to the tooltip. Supports the same syntax as `ngClass`.\n * @type {?}\n */\nTooltipComponent.prototype.tooltipClass;\n/**\n * The timeout ID of any current timer set to show the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._showTimeoutId;\n/**\n * The timeout ID of any current timer set to hide the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._hideTimeoutId;\n/**\n * Property watched by the animation framework to show or hide the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._visibility;\n/**\n * Whether interactions on the page should close the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._closeOnInteraction;\n/**\n * The transform origin used in the animation for showing and hiding the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._transformOrigin;\n/**\n * Subject for notifying that the tooltip has been hidden from the view\n * @type {?}\n */\nTooltipComponent.prototype._onHide;\n/** @type {?} */\nTooltipComponent.prototype._dir;\n/** @type {?} */\nTooltipComponent.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {fadeInContent,transformPanel,transformPlaceholder,MdSelectModule,SELECT_ITEM_HEIGHT,SELECT_PANEL_MAX_HEIGHT,SELECT_MAX_OPTIONS_DISPLAYED,SELECT_TRIGGER_HEIGHT,SELECT_OPTION_HEIGHT_ADJUSTMENT,SELECT_PANEL_PADDING_X,SELECT_PANEL_INDENT_PADDING_X,SELECT_MULTIPLE_PANEL_PADDING_X,SELECT_PANEL_PADDING_Y,SELECT_PANEL_VIEWPORT_PADDING,MD_SELECT_SCROLL_STRATEGY,MD_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,MD_SELECT_SCROLL_STRATEGY_PROVIDER,MdSelectChange,MdSelectBase,_MdSelectMixinBase,MdSelectTrigger,MdSelect,MAT_SELECT_SCROLL_STRATEGY,MAT_SELECT_SCROLL_STRATEGY_PROVIDER,MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,MatSelect,MatSelectBase,MatSelectChange,MatSelectModule,MatSelectTrigger} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdSelect, MdSelectTrigger, MD_SELECT_SCROLL_STRATEGY_PROVIDER} from './select';\nimport {MdCommonModule, MdOptionModule} from '@angular/material/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nexport class MdSelectModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MdOptionModule,\n    MdCommonModule,\n  ],\n  exports: [MdSelect, MdSelectTrigger, MdOptionModule, MdCommonModule],\n  declarations: [MdSelect, MdSelectTrigger],\n  providers: [MD_SELECT_SCROLL_STRATEGY_PROVIDER]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSelectModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelectModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {DOWN_ARROW, END, ENTER, HOME, SPACE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  ConnectedOverlayDirective,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {filter, startWith} from '@angular/cdk/rxjs';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Renderer2,\n  Self,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  FloatPlaceholderType,\n  HasTabIndex,\n  MD_PLACEHOLDER_GLOBAL_OPTIONS,\n  MdOptgroup,\n  MdOption,\n  MdOptionSelectionChange,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n  PlaceholderOptions,\n} from '@angular/material/core';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {fadeInContent, transformPanel, transformPlaceholder} from './select-animations';\nimport {\n  getMdSelectDynamicMultipleError,\n  getMdSelectNonArrayValueError,\n  getMdSelectNonFunctionValueError,\n} from './select-errors';\n/**\n * The fixed height of every option element (option, group header etc.).\n */\nexport const SELECT_ITEM_HEIGHT = 48;\n/**\n * The max height of the select's overlay panel\n */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n/**\n * The max number of options visible at once in the select panel.\n */\nexport const SELECT_MAX_OPTIONS_DISPLAYED =\n    Math.floor(SELECT_PANEL_MAX_HEIGHT / SELECT_ITEM_HEIGHT);\n/**\n * The fixed height of the select's trigger element.\n */\nexport const SELECT_TRIGGER_HEIGHT = 30;\n/**\n * Must adjust for the difference in height between the option and the trigger,\n * so the text will align on the y axis.\n */\nexport const SELECT_OPTION_HEIGHT_ADJUSTMENT = (SELECT_ITEM_HEIGHT - SELECT_TRIGGER_HEIGHT) / 2;\n/**\n * The panel's padding on the x-axis\n */\nexport const SELECT_PANEL_PADDING_X = 16;\n/**\n * The panel's x axis padding if it is indented (e.g. there is an option group).\n */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n * \n * (SELECT_PADDING * 1.75) + 20 = 48\n * The padding is multiplied by 1.75 because the checkbox's margin is half the padding, and\n * the browser adds ~4px, because we're using inline elements.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.75 + 20;\n/**\n * The panel's padding on the y-axis. This padding indicates there are more\n * options available if you scroll.\n */\nexport const SELECT_PANEL_PADDING_Y = 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n/**\n * Default minimum width of the trigger based on the CSS.\n * Used as a fallback for server-side rendering.\n * \\@docs-private\n */\nconst SELECT_TRIGGER_MIN_WIDTH = 112;\n/**\n * Injection token that determines the scroll handling while a select is open.\n */\nexport const MD_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('md-select-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MD_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n/**\n * \\@docs-private\n */\nexport const MD_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MD_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MD_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Change event object that is emitted when the select value has changed.\n */\nexport class MdSelectChange {\n/**\n * @param {?} source\n * @param {?} value\n */\nconstructor(public source: MdSelect,\npublic value: any) { }\n}\n\nfunction MdSelectChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectChange.prototype.source;\n/** @type {?} */\nMdSelectChange.prototype.value;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdSelectBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdSelectBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectBase.prototype._renderer;\n/** @type {?} */\nMdSelectBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdSelectMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MdSelectBase), 'primary'));\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nexport class MdSelectTrigger {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-select-trigger, mat-select-trigger'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSelectTrigger_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectTrigger.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelectTrigger.ctorParameters;\n}\n\nexport class MdSelect extends _MdSelectMixinBase implements AfterContentInit, OnDestroy, OnInit,\n    ControlValueAccessor, CanColor, CanDisable, HasTabIndex {\n/**\n * Whether or not the overlay panel is open.\n */\nprivate _panelOpen = false;\n/**\n * Subscriptions to option events.\n */\nprivate _optionSubscription = Subscription.EMPTY;\n/**\n * Subscription to changes in the option list.\n */\nprivate _changeSubscription = Subscription.EMPTY;\n/**\n * Subscription to tab events while overlay is focused.\n */\nprivate _tabSubscription = Subscription.EMPTY;\n/**\n * Whether filling out the select is required in the form.\n */\nprivate _required: boolean = false;\n/**\n * The scroll position of the overlay panel, calculated to center the selected option.\n */\nprivate _scrollTop = 0;\n/**\n * The placeholder displayed in the trigger of the select.\n */\nprivate _placeholder: string;\n/**\n * Whether the component is in multiple selection mode.\n */\nprivate _multiple: boolean = false;\n/**\n * Comparison function to specify which option is displayed. Defaults to object equality.\n */\nprivate _compareWith = (o1: any, o2: any) => o1 === o2;\n/**\n * Deals with the selection logic.\n */\n_selectionModel: SelectionModel<MdOption>;\n/**\n * The animation state of the placeholder.\n */\nprivate _placeholderState = '';\n/**\n * Deals with configuring placeholder options\n */\nprivate _placeholderOptions: PlaceholderOptions;\n/**\n * The width of the trigger. Must be saved to set the min width of the overlay panel\n * and the width of the selected value.\n */\n_triggerWidth: number;\n/**\n * Manages keyboard events for options in the panel.\n */\n_keyManager: FocusKeyManager<MdOption>;\n/**\n * The width of the selected option's value. Must be set programmatically\n * to ensure its overflow is clipped, as it's absolutely positioned.\n */\n_selectedValueWidth: number;\n/**\n * View -> model callback called when value changes\n */\n_onChange: (value: any) => void = () => {};\n/**\n * View -> model callback called when select has been touched\n */\n_onTouched = () => {};\n/**\n * The IDs of child options to be passed to the aria-owns attribute.\n */\n_optionIds: string = '';\n/**\n * The value of the select panel's transform-origin property.\n */\n_transformOrigin: string = 'top';\n/**\n * Whether the panel's animation is done.\n */\n_panelDoneAnimating: boolean = false;\n/**\n * Strategy that will be used to handle scrolling while the select panel is open.\n */\n_scrollStrategy = this._scrollStrategyFactory();\n/**\n * The y-offset of the overlay panel in relation to the trigger's top start corner.\n * This must be adjusted to align the selected option text over the trigger text.\n * when the panel opens. Will change based on the y-position of the selected option.\n */\n_offsetY = 0;\n/**\n * This position config ensures that the top \"start\" corner of the overlay\n * is aligned with with the top \"start\" of the origin by default (overlapping\n * the trigger completely). If the panel cannot fit below the trigger, it\n * will fall back to a position above the trigger.\n */\n_positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n/**\n * Trigger that opens the select.\n */\ntrigger: ElementRef;\n/**\n * Overlay pane containing the options.\n */\noverlayDir: ConnectedOverlayDirective;\n/**\n * All of the defined select options.\n */\noptions: QueryList<MdOption>;\n/**\n * All of the defined groups of options.\n */\noptionGroups: QueryList<MdOptgroup>;\n/**\n * Classes to be passed to the select panel. Supports the same syntax as `ngClass`.\n */\npanelClass: string|string[]|Set<string>|{[key: string]: any};\n/**\n * User-supplied override of the trigger element.\n */\ncustomTrigger: MdSelectTrigger;\n/**\n * Placeholder to be shown if no value has been selected.\n * @return {?}\n */\nget placeholder() { return this._placeholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset placeholder(value: string) {\n    this._placeholder = value;\n\n    // Must wait to record the trigger width to ensure placeholder width is included.\n    Promise.resolve(null).then(() => this._setTriggerWidth());\n  }\n/**\n * Whether the component is required.\n * @return {?}\n */\nget required() { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: any) { this._required = coerceBooleanProperty(value); }\n/**\n * Whether the user should be allowed to select multiple options.\n * @return {?}\n */\nget multiple(): boolean { return this._multiple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMdSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n/**\n * A function to compare the option values with the selected values. The first argument\n * is a value from an option. The second is a value from the selection. A boolean\n * should be returned.\n * @return {?}\n */\nget compareWith() { return this._compareWith; }\n/**\n * @param {?} fn\n * @return {?}\n */\nset compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMdSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n/**\n * Whether to float the placeholder text.\n * @return {?}\n */\nget floatPlaceholder(): FloatPlaceholderType { return this._floatPlaceholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset floatPlaceholder(value: FloatPlaceholderType) {\n    this._floatPlaceholder = value || this._placeholderOptions.float || 'auto';\n  }\nprivate _floatPlaceholder: FloatPlaceholderType;\n/**\n * Value of the select control.\n * @return {?}\n */\nget value() { return this._value; }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\n    this.writeValue(newValue);\n    this._value = newValue;\n  }\nprivate _value: any;\n/**\n * Whether ripples for all options in the select are disabled.\n * @return {?}\n */\nget disableRipple(): boolean { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) {\n    this._disableRipple = coerceBooleanProperty(value);\n    this._setOptionDisableRipple();\n  }\nprivate _disableRipple: boolean = false;\n/**\n * Aria label of the select. If not specified, the placeholder will be used as label.\n */\nariaLabel: string = '';\n/**\n * Input that can be used to specify the `aria-labelledby` attribute.\n */\nariaLabelledby: string = '';\n/**\n * Combined stream of all of the child options' change events.\n * @return {?}\n */\nget optionSelectionChanges(): Observable<MdOptionSelectionChange> {\n    return merge(...this.options.map(option => option.onSelectionChange));\n  }\n/**\n * Event emitted when the select has been opened.\n */\nonOpen: EventEmitter<void> = new EventEmitter<void>();\n/**\n * Event emitted when the select has been closed.\n */\nonClose: EventEmitter<void> = new EventEmitter<void>();\n/**\n * Event emitted when the selected value has been changed by the user.\n */\nchange: EventEmitter<MdSelectChange> = new EventEmitter<MdSelectChange>();\n/**\n * Event that emits whenever the raw value of the select changes. This is here primarily\n * to facilitate the two-way binding for the `value` input.\n * \\@docs-private\n */\nvalueChange = new EventEmitter<any>();\n/**\n * @param {?} _viewportRuler\n * @param {?} _changeDetectorRef\n * @param {?} _platform\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _dir\n * @param {?} _parentForm\n * @param {?} _parentFormGroup\n * @param {?} _control\n * @param {?} tabIndex\n * @param {?} placeholderOptions\n * @param {?} _scrollStrategyFactory\n */\nconstructor(\nprivate _viewportRuler: ViewportRuler,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _platform: Platform,\n    renderer: Renderer2,\n    elementRef: ElementRef,\nprivate _dir: Directionality,\nprivate _parentForm: NgForm,\nprivate _parentFormGroup: FormGroupDirective,\npublic _control: NgControl,\n     tabIndex: string,\n      placeholderOptions: PlaceholderOptions,\nprivate _scrollStrategyFactory) {\n\n    super(renderer, elementRef);\n\n    if (this._control) {\n      this._control.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n    this._placeholderOptions = placeholderOptions ? placeholderOptions : {};\n    this.floatPlaceholder = this._placeholderOptions.float || 'auto';\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._selectionModel = new SelectionModel<MdOption>(this.multiple, undefined, false);\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._initKeyManager();\n\n    this._changeSubscription = startWith.call(this.options.changes, null).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._dropSubscriptions();\n    this._changeSubscription.unsubscribe();\n    this._tabSubscription.unsubscribe();\n  }\n/**\n * Toggles the overlay panel open or closed.\n * @return {?}\n */\ntoggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n/**\n * Opens the overlay panel.\n * @return {?}\n */\nopen(): void {\n    if (this.disabled || !this.options.length) {\n      return;\n    }\n\n    if (!this._triggerWidth) {\n      this._setTriggerWidth();\n    }\n\n    this._calculateOverlayPosition();\n    this._placeholderState = this._floatPlaceholderState();\n    this._panelOpen = true;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Closes the overlay panel and focuses the host element.\n * @return {?}\n */\nclose(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n\n      if (this._selectionModel.isEmpty()) {\n        this._placeholderState = '';\n      }\n\n      this._changeDetectorRef.markForCheck();\n      this.focus();\n    }\n  }\n/**\n * Sets the select's value. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} value New value to be written to the model.\n * @return {?}\n */\nwriteValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n/**\n * Saves a callback function to be invoked when the select's value\n * changes from user input. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the value changes.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n/**\n * Saves a callback function to be invoked when the select is blurred\n * by the user. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the component has been touched.\n * @return {?}\n */\nregisterOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n/**\n * Disables the select. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} isDisabled Sets whether the component is disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Whether or not the overlay panel is open.\n * @return {?}\n */\nget panelOpen(): boolean {\n    return this._panelOpen;\n  }\n/**\n * The currently selected option.\n * @return {?}\n */\nget selected(): MdOption | MdOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n/**\n * The value displayed in the trigger.\n * @return {?}\n */\nget triggerValue(): string {\n    if (!this._selectionModel || this._selectionModel.isEmpty()) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const /** @type {?} */ selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n/**\n * Whether the element is in RTL mode.\n * @return {?}\n */\n_isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n/**\n * Sets the width of the trigger element. This is necessary to match\n * the overlay width to the trigger width.\n * @return {?}\n */\nprivate _setTriggerWidth(): void {\n    this._triggerWidth = this._platform.isBrowser ? this._getTriggerRect().width :\n        SELECT_TRIGGER_MIN_WIDTH;\n\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Handles the keyboard interactions of a closed select.\n * @param {?} event\n * @return {?}\n */\n_handleClosedKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      if (event.keyCode === ENTER || event.keyCode === SPACE) {\n        event.preventDefault(); // prevents the page from scrolling down when pressing space\n        this.open();\n      } else if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {\n        this._handleArrowKey(event);\n      }\n    }\n  }\n/**\n * Handles keypresses inside the panel.\n * @param {?} event\n * @return {?}\n */\n_handlePanelKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === HOME || event.keyCode === END) {\n      event.preventDefault();\n      event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                               this._keyManager.setLastItemActive();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n/**\n * When the panel element is finished transforming in (though not fading in), it\n * emits an event and focuses an option if the panel is open.\n * @return {?}\n */\n_onPanelDone(): void {\n    if (this.panelOpen) {\n      this._focusCorrectOption();\n      this.onOpen.emit();\n    } else {\n      this.onClose.emit();\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * When the panel content is done fading in, the _panelDoneAnimating property is\n * set so the proper class can be added to the panel.\n * @return {?}\n */\n_onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n * \"blur\" to the panel when it opens, causing a false positive.\n * @return {?}\n */\n_onBlur() {\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * Callback that is invoked when the overlay panel has been attached.\n * @return {?}\n */\n_onAttached(): void {\n    this._calculateOverlayOffsetX();\n    this._setScrollTop();\n  }\n/**\n * Whether the select has a value.\n * @return {?}\n */\n_hasValue(): boolean {\n    return this._selectionModel && this._selectionModel.hasValue();\n  }\n/**\n * Whether the select is in an error state.\n * @return {?}\n */\n_isErrorState(): boolean {\n    const /** @type {?} */ isInvalid = this._control && this._control.invalid;\n    const /** @type {?} */ isTouched = this._control && this._control.touched;\n    const /** @type {?} */ isSubmitted = (this._parentFormGroup && this._parentFormGroup.submitted) ||\n        (this._parentForm && this._parentForm.submitted);\n\n    return !!(isInvalid && (isTouched || isSubmitted));\n  }\n/**\n * Sets the scroll position of the scroll container. This must be called after\n * the overlay pane is attached or the scroll container element will not yet be\n * present in the DOM.\n * @return {?}\n */\nprivate _setScrollTop(): void {\n    const /** @type {?} */ scrollContainer =\n        this.overlayDir.overlayRef.overlayElement.querySelector('.mat-select-panel'); /** @type {?} */((\n    scrollContainer)).scrollTop = this._scrollTop;\n  }\n/**\n * @return {?}\n */\nprivate _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this._control ? this._control.value : this._value);\n    });\n  }\n/**\n * Sets the selected option based on a value. If no option can be\n * found with the designated value, the select trigger is cleared.\n * @param {?} value\n * @param {?=} isUserInput\n * @return {?}\n */\nprivate _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    const /** @type {?} */ isArray = Array.isArray(value);\n\n    if (this.multiple && value && !isArray) {\n      throw getMdSelectNonArrayValueError();\n    }\n\n    this._clearSelection();\n\n    if (isArray) {\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const /** @type {?} */ correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(this.options.toArray().indexOf(correspondingOption));\n      }\n    }\n\n    this._setValueWidth();\n\n    if (this._selectionModel.isEmpty()) {\n      this._placeholderState = '';\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Finds and selects and option based on its value.\n * @param {?} value\n * @param {?=} isUserInput\n * @return {?} Option that has the corresponding value.\n */\nprivate _selectValue(value: any, isUserInput = false): MdOption | undefined {\n    const /** @type {?} */ correspondingOption = this.options.find((option: MdOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch ( /** @type {?} */error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n/**\n * Clears the select trigger and deselects every option in the list.\n * @param {?=} skip Option that should not be deselected.\n * @return {?}\n */\nprivate _clearSelection(skip?: MdOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n  }\n/**\n * @return {?}\n */\nprivate _getTriggerRect(): ClientRect {\n    return this.trigger.nativeElement.getBoundingClientRect();\n  }\n/**\n * Sets up a key manager to listen to keyboard events on the overlay panel.\n * @return {?}\n */\nprivate _initKeyManager() {\n    this._keyManager = new FocusKeyManager<MdOption>(this.options).withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close());\n  }\n/**\n * Drops current option subscriptions and IDs and resets from scratch.\n * @return {?}\n */\nprivate _resetOptions(): void {\n    this._dropSubscriptions();\n    this._listenToOptions();\n    this._setOptionIds();\n    this._setOptionMultiple();\n    this._setOptionDisableRipple();\n  }\n/**\n * Listens to user-generated selection events on each option.\n * @return {?}\n */\nprivate _listenToOptions(): void {\n    this._optionSubscription = filter.call(this.optionSelectionChanges,\n      event => event.isUserInput).subscribe(event => {\n        this._onSelect(event.source);\n        this._setValueWidth();\n\n        if (!this.multiple) {\n          this.close();\n        }\n      });\n  }\n/**\n * Invoked when an option is clicked.\n * @param {?} option\n * @return {?}\n */\nprivate _onSelect(option: MdOption): void {\n    const /** @type {?} */ wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      wasSelected ? option.deselect() : option.select();\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n/**\n * Sorts the model values, ensuring that they keep the same\n * order that they have in the panel.\n * @return {?}\n */\nprivate _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n    }\n  }\n/**\n * Unsubscribes from all option subscriptions.\n * @return {?}\n */\nprivate _dropSubscriptions(): void {\n    this._optionSubscription.unsubscribe();\n  }\n/**\n * Emits change event to set the model value.\n * @param {?=} fallbackValue\n * @return {?}\n */\nprivate _propagateChanges(fallbackValue?: any): void {\n    let /** @type {?} */ valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this._onChange(valueToEmit);\n    this.change.emit(new MdSelectChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n  }\n/**\n * Records option IDs to pass to the aria-owns property.\n * @return {?}\n */\nprivate _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n/**\n * Sets the `multiple` property on each option. The promise is necessary\n * in order to avoid Angular errors when modifying the property after init.\n * @return {?}\n */\nprivate _setOptionMultiple() {\n    if (this.multiple) {\n      Promise.resolve(null).then(() => {\n        this.options.forEach(option => option.multiple = this.multiple);\n      });\n    }\n  }\n/**\n * Sets the `disableRipple` property on each option.\n * @return {?}\n */\nprivate _setOptionDisableRipple() {\n    if (this.options) {\n      this.options.forEach(option => option.disableRipple = this.disableRipple);\n    }\n  }\n/**\n * Must set the width of the selected option's value programmatically\n * because it is absolutely positioned and otherwise will not clip\n * overflow. The selection arrow is 9px wide, add 4px of padding = 13\n * @return {?}\n */\nprivate _setValueWidth() {\n    this._selectedValueWidth = this._triggerWidth - 13;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Focuses the selected item. If no option is selected, it will focus\n * the first item instead.\n * @return {?}\n */\nprivate _focusCorrectOption(): void {\n    if (this._selectionModel.isEmpty()) {\n      this._keyManager.setFirstItemActive();\n    } else {\n      this._keyManager.setActiveItem( /** @type {?} */((this._getOptionIndex(this._selectionModel.selected[0]))));\n    }\n  }\n/**\n * Focuses the select element.\n * @return {?}\n */\nfocus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n/**\n * Gets the index of the provided option in the option list.\n * @param {?} option\n * @return {?}\n */\nprivate _getOptionIndex(option: MdOption): number | undefined {\n    return this.options.reduce((result: number, current: MdOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n/**\n * Calculates the scroll position and x- and y-offsets of the overlay panel.\n * @return {?}\n */\nprivate _calculateOverlayPosition(): void {\n    const /** @type {?} */ items = this._getItemCount();\n    const /** @type {?} */ panelHeight = Math.min(items * SELECT_ITEM_HEIGHT, SELECT_PANEL_MAX_HEIGHT);\n    const /** @type {?} */ scrollContainerHeight = items * SELECT_ITEM_HEIGHT;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const /** @type {?} */ maxScroll = scrollContainerHeight - panelHeight;\n\n    if (this._hasValue()) {\n      let /** @type {?} */ selectedOptionOffset = /** @type {?} */(( this._getOptionIndex(this._selectionModel.selected[0])));\n\n      selectedOptionOffset += MdOption.countGroupLabelsBeforeOption(selectedOptionOffset,\n          this.options, this.optionGroups);\n\n      // We must maintain a scroll buffer so the selected option will be scrolled to the\n      // center of the overlay panel rather than the top.\n      const /** @type {?} */ scrollBuffer = panelHeight / 2;\n      this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n      this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n    } else {\n      // If no option is selected, the panel centers on the first option. In this case,\n      // we must only adjust for the height difference between the option element\n      // and the trigger element, then multiply it by -1 to ensure the panel moves\n      // in the correct direction up the page.\n      let /** @type {?} */ groupLabels = MdOption.countGroupLabelsBeforeOption(0, this.options, this.optionGroups);\n\n      this._offsetY = (SELECT_ITEM_HEIGHT - SELECT_TRIGGER_HEIGHT) / 2 * -1 -\n          (groupLabels * SELECT_ITEM_HEIGHT);\n    }\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n/**\n * Calculates the scroll position of the select's overlay panel.\n * \n * Attempts to center the selected option in the panel. If the option is\n * too high or too low in the panel to be scrolled to the center, it clamps the\n * scroll position to the min or max scroll positions respectively.\n * @param {?} selectedIndex\n * @param {?} scrollBuffer\n * @param {?} maxScroll\n * @return {?}\n */\n_calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const /** @type {?} */ optionOffsetFromScrollTop = SELECT_ITEM_HEIGHT * selectedIndex;\n    const /** @type {?} */ halfOptionHeight = SELECT_ITEM_HEIGHT / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const /** @type {?} */ optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return clampValue(0, optimalScrollPosition, maxScroll);\n  }\n/**\n * Figures out the appropriate animation state for the placeholder.\n * @return {?}\n */\n_getPlaceholderAnimationState(): string {\n    if (this.floatPlaceholder === 'never') {\n      return '';\n    }\n\n    if (this.floatPlaceholder === 'always') {\n      return this._floatPlaceholderState();\n    }\n\n    return this._placeholderState;\n  }\n/**\n * Determines the CSS `opacity` of the placeholder element.\n * @return {?}\n */\n_getPlaceholderOpacity(): string {\n    return (this.floatPlaceholder !== 'never' || this._selectionModel.isEmpty()) ? '1' : '0';\n  }\n/**\n * Returns the aria-label of the select component.\n * @return {?}\n */\nget _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n/**\n * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n * This must be adjusted to align the selected option text over the trigger text when\n * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n * can't be calculated until the panel has been attached, because we need to know the\n * content width in order to constrain the panel within the viewport.\n * @return {?}\n */\nprivate _calculateOverlayOffsetX(): void {\n    const /** @type {?} */ overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n    const /** @type {?} */ isRtl = this._isRtl();\n    const /** @type {?} */ paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let /** @type {?} */ offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let /** @type {?} */ selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const /** @type {?} */ leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const /** @type {?} */ rightOverflow = overlayRect.right + offsetX - viewportRect.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n/**\n * Calculates the y-offset of the select's overlay panel in relation to the\n * top start corner of the trigger. It has to be adjusted in order for the\n * selected option to be aligned over the trigger when the panel opens.\n * @param {?} selectedIndex\n * @param {?} scrollBuffer\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    let /** @type {?} */ optionOffsetFromPanelTop: number;\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * SELECT_ITEM_HEIGHT;\n    } else if (this._scrollTop === maxScroll) {\n      const /** @type {?} */ firstDisplayedIndex = this._getItemCount() - SELECT_MAX_OPTIONS_DISPLAYED;\n      const /** @type {?} */ selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop =\n          selectedDisplayIndex * SELECT_ITEM_HEIGHT + SELECT_PANEL_PADDING_Y;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - SELECT_ITEM_HEIGHT / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - SELECT_OPTION_HEIGHT_ADJUSTMENT;\n  }\n/**\n * Checks that the attempted overlay position will fit within the viewport.\n * If it will not fit, tries to adjust the scroll position and the associated\n * y-offset so the panel can open fully on-screen. If it still won't fit,\n * sets the offset back to 0 to allow the fallback position to take over.\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _checkOverlayWithinViewport(maxScroll: number): void {\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n    const /** @type {?} */ triggerRect = this._getTriggerRect();\n\n    const /** @type {?} */ topSpaceAvailable = triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const /** @type {?} */ bottomSpaceAvailable =\n        viewportRect.height - triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const /** @type {?} */ panelHeightTop = Math.abs(this._offsetY);\n    const /** @type {?} */ totalPanelHeight =\n        Math.min(this._getItemCount() * SELECT_ITEM_HEIGHT, SELECT_PANEL_MAX_HEIGHT);\n    const /** @type {?} */ panelHeightBottom = totalPanelHeight - panelHeightTop - triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n/**\n * Adjusts the overlay panel up to fit in the viewport.\n * @param {?} panelHeightBottom\n * @param {?} bottomSpaceAvailable\n * @return {?}\n */\nprivate _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    const /** @type {?} */ distanceBelowViewport = panelHeightBottom - bottomSpaceAvailable;\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n/**\n * Adjusts the overlay panel down to fit in the viewport.\n * @param {?} panelHeightTop\n * @param {?} topSpaceAvailable\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    const /** @type {?} */ distanceAboveViewport = panelHeightTop - topSpaceAvailable;\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n/**\n * Sets the transform origin point based on the selected option.\n * @return {?}\n */\nprivate _getOriginBasedOnOption(): string {\n    const /** @type {?} */ originY =\n        Math.abs(this._offsetY) - SELECT_OPTION_HEIGHT_ADJUSTMENT + SELECT_ITEM_HEIGHT / 2;\n    return `50% ${originY}px 0px`;\n  }\n/**\n * Figures out the floating placeholder state value.\n * @return {?}\n */\nprivate _floatPlaceholderState(): string {\n    return this._isRtl() ? 'floating-rtl' : 'floating-ltr';\n  }\n/**\n * Handles the user pressing the arrow keys on a closed select.\n * @param {?} event\n * @return {?}\n */\nprivate _handleArrowKey(event: KeyboardEvent): void {\n    if (this._multiple) {\n      event.preventDefault();\n      this.open();\n    } else {\n      const /** @type {?} */ prevActiveItem = this._keyManager.activeItem;\n\n      // Cycle though the select options even when the select is closed,\n      // matching the behavior of the native select element.\n      // TODO(crisbeto): native selects also cycle through the options with left/right arrows,\n      // however the key manager only supports up/down at the moment.\n      this._keyManager.onKeydown(event);\n\n      const /** @type {?} */ currentActiveItem = /** @type {?} */(( this._keyManager.activeItem as MdOption));\n\n      if (currentActiveItem !== prevActiveItem) {\n        this._clearSelection();\n        this._setSelectionByValue(currentActiveItem.value, true);\n        this._propagateChanges();\n      }\n    }\n  }\n/**\n * Calculates the amount of items in the select. This includes options and group labels.\n * @return {?}\n */\nprivate _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-select, mat-select',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['color', 'disabled', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': '_isErrorState()',\n    '[attr.aria-owns]': '_optionIds',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': '_isErrorState()',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleClosedKeydown($event)',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    transformPlaceholder,\n    transformPanel,\n    fadeInContent\n  ],\n  exportAs: 'mdSelect, matSelect',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewportRuler, },\n{type: ChangeDetectorRef, },\n{type: Platform, },\n{type: Renderer2, },\n{type: ElementRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: NgForm, decorators: [{ type: Optional }, ]},\n{type: FormGroupDirective, decorators: [{ type: Optional }, ]},\n{type: NgControl, decorators: [{ type: Self }, { type: Optional }, ]},\n{type: undefined, decorators: [{ type: Attribute, args: ['tabindex', ] }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_PLACEHOLDER_GLOBAL_OPTIONS, ] }, ]},\n{type: undefined, decorators: [{ type: Inject, args: [MD_SELECT_SCROLL_STRATEGY, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'trigger': [{ type: ViewChild, args: ['trigger', ] },],\n'overlayDir': [{ type: ViewChild, args: [ConnectedOverlayDirective, ] },],\n'options': [{ type: ContentChildren, args: [MdOption, { descendants: true }, ] },],\n'optionGroups': [{ type: ContentChildren, args: [MdOptgroup, ] },],\n'panelClass': [{ type: Input },],\n'customTrigger': [{ type: ContentChild, args: [MdSelectTrigger, ] },],\n'placeholder': [{ type: Input },],\n'required': [{ type: Input },],\n'multiple': [{ type: Input },],\n'compareWith': [{ type: Input },],\n'floatPlaceholder': [{ type: Input },],\n'value': [{ type: Input },],\n'disableRipple': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'onOpen': [{ type: Output },],\n'onClose': [{ type: Output },],\n'change': [{ type: Output },],\n'valueChange': [{ type: Output },],\n};\n}\n\nfunction MdSelect_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelect.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelect.ctorParameters;\n/** @type {?} */\nMdSelect.propDecorators;\n/**\n * Whether or not the overlay panel is open.\n * @type {?}\n */\nMdSelect.prototype._panelOpen;\n/**\n * Subscriptions to option events.\n * @type {?}\n */\nMdSelect.prototype._optionSubscription;\n/**\n * Subscription to changes in the option list.\n * @type {?}\n */\nMdSelect.prototype._changeSubscription;\n/**\n * Subscription to tab events while overlay is focused.\n * @type {?}\n */\nMdSelect.prototype._tabSubscription;\n/**\n * Whether filling out the select is required in the form.\n * @type {?}\n */\nMdSelect.prototype._required;\n/**\n * The scroll position of the overlay panel, calculated to center the selected option.\n * @type {?}\n */\nMdSelect.prototype._scrollTop;\n/**\n * The placeholder displayed in the trigger of the select.\n * @type {?}\n */\nMdSelect.prototype._placeholder;\n/**\n * Whether the component is in multiple selection mode.\n * @type {?}\n */\nMdSelect.prototype._multiple;\n/**\n * Comparison function to specify which option is displayed. Defaults to object equality.\n * @type {?}\n */\nMdSelect.prototype._compareWith;\n/**\n * Deals with the selection logic.\n * @type {?}\n */\nMdSelect.prototype._selectionModel;\n/**\n * The animation state of the placeholder.\n * @type {?}\n */\nMdSelect.prototype._placeholderState;\n/**\n * Deals with configuring placeholder options\n * @type {?}\n */\nMdSelect.prototype._placeholderOptions;\n/**\n * The width of the trigger. Must be saved to set the min width of the overlay panel\n * and the width of the selected value.\n * @type {?}\n */\nMdSelect.prototype._triggerWidth;\n/**\n * Manages keyboard events for options in the panel.\n * @type {?}\n */\nMdSelect.prototype._keyManager;\n/**\n * The width of the selected option's value. Must be set programmatically\n * to ensure its overflow is clipped, as it's absolutely positioned.\n * @type {?}\n */\nMdSelect.prototype._selectedValueWidth;\n/**\n * View -> model callback called when value changes\n * @type {?}\n */\nMdSelect.prototype._onChange;\n/**\n * View -> model callback called when select has been touched\n * @type {?}\n */\nMdSelect.prototype._onTouched;\n/**\n * The IDs of child options to be passed to the aria-owns attribute.\n * @type {?}\n */\nMdSelect.prototype._optionIds;\n/**\n * The value of the select panel's transform-origin property.\n * @type {?}\n */\nMdSelect.prototype._transformOrigin;\n/**\n * Whether the panel's animation is done.\n * @type {?}\n */\nMdSelect.prototype._panelDoneAnimating;\n/**\n * Strategy that will be used to handle scrolling while the select panel is open.\n * @type {?}\n */\nMdSelect.prototype._scrollStrategy;\n/**\n * The y-offset of the overlay panel in relation to the trigger's top start corner.\n * This must be adjusted to align the selected option text over the trigger text.\n * when the panel opens. Will change based on the y-position of the selected option.\n * @type {?}\n */\nMdSelect.prototype._offsetY;\n/**\n * This position config ensures that the top \"start\" corner of the overlay\n * is aligned with with the top \"start\" of the origin by default (overlapping\n * the trigger completely). If the panel cannot fit below the trigger, it\n * will fall back to a position above the trigger.\n * @type {?}\n */\nMdSelect.prototype._positions;\n/**\n * Trigger that opens the select.\n * @type {?}\n */\nMdSelect.prototype.trigger;\n/**\n * Overlay pane containing the options.\n * @type {?}\n */\nMdSelect.prototype.overlayDir;\n/**\n * All of the defined select options.\n * @type {?}\n */\nMdSelect.prototype.options;\n/**\n * All of the defined groups of options.\n * @type {?}\n */\nMdSelect.prototype.optionGroups;\n/**\n * Classes to be passed to the select panel. Supports the same syntax as `ngClass`.\n * @type {?}\n */\nMdSelect.prototype.panelClass;\n/**\n * User-supplied override of the trigger element.\n * @type {?}\n */\nMdSelect.prototype.customTrigger;\n/** @type {?} */\nMdSelect.prototype._floatPlaceholder;\n/** @type {?} */\nMdSelect.prototype._value;\n/** @type {?} */\nMdSelect.prototype._disableRipple;\n/**\n * Aria label of the select. If not specified, the placeholder will be used as label.\n * @type {?}\n */\nMdSelect.prototype.ariaLabel;\n/**\n * Input that can be used to specify the `aria-labelledby` attribute.\n * @type {?}\n */\nMdSelect.prototype.ariaLabelledby;\n/**\n * Event emitted when the select has been opened.\n * @type {?}\n */\nMdSelect.prototype.onOpen;\n/**\n * Event emitted when the select has been closed.\n * @type {?}\n */\nMdSelect.prototype.onClose;\n/**\n * Event emitted when the selected value has been changed by the user.\n * @type {?}\n */\nMdSelect.prototype.change;\n/**\n * Event that emits whenever the raw value of the select changes. This is here primarily\n * to facilitate the two-way binding for the `value` input.\n * \\@docs-private\n * @type {?}\n */\nMdSelect.prototype.valueChange;\n/** @type {?} */\nMdSelect.prototype._viewportRuler;\n/** @type {?} */\nMdSelect.prototype._changeDetectorRef;\n/** @type {?} */\nMdSelect.prototype._platform;\n/** @type {?} */\nMdSelect.prototype._dir;\n/** @type {?} */\nMdSelect.prototype._parentForm;\n/** @type {?} */\nMdSelect.prototype._parentFormGroup;\n/** @type {?} */\nMdSelect.prototype._control;\n/** @type {?} */\nMdSelect.prototype._scrollStrategyFactory;\n}\n\n/**\n * Clamps a value n between min and max values.\n * @param {?} min\n * @param {?} n\n * @param {?} max\n * @return {?}\n */\nfunction clampValue(min: number, n: number, max: number): number {\n  return Math.min(Math.max(min, n), max);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * \\@docs-private\n * @return {?}\n */\nexport function getMdSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * \\@docs-private\n * @return {?}\n */\nexport function getMdSelectNonArrayValueError(): Error {\n  return Error('Cannot assign truthy non-array value to select in `multiple` mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n * @return {?}\n */\nexport function getMdSelectNonFunctionValueError(): Error {\n  return Error('Cannot assign a non-function value to `compareWith`.');\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n/**\n * This animation shrinks the placeholder text to 75% of its normal size and translates\n * it to either the top left corner (ltr) or top right corner (rtl) of the trigger,\n * depending on the text direction of the application.\n */\nexport const transformPlaceholder: AnimationTriggerMetadata = trigger('transformPlaceholder', [\n  state('floating-ltr', style({\n    top: '-22px',\n    left: '-2px',\n    transform: 'scale(0.75)'\n  })),\n  state('floating-rtl', style({\n    top: '-22px',\n    left: '2px',\n    transform: 'scale(0.75)'\n  })),\n  transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n]);\n/**\n * This animation transforms the select's overlay panel on and off the page.\n * \n * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n * side to ensure the option text correctly overlaps the trigger text.\n * \n * When the panel is removed from the DOM, it simply fades out linearly.\n */\nexport const transformPanel: AnimationTriggerMetadata = trigger('transformPanel', [\n  state('showing', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n    transform: 'scaleY(1)'\n  })),\n  state('showing-multiple', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n    transform: 'scaleY(1)'\n  })),\n  transition('void => *', [\n    style({\n      opacity: 0,\n      minWidth: '100%',\n      transform: 'scaleY(0)'\n    }),\n    animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n  ]),\n  transition('* => void', [\n    animate('250ms 100ms linear', style({opacity: 0}))\n  ])\n]);\n/**\n * This animation fades in the background color and text content of the\n * select's options. It is time delayed to occur 100ms after the overlay\n * panel has transformed in.\n */\nexport const fadeInContent: AnimationTriggerMetadata = trigger('fadeInContent', [\n  state('showing', style({opacity: 1})),\n  transition('void => showing', [\n    style({opacity: 0}),\n    animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n  ])\n]);\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MD_MENU_SCROLL_STRATEGY,fadeInItems,transformMenu,MdMenuModule,MdMenu,MdMenuDefaultOptions,MD_MENU_DEFAULT_OPTIONS,MdMenuItem,MdMenuTrigger,MdMenuPanel,MenuPositionX,MenuPositionY,MAT_MENU_DEFAULT_OPTIONS,MatMenu,MatMenuDefaultOptions,MatMenuItem,MatMenuModule,MatMenuPanel,MatMenuTrigger} from './public_api';\n\nexport {MdMenuItemBase as ɵa,_MdMenuItemMixinBase as ɵb} from './menu-item';\nexport {MD_MENU_SCROLL_STRATEGY_PROVIDER as ɵd,MD_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY as ɵc} from './menu-trigger';","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdCommonModule} from '@angular/material/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MdMenu, MD_MENU_DEFAULT_OPTIONS} from './menu-directive';\nimport {MdMenuItem} from './menu-item';\nimport {MdMenuTrigger, MD_MENU_SCROLL_STRATEGY_PROVIDER} from './menu-trigger';\nimport {MdRippleModule} from '@angular/material/core';\nexport class MdMenuModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    OverlayModule,\n    CommonModule,\n    MdRippleModule,\n    MdCommonModule,\n  ],\n  exports: [MdMenu, MdMenuItem, MdMenuTrigger, MdCommonModule],\n  declarations: [MdMenu, MdMenuItem, MdMenuTrigger],\n  providers: [\n    MD_MENU_SCROLL_STRATEGY_PROVIDER,\n    {\n      provide: MD_MENU_DEFAULT_OPTIONS,\n      useValue: {\n        overlapTrigger: true,\n        xPosition: 'after',\n        yPosition: 'below',\n      },\n    }\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdMenuModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenuModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenuModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter, RxChain} from '@angular/cdk/rxjs';\nimport {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MdMenu} from './menu-directive';\nimport {throwMdMenuMissingError} from './menu-errors';\nimport {MdMenuItem} from './menu-item';\nimport {MdMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n/**\n * Injection token that determines the scroll handling while the menu is open.\n */\nexport const MD_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('md-menu-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MD_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n/**\n * \\@docs-private\n */\nexport const MD_MENU_SCROLL_STRATEGY_PROVIDER = {\n  provide: MD_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MD_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Default top padding of the menu panel.\n */\nexport const MENU_PANEL_TOP_PADDING = 8;\n/**\n * This directive is intended to be used in conjunction with an md-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\nexport class MdMenuTrigger implements AfterViewInit, OnDestroy {\nprivate _portal: TemplatePortal<any>;\nprivate _overlayRef: OverlayRef | null = null;\nprivate _menuOpen: boolean = false;\nprivate _closeSubscription = Subscription.EMPTY;\nprivate _positionSubscription = Subscription.EMPTY;\nprivate _hoverSubscription = Subscription.EMPTY;\nprivate _openedByMouse: boolean = false;\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedMdMenuTriggerFor(): MdMenuPanel {\n    return this.menu;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedMdMenuTriggerFor(v: MdMenuPanel) {\n    this.menu = v;\n  }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedMatMenuTriggerFor(): MdMenuPanel {\n    return this.menu;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedMatMenuTriggerFor(v: MdMenuPanel) {\n    this.menu = v;\n  }\n/**\n * @return {?}\n */\nget _matMenuTriggerFor(): MdMenuPanel {\n    return this.menu;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matMenuTriggerFor(v: MdMenuPanel) {\n    this.menu = v;\n  }\n/**\n * References the menu instance that the trigger is associated with.\n */\nmenu: MdMenuPanel;\n/**\n * Event emitted when the associated menu is opened.\n */\nonMenuOpen = new EventEmitter<void>();\n/**\n * Event emitted when the associated menu is closed.\n */\nonMenuClose = new EventEmitter<void>();\n/**\n * @param {?} _overlay\n * @param {?} _element\n * @param {?} _viewContainerRef\n * @param {?} _scrollStrategy\n * @param {?} _parentMenu\n * @param {?} _menuItemInstance\n * @param {?} _dir\n */\nconstructor(private _overlay: Overlay,\nprivate _element: ElementRef,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _scrollStrategy,\nprivate _parentMenu: MdMenu,\nprivate _menuItemInstance: MdMenuItem,\nprivate _dir: Directionality) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this.closeMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if (reason === 'click' && this._parentMenu) {\n        this._parentMenu.close.emit(reason);\n      }\n    });\n\n    if (this.triggersSubmenu()) {\n      // Subscribe to changes in the hovered item in order to toggle the panel.\n      this._hoverSubscription = filter\n          .call(this._parentMenu.hover(), active => active === this._menuItemInstance)\n          .subscribe(() => {\n            this._openedByMouse = true;\n            this.openMenu();\n          });\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n/**\n * Whether the menu is open.\n * @return {?}\n */\nget menuOpen(): boolean {\n    return this._menuOpen;\n  }\n/**\n * The text direction of the containing app.\n * @return {?}\n */\nget dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n/**\n * Whether the menu triggers a sub-menu or a top-level one.\n * @return {?}\n */\ntriggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n/**\n * Toggles the menu between the open and closed states.\n * @return {?}\n */\ntoggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n/**\n * Opens the menu.\n * @return {?}\n */\nopenMenu(): void {\n    if (!this._menuOpen) {\n      this._createOverlay().attach(this._portal);\n      this._closeSubscription = this._menuClosingActions().subscribe(() => this.menu.close.emit());\n      this._initMenu();\n\n      if (this.menu instanceof MdMenu) {\n        this.menu._startAnimation();\n      }\n    }\n  }\n/**\n * Closes the menu.\n * @return {?}\n */\ncloseMenu(): void {\n    if (this._overlayRef && this.menuOpen) {\n      this._resetMenu();\n      this._overlayRef.detach();\n      this._closeSubscription.unsubscribe();\n      this.menu.close.emit();\n\n      if (this.menu instanceof MdMenu) {\n        this.menu._resetAnimation();\n      }\n    }\n  }\n/**\n * Focuses the menu trigger.\n * @return {?}\n */\nfocus() {\n    this._element.nativeElement.focus();\n  }\n/**\n * This method sets the menu state to open and focuses the first item if\n * the menu was opened via the keyboard.\n * @return {?}\n */\nprivate _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n\n    // Should only set focus if opened via the keyboard, so keyboard users can\n    // can easily navigate menu items. According to spec, mouse users should not\n    // see the focus style.\n    if (!this._openedByMouse) {\n      this.menu.focusFirstItem();\n    }\n  }\n/**\n * Updates the menu elevation based on the amount of parent menus that it has.\n * @return {?}\n */\nprivate _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let /** @type {?} */ depth = 0;\n      let /** @type {?} */ parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n/**\n * This method resets the menu when it's closed, most importantly restoring\n * focus to the menu trigger if the menu was opened via the keyboard.\n * @return {?}\n */\nprivate _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // Focus only needs to be reset to the host element if the menu was opened\n    // by the keyboard and manually shifted to the first menu item.\n    if (!this._openedByMouse) {\n      this.focus();\n    }\n\n    this._openedByMouse = false;\n  }\n/**\n * @param {?} isOpen\n * @return {?}\n */\nprivate _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.onMenuOpen.emit() : this.onMenuClose.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n/**\n * This method checks that a valid instance of MdMenu has been passed into\n * mdMenuTriggerFor. If not, an exception is thrown.\n * @return {?}\n */\nprivate _checkMenu() {\n    if (!this.menu) {\n      throwMdMenuMissingError();\n    }\n  }\n/**\n * This method creates the overlay from the provided menu's template and saves its\n * OverlayRef so that it can be attached to the DOM when openMenu is called.\n * @return {?}\n */\nprivate _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const /** @type {?} */ config = this._getOverlayConfig();\n      this._subscribeToPositions( /** @type {?} */((config.positionStrategy as ConnectedPositionStrategy)));\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n/**\n * This method builds the configuration object needed to create the overlay, the OverlayState.\n * @return {?} OverlayConfig\n */\nprivate _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getPosition(),\n      hasBackdrop: !this.triggersSubmenu(),\n      backdropClass: 'cdk-overlay-transparent-backdrop',\n      direction: this.dir,\n      scrollStrategy: this._scrollStrategy()\n    });\n  }\n/**\n * Listens to changes in the position of the overlay and sets the correct classes\n * on the menu based on the new position. This ensures the animation origin is always\n * correct, even if a fallback position is used for the overlay.\n * @param {?} position\n * @return {?}\n */\nprivate _subscribeToPositions(position: ConnectedPositionStrategy): void {\n    this._positionSubscription = position.onPositionChange.subscribe(change => {\n      const /** @type {?} */ posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n      const /** @type {?} */ posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n/**\n * This method builds the position strategy for the overlay, so the menu is properly connected\n * to the trigger.\n * @return {?} ConnectedPositionStrategy\n */\nprivate _getPosition(): ConnectedPositionStrategy {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let /** @type {?} */ offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n\n      // TODO(crisbeto): this should be a function, once the overlay supports it.\n      // Right now it will be wrong for the fallback positions.\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n        .connectedTo(this._element, {originX, originY}, {overlayX, overlayY})\n        .withDirection(this.dir)\n        .withOffsetY(offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY},\n            {overlayX: overlayFallbackX, overlayY})\n        .withFallbackPosition(\n            {originX, originY: originFallbackY},\n            {overlayX, overlayY: overlayFallbackY})\n        .withFallbackPosition(\n            {originX: originFallbackX, originY: originFallbackY},\n            {overlayX: overlayFallbackX, overlayY: overlayFallbackY});\n  }\n/**\n * Cleans up the active subscriptions.\n * @return {?}\n */\nprivate _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._positionSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n/**\n * Returns a stream that emits whenever an action that should close the menu occurs.\n * @return {?}\n */\nprivate _menuClosingActions() {\n    const /** @type {?} */ backdrop = /** @type {?} */(( this._overlayRef)).backdropClick();\n    const /** @type {?} */ parentClose = this._parentMenu ? this._parentMenu.close : observableOf(null);\n    const /** @type {?} */ hover = this._parentMenu ? RxChain.from(this._parentMenu.hover())\n        .call(filter, active => active !== this._menuItemInstance)\n        .call(filter, () => this._menuOpen)\n        .result() : observableOf(null);\n\n    return merge(backdrop, parentClose, hover);\n  }\n/**\n * Handles mouse presses on the trigger.\n * @param {?} event\n * @return {?}\n */\n_handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n/**\n * Handles key presses on the trigger.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    const /** @type {?} */ keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n/**\n * Handles click events on the trigger.\n * @param {?} event\n * @return {?}\n */\n_handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `[md-menu-trigger-for], [mat-menu-trigger-for],\n             [mdMenuTriggerFor], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'mdMenuTrigger, matMenuTrigger'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: ElementRef, },\n{type: ViewContainerRef, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_MENU_SCROLL_STRATEGY, ] }, ]},\n{type: MdMenu, decorators: [{ type: Optional }, ]},\n{type: MdMenuItem, decorators: [{ type: Optional }, { type: Self }, ]},\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_deprecatedMdMenuTriggerFor': [{ type: Input, args: ['md-menu-trigger-for', ] },],\n'_deprecatedMatMenuTriggerFor': [{ type: Input, args: ['mat-menu-trigger-for', ] },],\n'_matMenuTriggerFor': [{ type: Input, args: ['matMenuTriggerFor', ] },],\n'menu': [{ type: Input, args: ['mdMenuTriggerFor', ] },],\n'onMenuOpen': [{ type: Output },],\n'onMenuClose': [{ type: Output },],\n};\n}\n\nfunction MdMenuTrigger_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenuTrigger.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenuTrigger.ctorParameters;\n/** @type {?} */\nMdMenuTrigger.propDecorators;\n/** @type {?} */\nMdMenuTrigger.prototype._portal;\n/** @type {?} */\nMdMenuTrigger.prototype._overlayRef;\n/** @type {?} */\nMdMenuTrigger.prototype._menuOpen;\n/** @type {?} */\nMdMenuTrigger.prototype._closeSubscription;\n/** @type {?} */\nMdMenuTrigger.prototype._positionSubscription;\n/** @type {?} */\nMdMenuTrigger.prototype._hoverSubscription;\n/** @type {?} */\nMdMenuTrigger.prototype._openedByMouse;\n/**\n * References the menu instance that the trigger is associated with.\n * @type {?}\n */\nMdMenuTrigger.prototype.menu;\n/**\n * Event emitted when the associated menu is opened.\n * @type {?}\n */\nMdMenuTrigger.prototype.onMenuOpen;\n/**\n * Event emitted when the associated menu is closed.\n * @type {?}\n */\nMdMenuTrigger.prototype.onMenuClose;\n/** @type {?} */\nMdMenuTrigger.prototype._overlay;\n/** @type {?} */\nMdMenuTrigger.prototype._element;\n/** @type {?} */\nMdMenuTrigger.prototype._viewContainerRef;\n/** @type {?} */\nMdMenuTrigger.prototype._scrollStrategy;\n/** @type {?} */\nMdMenuTrigger.prototype._parentMenu;\n/** @type {?} */\nMdMenuTrigger.prototype._menuItemInstance;\n/** @type {?} */\nMdMenuTrigger.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ElementRef,\n  ChangeDetectionStrategy,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {throwMdMenuInvalidPositionX, throwMdMenuInvalidPositionY} from './menu-errors';\nimport {MdMenuItem} from './menu-item';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {MdMenuPanel} from './menu-panel';\nimport {Subscription} from 'rxjs/Subscription';\nimport {transformMenu, fadeInItems} from './menu-animations';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {Observable} from 'rxjs/Observable';\nimport {Direction} from '@angular/cdk/bidi';\nimport {RxChain, startWith, switchMap} from '@angular/cdk/rxjs';\n\n/** Default `md-menu` options that can be overridden. */\nexport interface MdMenuDefaultOptions {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n}\n/**\n * Injection token to be used to override the default options for `md-menu`.\n */\nexport const MD_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MdMenuDefaultOptions>('md-menu-default-options');\n/**\n * Start elevation for the menu panel.\n * \\@docs-private\n */\nconst MD_MENU_BASE_ELEVATION = 2;\nexport class MdMenu implements AfterContentInit, MdMenuPanel, OnDestroy {\nprivate _keyManager: FocusKeyManager<MdMenuItem>;\nprivate _xPosition: MenuPositionX = this._defaultOptions.xPosition;\nprivate _yPosition: MenuPositionY = this._defaultOptions.yPosition;\nprivate _previousElevation: string;\n/**\n * Subscription to tab events on the menu panel\n */\nprivate _tabSubscription = Subscription.EMPTY;\n/**\n * Config object to be passed into the menu's ngClass\n */\n_classList: any = {};\n/**\n * Current state of the panel animation.\n */\n_panelAnimationState: 'void' | 'enter-start' | 'enter' = 'void';\n/**\n * Parent menu of the current menu panel.\n */\nparentMenu: MdMenuPanel | undefined;\n/**\n * Layout direction of the menu.\n */\ndirection: Direction;\n/**\n * Position of the menu in the X axis.\n * @return {?}\n */\nget xPosition() { return this._xPosition; }\n/**\n * @param {?} value\n * @return {?}\n */\nset xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMdMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n/**\n * Position of the menu in the Y axis.\n * @return {?}\n */\nget yPosition() { return this._yPosition; }\n/**\n * @param {?} value\n * @return {?}\n */\nset yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMdMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n   templateRef: TemplateRef<any>;\n/**\n * List of the items inside of a menu.\n */\nitems: QueryList<MdMenuItem>;\n/**\n * Whether the menu should overlap its trigger.\n */\noverlapTrigger = this._defaultOptions.overlapTrigger;\n/**\n * This method takes classes set on the host md-menu element and applies them on the\n * menu template that displays in the overlay container.  Otherwise, it's difficult\n * to style the containing menu from outside the component.\n * @param {?} classes list of class names\n * @return {?}\n */\nset classList(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n      this.setPositionClasses();\n    }\n  }\n/**\n * Event emitted when the menu is closed.\n */\nclose = new EventEmitter<void | 'click' | 'keydown'>();\n/**\n * @param {?} _elementRef\n * @param {?} _defaultOptions\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _defaultOptions: MdMenuDefaultOptions) { }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MdMenuItem>(this.items).withWrap();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close.emit('keydown'));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.close.emit();\n    this.close.complete();\n  }\n/**\n * Stream that emits whenever the hovered menu item changes.\n * @return {?}\n */\nhover(): Observable<MdMenuItem> {\n    return RxChain.from(this.items.changes)\n      .call(startWith, this.items)\n      .call(switchMap, (items: MdMenuItem[]) => merge(...items.map(item => item.hover)))\n      .result();\n  }\n/**\n * Handle a keyboard event from the menu, delegating to the appropriate action.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case ESCAPE:\n        this.close.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.close.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.close.emit('keydown');\n        }\n      break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n/**\n * Focus the first item in the menu. This method is used by the menu trigger\n * to focus the first item when the menu is opened by the ENTER key.\n * @return {?}\n */\nfocusFirstItem() {\n    this._keyManager.setFirstItemActive();\n  }\n/**\n * It's necessary to set position-based classes to ensure the menu panel animation\n * folds out from the correct direction.\n * @param {?=} posX\n * @param {?=} posY\n * @return {?}\n */\nsetPositionClasses(posX = this.xPosition, posY = this.yPosition): void {\n    this._classList['mat-menu-before'] = posX === 'before';\n    this._classList['mat-menu-after'] = posX === 'after';\n    this._classList['mat-menu-above'] = posY === 'above';\n    this._classList['mat-menu-below'] = posY === 'below';\n  }\n/**\n * Sets the menu panel elevation.\n * @param {?} depth Number of parent menus that come before the menu.\n * @return {?}\n */\nsetElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const /** @type {?} */ newElevation = `mat-elevation-z${MD_MENU_BASE_ELEVATION + depth}`;\n    const /** @type {?} */ customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n/**\n * Starts the enter animation.\n * @return {?}\n */\n_startAnimation() {\n    this._panelAnimationState = 'enter-start';\n  }\n/**\n * Resets the panel animation to its initial state.\n * @return {?}\n */\n_resetAnimation() {\n    this._panelAnimationState = 'void';\n  }\n/**\n * Callback that is invoked when the panel animation completes.\n * @param {?} event\n * @return {?}\n */\n_onAnimationDone(event: AnimationEvent) {\n    // After the initial expansion is done, trigger the second phase of the enter animation.\n    if (event.toState === 'enter-start') {\n      this._panelAnimationState = 'enter';\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-menu, mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [\n    transformMenu,\n    fadeInItems\n  ],\n  exportAs: 'mdMenu, matMenu'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_MENU_DEFAULT_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'xPosition': [{ type: Input },],\n'yPosition': [{ type: Input },],\n'templateRef': [{ type: ViewChild, args: [TemplateRef, ] },],\n'items': [{ type: ContentChildren, args: [MdMenuItem, ] },],\n'overlapTrigger': [{ type: Input },],\n'classList': [{ type: Input, args: ['class', ] },],\n'close': [{ type: Output },],\n};\n}\n\nfunction MdMenu_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenu.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenu.ctorParameters;\n/** @type {?} */\nMdMenu.propDecorators;\n/** @type {?} */\nMdMenu.prototype._keyManager;\n/** @type {?} */\nMdMenu.prototype._xPosition;\n/** @type {?} */\nMdMenu.prototype._yPosition;\n/** @type {?} */\nMdMenu.prototype._previousElevation;\n/**\n * Subscription to tab events on the menu panel\n * @type {?}\n */\nMdMenu.prototype._tabSubscription;\n/**\n * Config object to be passed into the menu's ngClass\n * @type {?}\n */\nMdMenu.prototype._classList;\n/**\n * Current state of the panel animation.\n * @type {?}\n */\nMdMenu.prototype._panelAnimationState;\n/**\n * Parent menu of the current menu panel.\n * @type {?}\n */\nMdMenu.prototype.parentMenu;\n/**\n * Layout direction of the menu.\n * @type {?}\n */\nMdMenu.prototype.direction;\n/** @type {?} */\nMdMenu.prototype.templateRef;\n/**\n * List of the items inside of a menu.\n * @type {?}\n */\nMdMenu.prototype.items;\n/**\n * Whether the menu should overlap its trigger.\n * @type {?}\n */\nMdMenu.prototype.overlapTrigger;\n/**\n * Event emitted when the menu is closed.\n * @type {?}\n */\nMdMenu.prototype.close;\n/** @type {?} */\nMdMenu.prototype._elementRef;\n/** @type {?} */\nMdMenu.prototype._defaultOptions;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Below are all the animations for the md-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\n\n\n/**\n * This animation controls the menu panel's entry and exit from the page.\n *\n * When the menu panel is added to the DOM, it scales in and fades in its border.\n *\n * When the menu panel is removed from the DOM, it simply fades out after a brief\n * delay to display the ripple.\n */\n\n// TODO(kara): switch to :enter and :leave once Mobile Safari is sorted out.\nexport const /** @type {?} */ transformMenu: AnimationTriggerMetadata = trigger('transformMenu', [\n  state('void', style({\n    opacity: 0,\n    // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n    // as of 4.2, which causes the animation to be skipped if it starts from 0.\n    transform: 'scale(0.01, 0.01)'\n  })),\n  state('enter-start', style({\n    opacity: 1,\n    transform: 'scale(1, 0.5)'\n  })),\n  state('enter', style({\n    transform: 'scale(1, 1)'\n  })),\n  transition('void => enter-start', animate('100ms linear')),\n  transition('enter-start => enter', animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n]);\n/**\n * This animation fades in the background color and content of the menu panel\n * after its containing element is scaled in.\n */\nexport const fadeInItems: AnimationTriggerMetadata = trigger('fadeInItems', [\n  state('showing', style({opacity: 1})),\n  transition('void => *', [\n    style({opacity: 0}),\n    animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n  ])\n]);\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, MATERIAL_COMPATIBILITY_MODE, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\n/**\n * \\@docs-private\n */\nexport class MdMenuItemBase {}\nexport const /** @type {?} */ _MdMenuItemMixinBase = mixinDisabled(MdMenuItemBase);\n/**\n * This directive is intended to be used inside an md-menu tag.\n * It exists mostly to set the role attribute.\n */\nexport class MdMenuItem extends _MdMenuItemMixinBase implements FocusableOption, CanDisable,\n  OnDestroy {\n/**\n * Stream that emits when the menu item is hovered.\n */\nhover: Subject<MdMenuItem> = new Subject();\n/**\n * Whether the menu item is highlighted.\n */\n_highlighted: boolean = false;\n/**\n * Whether the menu item acts as a trigger for a sub-menu.\n */\n_triggersSubmenu: boolean = false;\n/**\n * @param {?} _elementRef\n */\nconstructor(private _elementRef: ElementRef) {\n    super();\n  }\n/**\n * Focuses the menu item.\n * @return {?}\n */\nfocus(): void {\n    this._getHostElement().focus();\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.hover.complete();\n  }\n/**\n * Used to set the `tabindex`.\n * @return {?}\n */\n_getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n/**\n * Returns the host DOM element.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n/**\n * Prevents the default element actions if it is disabled.\n * @param {?} event\n * @return {?}\n */\n_checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n/**\n * Emits to the hover stream.\n * @return {?}\n */\n_emitHoverEvent() {\n    if (!this.disabled) {\n      this.hover.next(this);\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: '[md-menu-item], [mat-menu-item]',\n  inputs: ['disabled'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_emitHoverEvent()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  templateUrl: 'menu-item.html',\n  exportAs: 'mdMenuItem, matMenuItem',\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\n}\n\nfunction MdMenuItem_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMenuItem.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMenuItem.ctorParameters;\n/**\n * Stream that emits when the menu item is hovered.\n * @type {?}\n */\nMdMenuItem.prototype.hover;\n/**\n * Whether the menu item is highlighted.\n * @type {?}\n */\nMdMenuItem.prototype._highlighted;\n/**\n * Whether the menu item acts as a trigger for a sub-menu.\n * @type {?}\n */\nMdMenuItem.prototype._triggersSubmenu;\n/** @type {?} */\nMdMenuItem.prototype._elementRef;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid md-menu instance\n * \\@docs-private\n * @return {?}\n */\nexport function throwMdMenuMissingError() {\n  throw Error(`md-menu-trigger: must pass in an md-menu instance.\n\n    Example:\n      <md-menu #menu=\"mdMenu\"></md-menu>\n      <button [mdMenuTriggerFor]=\"menu\"></button>`);\n}\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * \\@docs-private\n * @return {?}\n */\nexport function throwMdMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <md-menu x-position=\"before\" #menu=\"mdMenu\"></md-menu>`);\n}\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * \\@docs-private\n * @return {?}\n */\nexport function throwMdMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <md-menu y-position=\"above\" #menu=\"mdMenu\"></md-menu>`);\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdListModule,MdListBase,_MdListMixinBase,MdListItemBase,_MdListItemMixinBase,MdListDivider,MdList,MdListCssMatStyler,MdNavListCssMatStyler,MdDividerCssMatStyler,MdListAvatarCssMatStyler,MdListIconCssMatStyler,MdListSubheaderCssMatStyler,MdListItem,MdSelectionListBase,_MdSelectionListMixinBase,MdListOptionBase,_MdListOptionMixinBase,MdSelectionListOptionEvent,MdListOption,MdSelectionList,MatDividerCssMatStyler,MatList,MatListAvatarCssMatStyler,MatListBase,MatListCssMatStyler,MatListDivider,MatListIconCssMatStyler,MatListItem,MatListItemBase,MatListModule,MatListOption,MatListOptionBase,MatListSubheaderCssMatStyler,MatNavListCssMatStyler,MatSelectionList,MatSelectionListBase,MatSelectionListOptionEvent} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MdCommonModule,\n  MdLineModule,\n  MdPseudoCheckboxModule,\n  MdRippleModule,\n} from '@angular/material/core';\nimport {\n  MdDividerCssMatStyler,\n  MdList,\n  MdListAvatarCssMatStyler,\n  MdListCssMatStyler,\n  MdListDivider,\n  MdListIconCssMatStyler,\n  MdListItem,\n  MdListSubheaderCssMatStyler,\n  MdNavListCssMatStyler,\n} from './list';\nimport {MdListOption, MdSelectionList} from './selection-list';\nexport class MdListModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdLineModule, MdRippleModule, MdCommonModule, MdPseudoCheckboxModule, CommonModule],\n  exports: [\n    MdList,\n    MdListItem,\n    MdListDivider,\n    MdListAvatarCssMatStyler,\n    MdLineModule,\n    MdCommonModule,\n    MdListIconCssMatStyler,\n    MdListCssMatStyler,\n    MdNavListCssMatStyler,\n    MdDividerCssMatStyler,\n    MdListSubheaderCssMatStyler,\n    MdPseudoCheckboxModule,\n    MdSelectionList,\n    MdListOption\n  ],\n  declarations: [\n    MdList,\n    MdListItem,\n    MdListDivider,\n    MdListAvatarCssMatStyler,\n    MdListIconCssMatStyler,\n    MdListCssMatStyler,\n    MdNavListCssMatStyler,\n    MdDividerCssMatStyler,\n    MdListSubheaderCssMatStyler,\n    MdSelectionList,\n    MdListOption\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  Renderer2,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  MATERIAL_COMPATIBILITY_MODE,\n  MdLine,\n  MdLineSetter,\n  mixinDisabled,\n  mixinDisableRipple,\n  RxChain,\n  SPACE,\n  startWith,\n  switchMap,\n} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\n/**\n * \\@docs-private\n */\nexport class MdSelectionListBase {}\nexport const /** @type {?} */ _MdSelectionListMixinBase = mixinDisableRipple(mixinDisabled(MdSelectionListBase));\n/**\n * \\@docs-private\n */\nexport class MdListOptionBase {}\nexport const /** @type {?} */ _MdListOptionMixinBase = mixinDisableRipple(MdListOptionBase);\n\n/** Event emitted by a selection-list whenever the state of an option is changed. */\nexport interface MdSelectionListOptionEvent {\n  option: MdListOption;\n}\n\nconst /** @type {?} */ FOCUSED_STYLE: string = 'mat-list-item-focus';\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is checked.\n */\nexport class MdListOption extends _MdListOptionMixinBase\n    implements AfterContentInit, OnDestroy, FocusableOption, CanDisableRipple {\nprivate _lineSetter: MdLineSetter;\nprivate _selected: boolean = false;\nprivate _disabled: boolean = false;\n/**\n * Whether the option has focus.\n */\n_hasFocus: boolean = false;\n\n   _lines: QueryList<MdLine>;\n/**\n * Whether the label should appear before or after the checkbox. Defaults to 'after'\n */\ncheckboxPosition: 'before' | 'after' = 'after';\n/**\n * Value of the option\n */\nvalue: any;\n/**\n * Whether the option is disabled.\n * @return {?}\n */\nget disabled() { return (this.selectionList && this.selectionList.disabled) || this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Whether the option is selected.\n * @return {?}\n */\nget selected() { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: boolean) { this._selected = coerceBooleanProperty(value); }\n/**\n * Emitted when the option is focused.\n */\nonFocus = new EventEmitter<MdSelectionListOptionEvent>();\n/**\n * Emitted when the option is selected.\n */\nselectChange = new EventEmitter<MdSelectionListOptionEvent>();\n/**\n * Emitted when the option is deselected.\n */\ndeselected = new EventEmitter<MdSelectionListOptionEvent>();\n/**\n * Emitted when the option is destroyed.\n */\ndestroyed = new EventEmitter<MdSelectionListOptionEvent>();\n/**\n * @param {?} _renderer\n * @param {?} _element\n * @param {?} _changeDetector\n * @param {?} selectionList\n */\nconstructor(private _renderer: Renderer2,\nprivate _element: ElementRef,\nprivate _changeDetector: ChangeDetectorRef,\npublic selectionList: MdSelectionList) {\n    super();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._lineSetter = new MdLineSetter(this._lines, this._renderer, this._element);\n\n    if (this.selectionList.disabled) {\n      this.disabled = true;\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    this.destroyed.emit({option: this});\n  }\n/**\n * Toggles the selection state of the option.\n * @return {?}\n */\ntoggle(): void {\n    this.selected = !this.selected;\n    this.selectionList.selectedOptions.toggle(this);\n    this._changeDetector.markForCheck();\n  }\n/**\n * Allows for programmatic focusing of the option.\n * @return {?}\n */\nfocus(): void {\n    this._element.nativeElement.focus();\n    this.onFocus.emit({option: this});\n  }\n/**\n * Whether this list item should show a ripple effect when clicked.\n * @return {?}\n */\n_isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n/**\n * @return {?}\n */\n_handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n    }\n  }\n/**\n * @return {?}\n */\n_handleFocus() {\n    this._hasFocus = true;\n    this._renderer.addClass(this._element.nativeElement, FOCUSED_STYLE);\n  }\n/**\n * @return {?}\n */\n_handleBlur() {\n    this._renderer.removeClass(this._element.nativeElement, FOCUSED_STYLE);\n  }\n/**\n * Retrieves the DOM element of the component host.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-list-option, mat-list-option',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: MdSelectionList, decorators: [{ type: Optional }, { type: Inject, args: [forwardRef(() => MdSelectionList), ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_lines': [{ type: ContentChildren, args: [MdLine, ] },],\n'checkboxPosition': [{ type: Input },],\n'value': [{ type: Input },],\n'disabled': [{ type: Input },],\n'selected': [{ type: Input },],\n'selectChange': [{ type: Output },],\n'deselected': [{ type: Output },],\n'destroyed': [{ type: Output },],\n};\n}\n\nfunction MdListOption_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListOption.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListOption.ctorParameters;\n/** @type {?} */\nMdListOption.propDecorators;\n/** @type {?} */\nMdListOption.prototype._lineSetter;\n/** @type {?} */\nMdListOption.prototype._selected;\n/** @type {?} */\nMdListOption.prototype._disabled;\n/**\n * Whether the option has focus.\n * @type {?}\n */\nMdListOption.prototype._hasFocus;\n/** @type {?} */\nMdListOption.prototype._lines;\n/**\n * Whether the label should appear before or after the checkbox. Defaults to 'after'\n * @type {?}\n */\nMdListOption.prototype.checkboxPosition;\n/**\n * Value of the option\n * @type {?}\n */\nMdListOption.prototype.value;\n/**\n * Emitted when the option is focused.\n * @type {?}\n */\nMdListOption.prototype.onFocus;\n/**\n * Emitted when the option is selected.\n * @type {?}\n */\nMdListOption.prototype.selectChange;\n/**\n * Emitted when the option is deselected.\n * @type {?}\n */\nMdListOption.prototype.deselected;\n/**\n * Emitted when the option is destroyed.\n * @type {?}\n */\nMdListOption.prototype.destroyed;\n/** @type {?} */\nMdListOption.prototype._renderer;\n/** @type {?} */\nMdListOption.prototype._element;\n/** @type {?} */\nMdListOption.prototype._changeDetector;\n/** @type {?} */\nMdListOption.prototype.selectionList;\n}\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\nexport class MdSelectionList extends _MdSelectionListMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, AfterContentInit, OnDestroy {\n/**\n * Tab index for the selection-list.\n */\n_tabIndex = 0;\n/**\n * Subscription to all list options' onFocus events\n */\nprivate _optionFocusSubscription = Subscription.EMPTY;\n/**\n * Subscription to all list options' destroy events\n */\nprivate _optionDestroyStream = Subscription.EMPTY;\n/**\n * The FocusKeyManager which handles focus.\n */\n_keyManager: FocusKeyManager<MdListOption>;\n/**\n * The option components contained within this selection-list.\n */\noptions: QueryList<MdListOption>;\n/**\n * The currently selected options.\n */\nselectedOptions: SelectionModel<MdListOption> = new SelectionModel<MdListOption>(true);\n/**\n * @param {?} _element\n */\nconstructor(private _element: ElementRef) {\n    super();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MdListOption>(this.options).withWrap();\n\n    if (this.disabled) {\n      this._tabIndex = -1;\n    }\n\n    this._optionFocusSubscription = this._onFocusSubscription();\n    this._optionDestroyStream = this._onDestroySubscription();\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    this._optionDestroyStream.unsubscribe();\n    this._optionFocusSubscription.unsubscribe();\n  }\n/**\n * Focus the selection-list.\n * @return {?}\n */\nfocus() {\n    this._element.nativeElement.focus();\n  }\n/**\n * Selects all of the options.\n * @return {?}\n */\nselectAll() {\n    this.options.forEach(option => {\n      if (!option.selected) {\n        option.toggle();\n      }\n    });\n  }\n/**\n * Deselects all of the options.\n * @return {?}\n */\ndeselectAll() {\n    this.options.forEach(option => {\n      if (option.selected) {\n        option.toggle();\n      }\n    });\n  }\n/**\n * Map all the options' destroy event subscriptions and merge them into one stream.\n * @return {?}\n */\nprivate _onDestroySubscription(): Subscription {\n    return RxChain.from(this.options.changes)\n      .call(startWith, this.options)\n      .call(switchMap, (options: MdListOption[]) => {\n        return merge(...options.map(option => option.destroyed));\n      }).subscribe((e: MdSelectionListOptionEvent) => {\n        let /** @type {?} */ optionIndex: number = this.options.toArray().indexOf(e.option);\n        if (e.option._hasFocus) {\n          // Check whether the option is the last item\n          if (optionIndex < this.options.length - 1) {\n            this._keyManager.setActiveItem(optionIndex);\n          } else if (optionIndex - 1 >= 0) {\n            this._keyManager.setActiveItem(optionIndex - 1);\n          }\n        }\n        e.option.destroyed.unsubscribe();\n      });\n  }\n/**\n * Map all the options' onFocus event subscriptions and merge them into one stream.\n * @return {?}\n */\nprivate _onFocusSubscription(): Subscription {\n    return RxChain.from(this.options.changes)\n      .call(startWith, this.options)\n      .call(switchMap, (options: MdListOption[]) => {\n        return merge(...options.map(option => option.onFocus));\n      }).subscribe((e: MdSelectionListOptionEvent) => {\n      let /** @type {?} */ optionIndex: number = this.options.toArray().indexOf(e.option);\n      this._keyManager.updateActiveItemIndex(optionIndex);\n    });\n  }\n/**\n * Passes relevant key presses to our key manager.\n * @param {?} event\n * @return {?}\n */\n_keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case SPACE:\n        this._toggleSelectOnFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n/**\n * Toggles the selected state of the currently focused option.\n * @return {?}\n */\nprivate _toggleSelectOnFocusedOption(): void {\n    let /** @type {?} */ focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let /** @type {?} */ focusedOption: MdListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n      }\n    }\n  }\n/**\n * Utility to ensure all indexes are valid.\n * \n * @param {?} index The index to be checked.\n * @return {?} True if the index is valid for our list of options.\n */\nprivate _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-selection-list, mat-selection-list',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'listbox',\n    '[attr.tabindex]': '_tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()'},\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'options': [{ type: ContentChildren, args: [MdListOption, ] },],\n};\n}\n\nfunction MdSelectionList_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSelectionList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSelectionList.ctorParameters;\n/** @type {?} */\nMdSelectionList.propDecorators;\n/**\n * Tab index for the selection-list.\n * @type {?}\n */\nMdSelectionList.prototype._tabIndex;\n/**\n * Subscription to all list options' onFocus events\n * @type {?}\n */\nMdSelectionList.prototype._optionFocusSubscription;\n/**\n * Subscription to all list options' destroy events\n * @type {?}\n */\nMdSelectionList.prototype._optionDestroyStream;\n/**\n * The FocusKeyManager which handles focus.\n * @type {?}\n */\nMdSelectionList.prototype._keyManager;\n/**\n * The option components contained within this selection-list.\n * @type {?}\n */\nMdSelectionList.prototype.options;\n/**\n * The currently selected options.\n * @type {?}\n */\nMdSelectionList.prototype.selectedOptions;\n/** @type {?} */\nMdSelectionList.prototype._element;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  Renderer2,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MATERIAL_COMPATIBILITY_MODE, MdLine, MdLineSetter} from '@angular/material/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\n/**\n * \\@docs-private\n */\nexport class MdListBase {}\nexport const /** @type {?} */ _MdListMixinBase = mixinDisableRipple(MdListBase);\n/**\n * \\@docs-private\n */\nexport class MdListItemBase {}\nexport const /** @type {?} */ _MdListItemMixinBase = mixinDisableRipple(MdListItemBase);\n/**\n * Divider between items within a list.\n */\nexport class MdListDivider {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-divider, mat-divider',\n  host: {\n    'role': 'separator',\n    'aria-orientation': 'horizontal'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListDivider_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListDivider.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListDivider.ctorParameters;\n}\n\n/**\n * A Material Design list component.\n */\nexport class MdList extends _MdListMixinBase implements CanDisableRipple {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-list, mat-list, md-nav-list, mat-nav-list',\n  host: {'role': 'list'},\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdList_tsickle_Closure_declarations() {\n/** @type {?} */\nMdList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdList.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-list, mat-list',\n  host: {'class': 'mat-list'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdNavListCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-nav-list, mat-nav-list',\n  host: {'class': 'mat-nav-list'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdNavListCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdNavListCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdNavListCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdDividerCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-divider, mat-divider',\n  host: {'class': 'mat-divider'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDividerCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDividerCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDividerCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListAvatarCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-list-avatar], [mat-list-avatar], [mdListAvatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListAvatarCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListAvatarCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListAvatarCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListIconCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-list-icon], [mat-list-icon], [mdListIcon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListIconCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListIconCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListIconCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdListSubheaderCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-subheader], [mat-subheader], [mdSubheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdListSubheaderCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListSubheaderCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListSubheaderCssMatStyler.ctorParameters;\n}\n\n/**\n * An item within a Material Design list.\n */\nexport class MdListItem extends _MdListItemMixinBase implements AfterContentInit, CanDisableRipple {\nprivate _lineSetter: MdLineSetter;\nprivate _isNavList: boolean = false;\n\n   _lines: QueryList<MdLine>;\n/**\n * @param {?} avatar\n * @return {?}\n */\nset _hasAvatar(avatar: MdListAvatarCssMatStyler) {\n    if (avatar != null) {\n      this._renderer.addClass(this._element.nativeElement, 'mat-list-item-avatar');\n    } else {\n      this._renderer.removeClass(this._element.nativeElement, 'mat-list-item-avatar');\n    }\n  }\n/**\n * @param {?} _renderer\n * @param {?} _element\n * @param {?} _list\n * @param {?} navList\n */\nconstructor(private _renderer: Renderer2,\nprivate _element: ElementRef,\nprivate _list: MdList,\n               navList: MdNavListCssMatStyler) {\n    super();\n    this._isNavList = !!navList;\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._lineSetter = new MdLineSetter(this._lines, this._renderer, this._element);\n  }\n/**\n * Whether this list item should show a ripple effect when clicked.\n * @return {?}\n */\n_isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._list.disableRipple;\n  }\n/**\n * @return {?}\n */\n_handleFocus() {\n    this._renderer.addClass(this._element.nativeElement, 'mat-list-item-focus');\n  }\n/**\n * @return {?}\n */\n_handleBlur() {\n    this._renderer.removeClass(this._element.nativeElement, 'mat-list-item-focus');\n  }\n/**\n * Retrieves the DOM element of the component host.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-list-item, mat-list-item, a[md-list-item], a[mat-list-item]',\n  host: {\n    'role': 'listitem',\n    'class': 'mat-list-item',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: MdList, decorators: [{ type: Optional }, ]},\n{type: MdNavListCssMatStyler, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_lines': [{ type: ContentChildren, args: [MdLine, ] },],\n'_hasAvatar': [{ type: ContentChild, args: [MdListAvatarCssMatStyler, ] },],\n};\n}\n\nfunction MdListItem_tsickle_Closure_declarations() {\n/** @type {?} */\nMdListItem.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdListItem.ctorParameters;\n/** @type {?} */\nMdListItem.propDecorators;\n/** @type {?} */\nMdListItem.prototype._lineSetter;\n/** @type {?} */\nMdListItem.prototype._isNavList;\n/** @type {?} */\nMdListItem.prototype._lines;\n/** @type {?} */\nMdListItem.prototype._renderer;\n/** @type {?} */\nMdListItem.prototype._element;\n/** @type {?} */\nMdListItem.prototype._list;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdInputModule,MdTextareaAutosize,MdInput,getMdInputUnsupportedTypeError,MatInput,MatInputModule,MatTextareaAutosize} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdInput} from './input';\nimport {MdTextareaAutosize} from './autosize';\nimport {CommonModule} from '@angular/common';\nimport {PlatformModule} from '@angular/material/core';\nimport {MdFormFieldModule} from '@angular/material/form-field';\nexport class MdInputModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [\n    MdInput,\n    MdTextareaAutosize,\n  ],\n  imports: [\n    CommonModule,\n    MdFormFieldModule,\n    PlatformModule,\n  ],\n  exports: [\n    // We re-export the `MdFormFieldModule` since `MdInput` will almost always be used together with\n    // `MdFormField`.\n    MdFormFieldModule,\n    MdInput,\n    MdTextareaAutosize,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdInputModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInputModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInputModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, ElementRef, Input, AfterViewInit, DoCheck} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\nexport class MdTextareaAutosize implements AfterViewInit, DoCheck {\n/**\n * Keep track of the previous textarea value to avoid resizing when the value hasn't changed.\n */\nprivate _previousValue: string;\nprivate _minRows: number;\nprivate _maxRows: number;\n/**\n * @return {?}\n */\nget minRows() { return this._minRows; }\n/**\n * @param {?} value\n * @return {?}\n */\nset minRows(value: number) {\n    this._minRows = value;\n    this._setMinHeight();\n  }\n/**\n * @return {?}\n */\nget maxRows() { return this._maxRows; }\n/**\n * @param {?} value\n * @return {?}\n */\nset maxRows(value: number) {\n    this._maxRows = value;\n    this._setMaxHeight();\n  }\n/**\n * @return {?}\n */\nget _matAutosizeMinRows() { return this.minRows; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matAutosizeMinRows(v) { this.minRows = v; }\n/**\n * @return {?}\n */\nget _matAutosizeMaxRows() { return this.maxRows; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matAutosizeMaxRows(v) { this.maxRows = v; }\n/**\n * Cached height of a textarea with a single row.\n */\nprivate _cachedLineHeight: number;\n/**\n * @param {?} _elementRef\n * @param {?} _platform\n */\nconstructor(private _elementRef: ElementRef,\nprivate _platform: Platform) {}\n/**\n * Sets the minimum height of the textarea as determined by minRows.\n * @return {?}\n */\n_setMinHeight(): void {\n    const /** @type {?} */ minHeight = this.minRows && this._cachedLineHeight ?\n        `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight)  {\n      this._setTextareaStyle('minHeight', minHeight);\n    }\n  }\n/**\n * Sets the maximum height of the textarea as determined by maxRows.\n * @return {?}\n */\n_setMaxHeight(): void {\n    const /** @type {?} */ maxHeight = this.maxRows && this._cachedLineHeight ?\n        `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._setTextareaStyle('maxHeight', maxHeight);\n    }\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      this._cacheTextareaLineHeight();\n      this.resizeToFitContent();\n    }\n  }\n/**\n * Sets a style property on the textarea element.\n * @param {?} property\n * @param {?} value\n * @return {?}\n */\nprivate _setTextareaStyle(property: string, value: string): void {\n    const /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\n    textarea.style[property] = value;\n  }\n/**\n * Cache the height of a single-row textarea.\n * \n * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n * maxRows. For the initial version, we will assume that the height of a single line in the\n * textarea does not ever change.\n * @return {?}\n */\nprivate _cacheTextareaLineHeight(): void {\n    let /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\n\n    // Use a clone element because we have to override some styles.\n    let /** @type {?} */ textareaClone = /** @type {?} */(( textarea.cloneNode(false) as HTMLTextAreaElement));\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n    // to hidden. This ensures that there is no invalid calculation of the line height.\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n    textareaClone.style.overflow = 'hidden'; /** @type {?} */((\n\n    textarea.parentNode)).appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight; /** @type {?} */((\n    textarea.parentNode)).removeChild(textareaClone);\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n/**\n * @return {?}\n */\nngDoCheck() {\n    this.resizeToFitContent();\n  }\n/**\n * Resize the textarea to fit its content.\n * @return {?}\n */\nresizeToFitContent() {\n    const /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\n    const /** @type {?} */ value = textarea.value;\n\n    // Only resize of the value changed since these calculations can be expensive.\n    if (value === this._previousValue) {\n      return;\n    }\n\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n    textarea.style.height = 'auto';\n    textarea.style.overflow = 'hidden';\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${textarea.scrollHeight}px`;\n    textarea.style.overflow = '';\n\n    this._previousValue = value;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `textarea[md-autosize], textarea[mdTextareaAutosize],\n             textarea[mat-autosize], textarea[matTextareaAutosize]`,\n  exportAs: 'mdTextareaAutosize, matTextareaAutosize',\n  host: {\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Platform, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'minRows': [{ type: Input, args: ['mdAutosizeMinRows', ] },],\n'maxRows': [{ type: Input, args: ['mdAutosizeMaxRows', ] },],\n'_matAutosizeMinRows': [{ type: Input, args: ['matAutosizeMinRows', ] },],\n'_matAutosizeMaxRows': [{ type: Input, args: ['matAutosizeMaxRows', ] },],\n};\n}\n\nfunction MdTextareaAutosize_tsickle_Closure_declarations() {\n/** @type {?} */\nMdTextareaAutosize.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdTextareaAutosize.ctorParameters;\n/** @type {?} */\nMdTextareaAutosize.propDecorators;\n/**\n * Keep track of the previous textarea value to avoid resizing when the value hasn't changed.\n * @type {?}\n */\nMdTextareaAutosize.prototype._previousValue;\n/** @type {?} */\nMdTextareaAutosize.prototype._minRows;\n/** @type {?} */\nMdTextareaAutosize.prototype._maxRows;\n/**\n * Cached height of a textarea with a single row.\n * @type {?}\n */\nMdTextareaAutosize.prototype._cachedLineHeight;\n/** @type {?} */\nMdTextareaAutosize.prototype._elementRef;\n/** @type {?} */\nMdTextareaAutosize.prototype._platform;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  Self,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Platform, getSupportedInputTypes} from '@angular/cdk/platform';\nimport {getMdInputUnsupportedTypeError} from './input-errors';\nimport {\n  defaultErrorStateMatcher,\n  ErrorOptions,\n  ErrorStateMatcher,\n  MD_ERROR_GLOBAL_OPTIONS\n} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {MdFormFieldControl} from '@angular/material/form-field';\n\n// Invalid input type. Using one of these will throw an MdInputUnsupportedTypeError.\nconst /** @type {?} */ MD_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'color',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Directive that allows a native input to work inside a `MdFormField`.\n */\nexport class MdInput implements MdFormFieldControl<any>, OnChanges, OnDestroy, DoCheck {\n/**\n * Variables used as cache for getters and setters.\n */\nprotected _type = 'text';\n  protected _disabled = false;\n  protected _required = false;\n  protected _id: string;\n  protected _uid = `md-input-${nextUniqueId++}`;\n  protected _errorOptions: ErrorOptions;\n  protected _previousNativeValue = this.value;\n/**\n * Whether the input is focused.\n */\nfocused = false;\n/**\n * Whether the input is in an error state.\n */\nerrorState = false;\n/**\n * The aria-describedby attribute on the input for improved a11y.\n */\n_ariaDescribedby: string;\n/**\n * Stream that emits whenever the state of the input changes such that the wrapping `MdFormField`\n * needs to run change detection.\n */\nstateChanges = new Subject<void>();\n/**\n * Whether the element is disabled.\n * @return {?}\n */\nget disabled() { return this.ngControl ? this.ngControl.disabled : this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Unique id of the element.\n * @return {?}\n */\nget id() { return this._id; }\n/**\n * @param {?} value\n * @return {?}\n */\nset id(value: string) { this._id = value || this._uid; }\n/**\n * Placeholder attribute of the element.\n */\nplaceholder: string = '';\n/**\n * Whether the element is required.\n * @return {?}\n */\nget required() { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: any) { this._required = coerceBooleanProperty(value); }\n/**\n * Input type of the element.\n * @return {?}\n */\nget type() { return this._type; }\n/**\n * @param {?} value\n * @return {?}\n */\nset type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._renderer.setProperty(this._elementRef.nativeElement, 'type', this._type);\n    }\n  }\n/**\n * A function used to control when error messages are shown.\n */\nerrorStateMatcher: ErrorStateMatcher;\n/**\n * The input element's value.\n * @return {?}\n */\nget value() { return this._elementRef.nativeElement.value; }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: string) {\n    if (value !== this.value) {\n      this._elementRef.nativeElement.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _platform\n * @param {?} ngControl\n * @param {?} _parentForm\n * @param {?} _parentFormGroup\n * @param {?} errorOptions\n */\nconstructor(protected _elementRef: ElementRef,\n              protected _renderer: Renderer2,\n              protected _platform: Platform,\npublic ngControl: NgControl,\n               protected _parentForm: NgForm,\n               protected _parentFormGroup: FormGroupDirective,\n                errorOptions: ErrorOptions) {\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n    this._errorOptions = errorOptions ? errorOptions : {};\n    this.errorStateMatcher = this._errorOptions.errorStateMatcher || defaultErrorStateMatcher;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      _renderer.listen(_elementRef.nativeElement, 'keyup', (event: Event) => {\n        let el = event.target as HTMLInputElement;\n        if (!el.value && !el.selectionStart && !el.selectionEnd) {\n          // Note: Just setting `0, 0` doesn't fix the issue. Setting `1, 1` fixes it for the first\n          // time that you type text and then hold delete. Toggling to `1, 1` and then back to\n          // `0, 0` seems to completely fix it.\n          el.setSelectionRange(1, 1);\n          el.setSelectionRange(0, 0);\n        }\n      });\n    }\n  }\n/**\n * @return {?}\n */\nngOnChanges() {\n    this.stateChanges.next();\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.stateChanges.complete();\n  }\n/**\n * @return {?}\n */\nngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this._updateErrorState();\n    } else {\n      // When the input isn't used together with `@angular/forms`, we need to check manually for\n      // changes to the native `value` property in order to update the floating label.\n      this._dirtyCheckNativeValue();\n    }\n  }\n/**\n * Callback for the cases where the focused state of the input changes.\n * @param {?} isFocused\n * @return {?}\n */\n_focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n/**\n * @return {?}\n */\n_onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n/**\n * Re-evaluates the error state. This is only relevant with \\@angular/forms.\n * @return {?}\n */\nprotected _updateErrorState() {\n    const /** @type {?} */ oldState = this.errorState;\n    const /** @type {?} */ ngControl = this.ngControl;\n    const /** @type {?} */ parent = this._parentFormGroup || this._parentForm;\n    const /** @type {?} */ newState = ngControl && this.errorStateMatcher( /** @type {?} */((ngControl.control as FormControl)), parent);\n\n    if (newState !== oldState) {\n      this.errorState = newState;\n      this.stateChanges.next();\n    }\n  }\n/**\n * Does some manual dirty checking on the native input `value` property.\n * @return {?}\n */\nprotected _dirtyCheckNativeValue() {\n    const /** @type {?} */ newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n/**\n * Make sure the input is a supported type.\n * @return {?}\n */\nprotected _validateType() {\n    if (MD_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMdInputUnsupportedTypeError(this._type);\n    }\n  }\n/**\n * Checks whether the input type is one of the types that are never empty.\n * @return {?}\n */\nprotected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n/**\n * Checks whether the input is invalid based on the native validation.\n * @return {?}\n */\nprotected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let /** @type {?} */ validity = ( /** @type {?} */((this._elementRef.nativeElement as HTMLInputElement))).validity;\n    return validity && validity.badInput;\n  }\n/**\n * Determines if the component host is a textarea. If not recognizable it returns false.\n * @return {?}\n */\nprotected _isTextarea() {\n    let /** @type {?} */ nativeElement = this._elementRef.nativeElement;\n\n    // In Universal, we don't have access to `nodeName`, but the same can be achieved with `name`.\n    // Note that this shouldn't be necessary once Angular switches to an API that resembles the\n    // DOM closer.\n    let /** @type {?} */ nodeName = this._platform.isBrowser ? nativeElement.nodeName : nativeElement.name;\n    return nodeName ? nodeName.toLowerCase() === 'textarea' : false;\n  }\n/**\n * @return {?}\n */\nget empty(): boolean {\n    return !this._isNeverEmpty() &&\n        (this.value == null || this.value === '') &&\n        // Check if the input contains bad input. If so, we know that it only appears empty because\n        // the value failed to parse. From the user's perspective it is not empty.\n        // TODO(mmalerba): Add e2e test for bad input case.\n        !this._isBadInput();\n  }\n/**\n * @param {?} ids\n * @return {?}\n */\nsetDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n/**\n * @return {?}\n */\nfocus() { this._elementRef.nativeElement.focus(); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `input[mdInput], textarea[mdInput], input[matInput], textarea[matInput]`,\n  host: {\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[id]': 'id',\n    '[placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MdFormFieldControl, useExisting: MdInput}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: Platform, },\n{type: NgControl, decorators: [{ type: Optional }, { type: Self }, ]},\n{type: NgForm, decorators: [{ type: Optional }, ]},\n{type: FormGroupDirective, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_ERROR_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n'id': [{ type: Input },],\n'placeholder': [{ type: Input },],\n'required': [{ type: Input },],\n'type': [{ type: Input },],\n'errorStateMatcher': [{ type: Input },],\n};\n}\n\nfunction MdInput_tsickle_Closure_declarations() {\n/** @type {?} */\nMdInput.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdInput.ctorParameters;\n/** @type {?} */\nMdInput.propDecorators;\n/**\n * Variables used as cache for getters and setters.\n * @type {?}\n */\nMdInput.prototype._type;\n/** @type {?} */\nMdInput.prototype._disabled;\n/** @type {?} */\nMdInput.prototype._required;\n/** @type {?} */\nMdInput.prototype._id;\n/** @type {?} */\nMdInput.prototype._uid;\n/** @type {?} */\nMdInput.prototype._errorOptions;\n/** @type {?} */\nMdInput.prototype._previousNativeValue;\n/**\n * Whether the input is focused.\n * @type {?}\n */\nMdInput.prototype.focused;\n/**\n * Whether the input is in an error state.\n * @type {?}\n */\nMdInput.prototype.errorState;\n/**\n * The aria-describedby attribute on the input for improved a11y.\n * @type {?}\n */\nMdInput.prototype._ariaDescribedby;\n/**\n * Stream that emits whenever the state of the input changes such that the wrapping `MdFormField`\n * needs to run change detection.\n * @type {?}\n */\nMdInput.prototype.stateChanges;\n/**\n * Placeholder attribute of the element.\n * @type {?}\n */\nMdInput.prototype.placeholder;\n/**\n * A function used to control when error messages are shown.\n * @type {?}\n */\nMdInput.prototype.errorStateMatcher;\n/** @type {?} */\nMdInput.prototype._neverEmptyInputTypes;\n/** @type {?} */\nMdInput.prototype._elementRef;\n/** @type {?} */\nMdInput.prototype._renderer;\n/** @type {?} */\nMdInput.prototype._platform;\n/** @type {?} */\nMdInput.prototype.ngControl;\n/** @type {?} */\nMdInput.prototype._parentForm;\n/** @type {?} */\nMdInput.prototype._parentFormGroup;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * \\@docs-private\n * @param {?} type\n * @return {?}\n */\nexport function getMdInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by mdInput.`);\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdGridTile,MdGridListModule,MdGridList,MatGridList,MatGridListModule,MatGridTile} from './public_api';\n\nexport {MdGridAvatarCssMatStyler as ɵb,MdGridTileFooterCssMatStyler as ɵd,MdGridTileHeaderCssMatStyler as ɵc,MdGridTileText as ɵa} from './grid-tile';","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdLineModule, MdCommonModule} from '@angular/material/core';\nimport {\n  MdGridTile, MdGridTileText, MdGridTileFooterCssMatStyler,\n  MdGridTileHeaderCssMatStyler, MdGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MdGridList} from './grid-list';\nexport class MdGridListModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdLineModule, MdCommonModule],\n  exports: [\n    MdGridList,\n    MdGridTile,\n    MdGridTileText,\n    MdLineModule,\n    MdCommonModule,\n    MdGridTileHeaderCssMatStyler,\n    MdGridTileFooterCssMatStyler,\n    MdGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MdGridList,\n    MdGridTile,\n    MdGridTileText,\n    MdGridTileHeaderCssMatStyler,\n    MdGridTileFooterCssMatStyler,\n    MdGridAvatarCssMatStyler\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridListModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridListModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridListModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  Renderer2,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MdGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst /** @type {?} */ MD_FIT_MODE = 'fit';\nexport class MdGridList implements OnInit, AfterContentChecked {\n/**\n * Number of columns being rendered.\n */\nprivate _cols: number;\n/**\n * Row height value passed in by user. This can be one of three types:\n * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n */\nprivate _rowHeight: string;\n/**\n * The amount of space between tiles. This will be something like '5px' or '2em'.\n */\nprivate _gutter: string = '1px';\n/**\n * Sets position and size styles for a tile\n */\nprivate _tileStyler: TileStyler;\n/**\n * Query list of tiles that are being rendered.\n */\n_tiles: QueryList<MdGridTile>;\n/**\n * @param {?} _renderer\n * @param {?} _element\n * @param {?} _dir\n */\nconstructor(\nprivate _renderer: Renderer2,\nprivate _element: ElementRef,\nprivate _dir: Directionality) {}\n/**\n * Amount of columns in the grid list.\n * @return {?}\n */\nget cols() { return this._cols; }\n/**\n * @param {?} value\n * @return {?}\n */\nset cols(value: any) { this._cols = coerceToNumber(value); }\n/**\n * Size of the grid list's gutter in pixels.\n * @return {?}\n */\nget gutterSize() { return this._gutter; }\n/**\n * @param {?} value\n * @return {?}\n */\nset gutterSize(value: any) { this._gutter = coerceToString(value); }\n/**\n * Set internal representation of row height from the user-provided value.\n * @param {?} value\n * @return {?}\n */\nset rowHeight(value: string | number) {\n    const /** @type {?} */ newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n/**\n * The layout calculation is fairly cheap if nothing changes, so there's little cost\n * to run it frequently.\n * @return {?}\n */\nngAfterContentChecked() {\n    this._layoutTiles();\n  }\n/**\n * Throw a friendly error if cols property is missing\n * @return {?}\n */\nprivate _checkCols() {\n    if (!this.cols) {\n      throw Error(`md-grid-list: must pass in number of columns. ` +\n                  `Example: <md-grid-list cols=\"3\">`);\n    }\n  }\n/**\n * Default to equal width:height if rowHeight property is missing\n * @return {?}\n */\nprivate _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n/**\n * Creates correct Tile Styler subtype based on rowHeight passed in by user\n * @param {?} rowHeight\n * @return {?}\n */\nprivate _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MD_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n/**\n * Computes and applies the size and position for all children grid tiles.\n * @return {?}\n */\nprivate _layoutTiles(): void {\n    const /** @type {?} */ tracker = new TileCoordinator(this.cols, this._tiles);\n    const /** @type {?} */ direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const /** @type {?} */ pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n/**\n * Sets style on the main grid-list element, given the style name and value.\n * @param {?} style\n * @return {?}\n */\n_setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._renderer.setStyle(this._element.nativeElement, style[0], style[1]);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-grid-list, mat-grid-list',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_tiles': [{ type: ContentChildren, args: [MdGridTile, ] },],\n'cols': [{ type: Input },],\n'gutterSize': [{ type: Input },],\n'rowHeight': [{ type: Input },],\n};\n}\n\nfunction MdGridList_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridList.ctorParameters;\n/** @type {?} */\nMdGridList.propDecorators;\n/**\n * Number of columns being rendered.\n * @type {?}\n */\nMdGridList.prototype._cols;\n/**\n * Row height value passed in by user. This can be one of three types:\n * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n * @type {?}\n */\nMdGridList.prototype._rowHeight;\n/**\n * The amount of space between tiles. This will be something like '5px' or '2em'.\n * @type {?}\n */\nMdGridList.prototype._gutter;\n/**\n * Sets position and size styles for a tile\n * @type {?}\n */\nMdGridList.prototype._tileStyler;\n/**\n * Query list of tiles that are being rendered.\n * @type {?}\n */\nMdGridList.prototype._tiles;\n/** @type {?} */\nMdGridList.prototype._renderer;\n/** @type {?} */\nMdGridList.prototype._element;\n/** @type {?} */\nMdGridList.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {MdGridList} from './grid-list';\nimport {MdGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * \\@docs-private\n * @abstract\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n/**\n * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n * because these properties haven't been calculated by that point.\n * \n * @param {?} gutterSize Size of the grid's gutter.\n * @param {?} tracker Instance of the TileCoordinator.\n * @param {?} cols Amount of columns in the grid.\n * @param {?} direction Layout direction of the grid.\n * @return {?}\n */\ninit(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n/**\n * Computes the amount of space a single 1x1 tile would take up (width or height).\n * Used as a basis for other calculations.\n * @param {?} sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n * @param {?} gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n * @return {?} The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n */\ngetBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n/**\n * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n * @param {?} offset Number of tiles that have already been rendered in the row/column.\n * @return {?} Position of the tile as a CSS calc() expression.\n */\ngetTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n/**\n * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n * @param {?} span The tile's rowspan or colspan.\n * @return {?} Size of the tile as a CSS calc() expression.\n */\ngetTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n/**\n * Sets the style properties to be applied to a tile for the given row and column index.\n * @param {?} tile Tile to which to apply the styling.\n * @param {?} rowIndex Index of the tile's row.\n * @param {?} colIndex Index of the tile's column.\n * @return {?}\n */\nsetStyle(tile: MdGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let /** @type {?} */ percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let /** @type {?} */ gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n/**\n * Sets the horizontal placement of the tile in the list.\n * @param {?} tile\n * @param {?} colIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetColStyles(tile: MdGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let /** @type {?} */ baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let /** @type {?} */ side = this._direction === 'ltr' ? 'left' : 'right';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n/**\n * Calculates the total size taken up by gutters across one axis of a list.\n * @return {?}\n */\ngetGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n/**\n * Calculates the total size taken up by tiles across one axis of a list.\n * @param {?} tileHeight Height of the tile.\n * @return {?}\n */\ngetTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n/**\n * Sets the vertical placement of the tile in the list.\n * This method will be implemented by each type of TileStyler.\n * \\@docs-private\n * @abstract\n * @param {?} tile\n * @param {?} rowIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number) {}\n/**\n * Calculates the computed height and returns the correct style property to set.\n * This method can be implemented by each type of TileStyler.\n * \\@docs-private\n * @return {?}\n */\ngetComputedHeight(): [string, string] | null { return null; }\n/**\n * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n * \\@docs-private\n * @abstract\n * @param {?} list Grid list that the styler was attached to.\n * @return {?}\n */\nreset(list: MdGridList) {}\n}\n\nfunction TileStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nTileStyler.prototype._gutterSize;\n/** @type {?} */\nTileStyler.prototype._rows;\n/** @type {?} */\nTileStyler.prototype._rowspan;\n/** @type {?} */\nTileStyler.prototype._cols;\n/** @type {?} */\nTileStyler.prototype._direction;\n}\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example <md-grid-list cols=\"3\" rowHeight=\"100px\">\n * \\@docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n/**\n * @param {?} fixedRowHeight\n */\nconstructor(public fixedRowHeight: string) { super(); }\n/**\n * @param {?} gutterSize\n * @param {?} tracker\n * @param {?} cols\n * @param {?} direction\n * @return {?}\n */\ninit(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n/**\n * @param {?} tile\n * @param {?} rowIndex\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n/**\n * @return {?}\n */\ngetComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n/**\n * @param {?} list\n * @return {?}\n */\nreset(list: MdGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\nfunction FixedTileStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nFixedTileStyler.prototype.fixedRowHeight;\n}\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example <md-grid-list cols=\"3\" rowHeight=\"3:1\">\n * \\@docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n/**\n * Ratio width:height given by user to determine row height.\n */\nrowHeightRatio: number;\n  baseTileHeight: string;\n/**\n * @param {?} value\n */\nconstructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n/**\n * @param {?} tile\n * @param {?} rowIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let /** @type {?} */ percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('margin-top', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('padding-top', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n/**\n * @return {?}\n */\ngetComputedHeight(): [string, string] {\n    return [\n      'padding-bottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n/**\n * @param {?} list\n * @return {?}\n */\nreset(list: MdGridList) {\n    list._setListStyle(['padding-bottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('margin-top', null);\n      tile._setStyle('padding-top', null);\n    });\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nprivate _parseRatio(value: string): void {\n    const /** @type {?} */ ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`md-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\nfunction RatioTileStyler_tsickle_Closure_declarations() {\n/**\n * Ratio width:height given by user to determine row height.\n * @type {?}\n */\nRatioTileStyler.prototype.rowHeightRatio;\n/** @type {?} */\nRatioTileStyler.prototype.baseTileHeight;\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example <md-grid-list cols=\"3\" rowHeight=\"fit\">\n * \n * \\@docs-private\n */\nexport class FitTileStyler extends TileStyler {\n/**\n * @param {?} tile\n * @param {?} rowIndex\n * @return {?}\n */\nsetRowStyles(tile: MdGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let /** @type {?} */ percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let /** @type {?} */ gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let /** @type {?} */ baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n/**\n * @param {?} list\n * @return {?}\n */\nreset(list: MdGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n/**\n * Wraps a CSS string in a calc function\n * @param {?} exp\n * @return {?}\n */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n/**\n * Appends pixels to a CSS string if no units are given.\n * @param {?} value\n * @return {?}\n */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {QueryList} from '@angular/core';\nimport {MdGridTile} from './grid-tile';\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n * \n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n * \n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n * \n * \\@docs-private\n */\nexport class TileCoordinator {\n/**\n * Tracking array (see class description).\n */\ntracker: number[];\n/**\n * Index at which the search for the next gap will start.\n */\ncolumnIndex: number = 0;\n/**\n * The current row index.\n */\nrowIndex: number = 0;\n/**\n * Gets the total number of rows occupied by tiles\n * @return {?}\n */\nget rowCount(): number { return this.rowIndex + 1; }\n/**\n * Gets the total span of rows occupied by tiles.\n * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n * @return {?}\n */\nget rowspan() {\n    let /** @type {?} */ lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n/**\n * The computed (row, col) position of each tile (the output).\n */\npositions: TilePosition[];\n/**\n * @param {?} numColumns\n * @param {?} tiles\n */\nconstructor(numColumns: number, tiles: QueryList<MdGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n/**\n * Calculates the row and col position of a tile.\n * @param {?} tile\n * @return {?}\n */\nprivate _trackTile(tile: MdGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let /** @type {?} */ gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n/**\n * Finds the next available space large enough to fit the tile.\n * @param {?} tileCols\n * @return {?}\n */\nprivate _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`md-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let /** @type {?} */ gapStartIndex = -1;\n    let /** @type {?} */ gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n    return gapStartIndex;\n  }\n/**\n * Move \"down\" to the next row.\n * @return {?}\n */\nprivate _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let /** @type {?} */ i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n/**\n * Finds the end index (exclusive) of a gap given the index from which to start looking.\n * The gap ends when a non-zero value is found.\n * @param {?} gapStartIndex\n * @return {?}\n */\nprivate _findGapEndIndex(gapStartIndex: number): number {\n    for (let /** @type {?} */ i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n/**\n * Update the tile tracker to account for the given tile in the given space.\n * @param {?} start\n * @param {?} tile\n * @return {?}\n */\nprivate _markTilePosition(start: number, tile: MdGridTile): void {\n    for (let /** @type {?} */ i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\nfunction TileCoordinator_tsickle_Closure_declarations() {\n/**\n * Tracking array (see class description).\n * @type {?}\n */\nTileCoordinator.prototype.tracker;\n/**\n * Index at which the search for the next gap will start.\n * @type {?}\n */\nTileCoordinator.prototype.columnIndex;\n/**\n * The current row index.\n * @type {?}\n */\nTileCoordinator.prototype.rowIndex;\n/**\n * The computed (row, col) position of each tile (the output).\n * @type {?}\n */\nTileCoordinator.prototype.positions;\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * \\@docs-private\n */\nexport class TilePosition {\n/**\n * @param {?} row\n * @param {?} col\n */\nconstructor(public row: number,\npublic col: number) {}\n}\n\nfunction TilePosition_tsickle_Closure_declarations() {\n/** @type {?} */\nTilePosition.prototype.row;\n/** @type {?} */\nTilePosition.prototype.col;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Renderer2,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MdLine, MdLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\nexport class MdGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n/**\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _renderer: Renderer2,\nprivate _element: ElementRef) {}\n/**\n * Amount of rows that the grid tile takes up.\n * @return {?}\n */\nget rowspan() { return this._rowspan; }\n/**\n * @param {?} value\n * @return {?}\n */\nset rowspan(value) { this._rowspan = coerceToNumber(value); }\n/**\n * Amount of columns that the grid tile takes up.\n * @return {?}\n */\nget colspan() { return this._colspan; }\n/**\n * @param {?} value\n * @return {?}\n */\nset colspan(value) { this._colspan = coerceToNumber(value); }\n/**\n * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n * \"Changed after checked\" errors that would occur with HostBinding.\n * @param {?} property\n * @param {?} value\n * @return {?}\n */\n_setStyle(property: string, value: any): void {\n    this._renderer.setStyle(this._element.nativeElement, property, value);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-grid-tile, mat-grid-tile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'rowspan': [{ type: Input },],\n'colspan': [{ type: Input },],\n};\n}\n\nfunction MdGridTile_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTile.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTile.ctorParameters;\n/** @type {?} */\nMdGridTile.propDecorators;\n/** @type {?} */\nMdGridTile.prototype._rowspan;\n/** @type {?} */\nMdGridTile.prototype._colspan;\n/** @type {?} */\nMdGridTile.prototype._renderer;\n/** @type {?} */\nMdGridTile.prototype._element;\n}\n\nexport class MdGridTileText implements AfterContentInit {\n/**\n *  Helper that watches the number of lines in a text area and sets\n * a class on the host element that matches the line count.\n */\n_lineSetter: MdLineSetter;\n   _lines: QueryList<MdLine>;\n/**\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _renderer: Renderer2,\nprivate _element: ElementRef) {}\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._lineSetter = new MdLineSetter(this._lines, this._renderer, this._element);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-grid-tile-header, mat-grid-tile-header, md-grid-tile-footer, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_lines': [{ type: ContentChildren, args: [MdLine, ] },],\n};\n}\n\nfunction MdGridTileText_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTileText.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTileText.ctorParameters;\n/** @type {?} */\nMdGridTileText.propDecorators;\n/**\n *  Helper that watches the number of lines in a text area and sets\n * a class on the host element that matches the line count.\n * @type {?}\n */\nMdGridTileText.prototype._lineSetter;\n/** @type {?} */\nMdGridTileText.prototype._lines;\n/** @type {?} */\nMdGridTileText.prototype._renderer;\n/** @type {?} */\nMdGridTileText.prototype._element;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdGridAvatarCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-grid-avatar], [mat-grid-avatar], [mdGridAvatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridAvatarCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridAvatarCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridAvatarCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdGridTileHeaderCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-grid-tile-header, mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridTileHeaderCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTileHeaderCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTileHeaderCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdGridTileFooterCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-grid-tile-footer, mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdGridTileFooterCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdGridTileFooterCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdGridTileFooterCssMatStyler.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Converts values into strings. Falsy values become empty strings.\n * \\@docs-private\n * @param {?} value\n * @return {?}\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n/**\n * Converts a value that might be a string into a number.\n * \\@docs-private\n * @param {?} value\n * @return {?}\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {CdkAccordion,MdAccordion,MdAccordionDisplayMode,AccordionItem,MdExpansionPanel,MdExpansionPanelState,MdExpansionPanelActionRow,MdExpansionPanelHeader,MdExpansionPanelDescription,MdExpansionPanelTitle,MdExpansionModule,MatAccordion,MatAccordionDisplayMode,MatExpansionModule,MatExpansionPanel,MatExpansionPanelActionRow,MatExpansionPanelDescription,MatExpansionPanelHeader,MatExpansionPanelState,MatExpansionPanelTitle} from './public_api';\n\nexport {EXPANSION_PANEL_ANIMATION_TIMING as ɵc,MdExpansionPanelBase as ɵa,_MdExpansionPanelMixinBase as ɵb} from './expansion-panel';","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {CompatibilityModule, UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CdkAccordion, MdAccordion} from './accordion';\nimport {MdExpansionPanel, MdExpansionPanelActionRow} from './expansion-panel';\nimport {\n  MdExpansionPanelDescription,\n  MdExpansionPanelHeader,\n  MdExpansionPanelTitle,\n} from './expansion-panel-header';\nexport class MdExpansionModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CompatibilityModule, CommonModule, A11yModule],\n  exports: [\n    CdkAccordion,\n    MdAccordion,\n    MdExpansionPanel,\n    MdExpansionPanelActionRow,\n    MdExpansionPanelHeader,\n    MdExpansionPanelTitle,\n    MdExpansionPanelDescription\n  ],\n  declarations: [\n    CdkAccordion,\n    MdAccordion,\n    MdExpansionPanel,\n    MdExpansionPanelActionRow,\n    MdExpansionPanelHeader,\n    MdExpansionPanelTitle,\n    MdExpansionPanelDescription\n  ],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdExpansionModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  Directive,\n  Host,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  OnDestroy,\n  Renderer2,\n  ElementRef,\n  Input,\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n} from '@angular/animations';\nimport {SPACE, ENTER} from '@angular/material/core';\nimport {MdExpansionPanel, EXPANSION_PANEL_ANIMATION_TIMING} from './expansion-panel';\nimport {filter} from '@angular/material/core';\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\n/**\n * <md-expansion-panel-header> component.\n * \n * This component corresponds to the header element of an <md-expansion-panel>.\n * \n * Please refer to README.md for examples on how to use it.\n */\nexport class MdExpansionPanelHeader implements OnDestroy {\nprivate _parentChangeSubscription = Subscription.EMPTY;\n/**\n * @param {?} renderer\n * @param {?} panel\n * @param {?} _element\n * @param {?} _focusMonitor\n * @param {?} _changeDetectorRef\n */\nconstructor(\n    renderer: Renderer2,\npublic panel: MdExpansionPanel,\nprivate _element: ElementRef,\nprivate _focusMonitor: FocusMonitor,\nprivate _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      filter.call(panel._inputChanges, changes => !!(changes.hideToggle || changes.disabled))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement, renderer, false);\n  }\n/**\n * Height of the header while the panel is expanded.\n */\nexpandedHeight: string;\n/**\n * Height of the header while the panel is collapsed.\n */\ncollapsedHeight: string;\n/**\n * Toggles the expanded state of the panel.\n * @return {?}\n */\n_toggle(): void {\n    if (!this.panel.disabled) {\n      this.panel.toggle();\n    }\n  }\n/**\n * Gets whether the panel is expanded.\n * @return {?}\n */\n_isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n/**\n * Gets the expanded state string of the panel.\n * @return {?}\n */\n_getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n/**\n * Gets the panel id.\n * @return {?}\n */\n_getPanelId(): string {\n    return this.panel.id;\n  }\n/**\n * Gets whether the expand indicator should be shown.\n * @return {?}\n */\n_showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n/**\n * Handle keyup event calling to toggle() if appropriate.\n * @param {?} event\n * @return {?}\n */\n_keyup(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-expansion-panel-header, mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keyup)': '_keyup($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n  animations: [\n    trigger('indicatorRotate', [\n      state('collapsed', style({transform: 'rotate(0deg)'})),\n      state('expanded', style({transform: 'rotate(180deg)'})),\n      transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n    trigger('expansionHeight', [\n      state('collapsed', style({\n        height: '{{collapsedHeight}}',\n      }), {\n        params: {collapsedHeight: '48px'},\n      }),\n      state('expanded', style({\n        height: '{{expandedHeight}}'\n      }), {\n        params: {expandedHeight: '64px'}\n      }),\n      transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: MdExpansionPanel, decorators: [{ type: Host }, ]},\n{type: ElementRef, },\n{type: FocusMonitor, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'expandedHeight': [{ type: Input },],\n'collapsedHeight': [{ type: Input },],\n};\n}\n\nfunction MdExpansionPanelHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanelHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanelHeader.ctorParameters;\n/** @type {?} */\nMdExpansionPanelHeader.propDecorators;\n/** @type {?} */\nMdExpansionPanelHeader.prototype._parentChangeSubscription;\n/**\n * Height of the header while the panel is expanded.\n * @type {?}\n */\nMdExpansionPanelHeader.prototype.expandedHeight;\n/**\n * Height of the header while the panel is collapsed.\n * @type {?}\n */\nMdExpansionPanelHeader.prototype.collapsedHeight;\n/** @type {?} */\nMdExpansionPanelHeader.prototype.panel;\n/** @type {?} */\nMdExpansionPanelHeader.prototype._element;\n/** @type {?} */\nMdExpansionPanelHeader.prototype._focusMonitor;\n/** @type {?} */\nMdExpansionPanelHeader.prototype._changeDetectorRef;\n}\n\n/**\n * <md-panel-description> directive.\n * \n * This direction is to be used inside of the MdExpansionPanelHeader component.\n */\nexport class MdExpansionPanelDescription {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-panel-description, mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdExpansionPanelDescription_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanelDescription.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanelDescription.ctorParameters;\n}\n\n/**\n * <md-panel-title> directive.\n * \n * This direction is to be used inside of the MdExpansionPanelHeader component.\n */\nexport class MdExpansionPanelTitle {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-panel-title, mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdExpansionPanelTitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanelTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanelTitle.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  forwardRef,\n  Host,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled, UniqueSelectionDispatcher} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {MdAccordion} from './accordion';\nimport {AccordionItem} from './accordion-item';\n/**\n * \\@docs-private\n */\nexport class MdExpansionPanelBase extends AccordionItem {\n/**\n * @param {?} accordion\n * @param {?} _changeDetectorRef\n * @param {?} _uniqueSelectionDispatcher\n */\nconstructor(accordion: MdAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n  }\n}\nexport const /** @type {?} */ _MdExpansionPanelMixinBase = mixinDisabled(MdExpansionPanelBase);\n\n/** MdExpansionPanel's states. */\nexport type MdExpansionPanelState = 'expanded' | 'collapsed';\n/**\n * Time and timing curve for expansion panel animations.\n */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/**\n * <md-expansion-panel> component.\n * \n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the CdkAccordion directive attached.\n * \n * Please refer to README.md for examples on how to use it.\n */\nexport class MdExpansionPanel extends _MdExpansionPanelMixinBase\n    implements CanDisable, OnChanges, OnDestroy {\n/**\n * Whether the toggle indicator should be hidden.\n */\nhideToggle: boolean = false;\n/**\n * Stream that emits for changes in `\\@Input` properties.\n */\n_inputChanges = new Subject<SimpleChanges>();\n/**\n * @param {?} accordion\n * @param {?} _changeDetectorRef\n * @param {?} _uniqueSelectionDispatcher\n */\nconstructor(  accordion: MdAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n/**\n * Whether the expansion indicator should be hidden.\n * @return {?}\n */\n_getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n/**\n * Determines whether the expansion panel should have spacing between it and its siblings.\n * @return {?}\n */\n_hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n/**\n * Gets the expanded state string.\n * @return {?}\n */\n_getExpandedState(): MdExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._inputChanges.complete();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'md-expansion-panel, mat-expansion-panel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  },\n  providers: [\n    {provide: AccordionItem, useExisting: forwardRef(() => MdExpansionPanel)}\n  ],\n  animations: [\n    trigger('bodyExpansion', [\n      state('collapsed', style({height: '0px', visibility: 'hidden'})),\n      state('expanded', style({height: '*', visibility: 'visible'})),\n      transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdAccordion, decorators: [{ type: Optional }, { type: Host }, ]},\n{type: ChangeDetectorRef, },\n{type: UniqueSelectionDispatcher, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'hideToggle': [{ type: Input },],\n};\n}\n\nfunction MdExpansionPanel_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanel.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanel.ctorParameters;\n/** @type {?} */\nMdExpansionPanel.propDecorators;\n/**\n * Whether the toggle indicator should be hidden.\n * @type {?}\n */\nMdExpansionPanel.prototype.hideToggle;\n/**\n * Stream that emits for changes in `\\@Input` properties.\n * @type {?}\n */\nMdExpansionPanel.prototype._inputChanges;\n}\n\nexport class MdExpansionPanelActionRow {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'mat-action-row, md-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdExpansionPanelActionRow_tsickle_Closure_declarations() {\n/** @type {?} */\nMdExpansionPanelActionRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdExpansionPanelActionRow.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Output,\n  EventEmitter,\n  Input,\n  Injectable,\n  OnDestroy,\n  Optional,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {UniqueSelectionDispatcher} from '@angular/material/core';\nimport {CdkAccordion} from './accordion';\n/**\n * Used to generate unique ID for each expansion panel.\n */\nlet nextId = 0;\n/**\n * An abstract class to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\nexport class AccordionItem implements OnDestroy {\n/**\n * Event emitted every time the AccordionItem is closed.\n */\nclosed = new EventEmitter<void>();\n/**\n * Event emitted every time the AccordionItem is opened.\n */\nopened = new EventEmitter<void>();\n/**\n * Event emitted when the AccordionItem is destroyed.\n */\ndestroyed = new EventEmitter<void>();\n/**\n * The unique AccordionItem id.\n */\nreadonly id = `cdk-accordion-child-${nextId++}`;\n/**\n * Whether the AccordionItem is expanded.\n * @return {?}\n */\nget expanded(): boolean { return this._expanded; }\n/**\n * @param {?} expanded\n * @return {?}\n */\nset expanded(expanded: boolean) {\n    // Only emit events and update the internal value if the value changes.\n    if (this._expanded !== expanded) {\n      this._expanded = expanded;\n      if (expanded) {\n        this.opened.emit();\n/**\n * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n * the name value is the id of the accordion.\n */\nconst accordionId = this.accordion ? this.accordion.id : this.id;\n        this._expansionDispatcher.notify(this.id, accordionId);\n      } else {\n        this.closed.emit();\n      }\n\n      // Ensures that the animation will run when the value is set outside of an `@Input`.\n      // This includes cases like the open, close and toggle methods.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\nprivate _expanded: boolean;\n/**\n * Unregister function for _expansionDispatcher *\n */\nprivate _removeUniqueSelectionListener: () => void = () => {};\n/**\n * @param {?} accordion\n * @param {?} _changeDetectorRef\n * @param {?} _expansionDispatcher\n */\nconstructor(\npublic accordion: CdkAccordion,\nprivate _changeDetectorRef: ChangeDetectorRef,\n              protected _expansionDispatcher: UniqueSelectionDispatcher) {\n    this._removeUniqueSelectionListener =\n      _expansionDispatcher.listen((id: string, accordionId: string) => {\n        if (this.accordion && !this.accordion.multi &&\n            this.accordion.id === accordionId && this.id !== id) {\n          this.expanded = false;\n        }\n      });\n  }\n/**\n * Emits an event for the accordion item being destroyed.\n * @return {?}\n */\nngOnDestroy() {\n    this.destroyed.emit();\n    this._removeUniqueSelectionListener();\n  }\n/**\n * Toggles the expanded state of the accordion item.\n * @return {?}\n */\ntoggle(): void {\n    this.expanded = !this.expanded;\n  }\n/**\n * Sets the expanded state of the accordion item to false.\n * @return {?}\n */\nclose(): void {\n    this.expanded = false;\n  }\n/**\n * Sets the expanded state of the accordion item to true.\n * @return {?}\n */\nopen(): void {\n    this.expanded = true;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkAccordion, decorators: [{ type: Optional }, ]},\n{type: ChangeDetectorRef, },\n{type: UniqueSelectionDispatcher, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'closed': [{ type: Output },],\n'opened': [{ type: Output },],\n'destroyed': [{ type: Output },],\n'expanded': [{ type: Input },],\n};\n}\n\nfunction AccordionItem_tsickle_Closure_declarations() {\n/** @type {?} */\nAccordionItem.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAccordionItem.ctorParameters;\n/** @type {?} */\nAccordionItem.propDecorators;\n/**\n * Event emitted every time the AccordionItem is closed.\n * @type {?}\n */\nAccordionItem.prototype.closed;\n/**\n * Event emitted every time the AccordionItem is opened.\n * @type {?}\n */\nAccordionItem.prototype.opened;\n/**\n * Event emitted when the AccordionItem is destroyed.\n * @type {?}\n */\nAccordionItem.prototype.destroyed;\n/**\n * The unique AccordionItem id.\n * @type {?}\n */\nAccordionItem.prototype.id;\n/** @type {?} */\nAccordionItem.prototype._expanded;\n/**\n * Unregister function for _expansionDispatcher *\n * @type {?}\n */\nAccordionItem.prototype._removeUniqueSelectionListener;\n/** @type {?} */\nAccordionItem.prototype.accordion;\n/** @type {?} */\nAccordionItem.prototype._changeDetectorRef;\n/** @type {?} */\nAccordionItem.prototype._expansionDispatcher;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n/** MdAccordion's display modes. */\nexport type MdAccordionDisplayMode = 'default' | 'flat';\n/**\n * Unique ID counter\n */\nlet nextId = 0;\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\nexport class CdkAccordion {\n/**\n * A readonly id value to use for unique selection coordination.\n */\nreadonly id = `cdk-accordion-${nextId++}`;\n/**\n * Whether the accordion should allow multiple expanded accordion items simulateously.\n * @return {?}\n */\nget multi(): boolean { return this._multi; }\n/**\n * @param {?} multi\n * @return {?}\n */\nset multi(multi: boolean) { this._multi = coerceBooleanProperty(multi); }\nprivate  _multi: boolean = false;\n/**\n * Whether the expansion indicator should be hidden.\n * @return {?}\n */\nget hideToggle(): boolean { return this._hideToggle; }\n/**\n * @param {?} show\n * @return {?}\n */\nset hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\nprivate  _hideToggle: boolean = false;\n/**\n * The display mode used for all expansion panels in the accordion. Currently two display\n * modes exist:\n *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n *     panel at a different elevation from the reset of the accordion.\n *  flat - no spacing is placed around expanded panels, showing all panels at the same\n *     elevation.\n */\ndisplayMode: MdAccordionDisplayMode = 'default';\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'cdk-accordion, [cdk-accordion]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'multi': [{ type: Input },],\n'hideToggle': [{ type: Input },],\n'displayMode': [{ type: Input },],\n};\n}\n\nfunction CdkAccordion_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkAccordion.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkAccordion.ctorParameters;\n/** @type {?} */\nCdkAccordion.propDecorators;\n/**\n * A readonly id value to use for unique selection coordination.\n * @type {?}\n */\nCdkAccordion.prototype.id;\n/** @type {?} */\nCdkAccordion.prototype._multi;\n/** @type {?} */\nCdkAccordion.prototype._hideToggle;\n/**\n * The display mode used for all expansion panels in the accordion. Currently two display\n * modes exist:\n *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n *     panel at a different elevation from the reset of the accordion.\n *  flat - no spacing is placed around expanded panels, showing all panels at the same\n *     elevation.\n * @type {?}\n */\nCdkAccordion.prototype.displayMode;\n}\n\n/**\n * Directive for a Material Design Accordion.\n */\nexport class MdAccordion extends CdkAccordion {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'mat-accordion, md-accordion',\n  host: {\n    class: 'mat-accordion'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdAccordion_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAccordion.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAccordion.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MdButtonModule} from '@angular/material/button';\nimport {MdDialogModule} from '@angular/material/dialog';\nimport {MdIconModule} from '@angular/material/icon';\nimport {MdCalendar} from './calendar';\nimport {MdCalendarBody} from './calendar-body';\nimport {\n  MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  MdDatepicker,\n  MdDatepickerContent,\n} from './datepicker';\nimport {MdDatepickerInput} from './datepicker-input';\nimport {MdDatepickerIntl} from './datepicker-intl';\nimport {MdDatepickerToggle} from './datepicker-toggle';\nimport {MdMonthView} from './month-view';\nimport {MdYearView} from './year-view';\nexport class MdDatepickerModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    MdButtonModule,\n    MdDialogModule,\n    MdIconModule,\n    OverlayModule,\n    A11yModule,\n  ],\n  exports: [\n    MdCalendar,\n    MdCalendarBody,\n    MdDatepicker,\n    MdDatepickerContent,\n    MdDatepickerInput,\n    MdDatepickerToggle,\n    MdMonthView,\n    MdYearView,\n  ],\n  declarations: [\n    MdCalendar,\n    MdCalendarBody,\n    MdDatepicker,\n    MdDatepickerContent,\n    MdDatepickerInput,\n    MdDatepickerToggle,\n    MdMonthView,\n    MdYearView,\n  ],\n  providers: [\n    MdDatepickerIntl,\n    MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [\n    MdDatepickerContent,\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDatepickerModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MD_DATE_FORMATS, MdDateFormats} from '@angular/material/core';\nimport {MdCalendarCell} from './calendar-body';\nimport {coerceDateProperty} from './coerce-date-property';\nimport {createMissingDateImplError} from './datepicker-errors';\n/**\n * An internal component used to display a single year in the datepicker.\n * \\@docs-private\n */\nexport class MdYearView<D> implements AfterContentInit {\n/**\n * The date to display in this year view (everything other than the year is ignored).\n * @return {?}\n */\nget activeDate(): D { return this._activeDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset activeDate(value: D) {\n    let /** @type {?} */ oldActiveDate = this._activeDate;\n    this._activeDate = coerceDateProperty(this._dateAdapter, value) || this._dateAdapter.today();\n    if (this._dateAdapter.getYear(oldActiveDate) != this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\nprivate _activeDate: D;\n/**\n * The currently selected date.\n * @return {?}\n */\nget selected(): D | null { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: D | null) {\n    this._selected = coerceDateProperty(this._dateAdapter, value);\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\nprivate _selected: D | null;\n/**\n * A function used to filter which dates are selectable.\n */\ndateFilter: (date: D) => boolean;\n/**\n * Emits when a new month is selected.\n */\nselectedChange = new EventEmitter<D>();\n/**\n * Grid of calendar cells representing the months of the year.\n */\n_months: MdCalendarCell[][];\n/**\n * The label for this year (e.g. \"2017\").\n */\n_yearLabel: string;\n/**\n * The month in this year that today falls on. Null if today is in a different year.\n */\n_todayMonth: number | null;\n/**\n * The month in this year that the selected Date falls on.\n * Null if the selected Date is in a different year.\n */\n_selectedMonth: number | null;\n/**\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n */\nconstructor(\npublic _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MdDateFormats) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MD_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._init();\n  }\n/**\n * Handles when a new month is selected.\n * @param {?} month\n * @return {?}\n */\n_monthSelected(month: number) {\n    let /** @type {?} */ daysInMonth = this._dateAdapter.getNumDaysInMonth(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n/**\n * Initializes this month view.\n * @return {?}\n */\nprivate _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let /** @type {?} */ monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n  }\n/**\n * Gets the month in this year that the given Date falls on.\n * Returns null if the given Date is in another year.\n * @param {?} date\n * @return {?}\n */\nprivate _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n/**\n * Creates an MdCalendarCell for the given month.\n * @param {?} month\n * @param {?} monthName\n * @return {?}\n */\nprivate _createCellForMonth(month: number, monthName: string) {\n    let /** @type {?} */ ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MdCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._isMonthEnabled(month));\n  }\n/**\n * Whether the given month is enabled.\n * @param {?} month\n * @return {?}\n */\nprivate _isMonthEnabled(month: number) {\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    let /** @type {?} */ firstOfMonth = this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let /** @type {?} */ date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-year-view, mat-year-view',\n  templateUrl: 'year-view.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_DATE_FORMATS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'activeDate': [{ type: Input },],\n'selected': [{ type: Input },],\n'dateFilter': [{ type: Input },],\n'selectedChange': [{ type: Output },],\n};\n}\n\nfunction MdYearView_tsickle_Closure_declarations() {\n/** @type {?} */\nMdYearView.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdYearView.ctorParameters;\n/** @type {?} */\nMdYearView.propDecorators;\n/** @type {?} */\nMdYearView.prototype._activeDate;\n/** @type {?} */\nMdYearView.prototype._selected;\n/**\n * A function used to filter which dates are selectable.\n * @type {?}\n */\nMdYearView.prototype.dateFilter;\n/**\n * Emits when a new month is selected.\n * @type {?}\n */\nMdYearView.prototype.selectedChange;\n/**\n * Grid of calendar cells representing the months of the year.\n * @type {?}\n */\nMdYearView.prototype._months;\n/**\n * The label for this year (e.g. \"2017\").\n * @type {?}\n */\nMdYearView.prototype._yearLabel;\n/**\n * The month in this year that today falls on. Null if today is in a different year.\n * @type {?}\n */\nMdYearView.prototype._todayMonth;\n/**\n * The month in this year that the selected Date falls on.\n * Null if the selected Date is in a different year.\n * @type {?}\n */\nMdYearView.prototype._selectedMonth;\n/** @type {?} */\nMdYearView.prototype._dateAdapter;\n/** @type {?} */\nMdYearView.prototype._dateFormats;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  DateAdapter, MATERIAL_COMPATIBILITY_MODE, MD_DATE_FORMATS,\n  MdDateFormats\n} from '@angular/material/core';\nimport {MdCalendarCell} from './calendar-body';\nimport {coerceDateProperty} from './coerce-date-property';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst /** @type {?} */ DAYS_PER_WEEK = 7;\n/**\n * An internal component used to display a single month in the datepicker.\n * \\@docs-private\n */\nexport class MdMonthView<D> implements AfterContentInit {\n/**\n * The date to display in this month view (everything other than the month and year is ignored).\n * @return {?}\n */\nget activeDate(): D { return this._activeDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset activeDate(value: D) {\n    let /** @type {?} */ oldActiveDate = this._activeDate;\n    this._activeDate = coerceDateProperty(this._dateAdapter, value) || this._dateAdapter.today();\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\nprivate _activeDate: D;\n/**\n * The currently selected date.\n * @return {?}\n */\nget selected(): D | null { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: D | null) {\n    this._selected = coerceDateProperty(this._dateAdapter, value);\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\nprivate _selected: D | null;\n/**\n * A function used to filter which dates are selectable.\n */\ndateFilter: (date: D) => boolean;\n/**\n * Emits when a new date is selected.\n */\nselectedChange = new EventEmitter<D | null>();\n/**\n * Emits when any date is selected.\n */\nuserSelection = new EventEmitter<void>();\n/**\n * The label for this month (e.g. \"January 2017\").\n */\n_monthLabel: string;\n/**\n * Grid of calendar cells representing the dates of the month.\n */\n_weeks: MdCalendarCell[][];\n/**\n * The number of blank cells in the first row before the 1st of the month.\n */\n_firstWeekOffset: number;\n/**\n * The date of the month that the currently selected Date falls on.\n * Null if the currently selected Date is in another month.\n */\n_selectedDate: number | null;\n/**\n * The date of the month that today falls on. Null if today is in another month.\n */\n_todayDate: number | null;\n/**\n * The names of the weekdays.\n */\n_weekdays: {long: string, narrow: string}[];\n/**\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n */\nconstructor(\npublic _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MdDateFormats) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MD_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\n    this._init();\n  }\n/**\n * Handles when a new date is selected.\n * @param {?} date\n * @return {?}\n */\n_dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const /** @type {?} */ selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const /** @type {?} */ selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const /** @type {?} */ selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this.userSelection.emit();\n  }\n/**\n * Initializes this month view.\n * @return {?}\n */\nprivate _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let /** @type {?} */ firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n  }\n/**\n * Creates MdCalendarCells for the dates in this month.\n * @return {?}\n */\nprivate _createWeekCells() {\n    let /** @type {?} */ daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    let /** @type {?} */ dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let /** @type {?} */ i = 0, /** @type {?} */ cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      let /** @type {?} */ date = this._dateAdapter.createDate(\n          this._dateAdapter.getYear(this.activeDate),\n          this._dateAdapter.getMonth(this.activeDate), i + 1);\n      let /** @type {?} */ enabled = !this.dateFilter ||\n          this.dateFilter(date);\n      let /** @type {?} */ ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MdCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n/**\n * Gets the date in this month that the given Date falls on.\n * Returns null if the given Date is in another month.\n * @param {?} date\n * @return {?}\n */\nprivate _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n/**\n * Checks whether the 2 dates are non-null and fall within the same month of the same year.\n * @param {?} d1\n * @param {?} d2\n * @return {?}\n */\nprivate _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-month-view',\n  templateUrl: 'month-view.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_DATE_FORMATS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'activeDate': [{ type: Input },],\n'selected': [{ type: Input },],\n'dateFilter': [{ type: Input },],\n'selectedChange': [{ type: Output },],\n'userSelection': [{ type: Output },],\n};\n}\n\nfunction MdMonthView_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMonthView.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMonthView.ctorParameters;\n/** @type {?} */\nMdMonthView.propDecorators;\n/** @type {?} */\nMdMonthView.prototype._activeDate;\n/** @type {?} */\nMdMonthView.prototype._selected;\n/**\n * A function used to filter which dates are selectable.\n * @type {?}\n */\nMdMonthView.prototype.dateFilter;\n/**\n * Emits when a new date is selected.\n * @type {?}\n */\nMdMonthView.prototype.selectedChange;\n/**\n * Emits when any date is selected.\n * @type {?}\n */\nMdMonthView.prototype.userSelection;\n/**\n * The label for this month (e.g. \"January 2017\").\n * @type {?}\n */\nMdMonthView.prototype._monthLabel;\n/**\n * Grid of calendar cells representing the dates of the month.\n * @type {?}\n */\nMdMonthView.prototype._weeks;\n/**\n * The number of blank cells in the first row before the 1st of the month.\n * @type {?}\n */\nMdMonthView.prototype._firstWeekOffset;\n/**\n * The date of the month that the currently selected Date falls on.\n * Null if the currently selected Date is in another month.\n * @type {?}\n */\nMdMonthView.prototype._selectedDate;\n/**\n * The date of the month that today falls on. Null if today is in another month.\n * @type {?}\n */\nMdMonthView.prototype._todayDate;\n/**\n * The names of the weekdays.\n * @type {?}\n */\nMdMonthView.prototype._weekdays;\n/** @type {?} */\nMdMonthView.prototype._dateAdapter;\n/** @type {?} */\nMdMonthView.prototype._dateFormats;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  ViewEncapsulation,\n  OnDestroy,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {MdDatepicker} from './datepicker';\nimport {MdDatepickerIntl} from './datepicker-intl';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {MATERIAL_COMPATIBILITY_MODE} from '@angular/material/core';\nexport class MdDatepickerToggle<D> implements OnChanges, OnDestroy {\nprivate _stateChanges = Subscription.EMPTY;\n/**\n * Datepicker instance that the button will toggle.\n */\ndatepicker: MdDatepicker<D>;\n/**\n * Whether the toggle button is disabled.\n * @return {?}\n */\nget disabled() {\n    return this._disabled === undefined ? this.datepicker.disabled : this._disabled;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\nprivate _disabled: boolean;\n/**\n * @param {?} _intl\n * @param {?} _changeDetectorRef\n */\nconstructor(\npublic _intl: MdDatepickerIntl,\nprivate _changeDetectorRef: ChangeDetectorRef) {}\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      const /** @type {?} */ datepicker: MdDatepicker<D> = changes.datepicker.currentValue;\n      const /** @type {?} */ datepickerDisabled = datepicker ? datepicker._disabledChange : observableOf();\n      const /** @type {?} */ inputDisabled = datepicker && datepicker._datepickerInput ?\n        datepicker._datepickerInput._disabledChange :\n        observableOf();\n\n      this._stateChanges.unsubscribe();\n      this._stateChanges = merge(this._intl.changes, datepickerDisabled, inputDisabled)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-datepicker-toggle, mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  host: {\n    'class': 'mat-datepicker-toggle',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDatepickerIntl, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'datepicker': [{ type: Input, args: ['for', ] },],\n'disabled': [{ type: Input },],\n};\n}\n\nfunction MdDatepickerToggle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerToggle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerToggle.ctorParameters;\n/** @type {?} */\nMdDatepickerToggle.propDecorators;\n/** @type {?} */\nMdDatepickerToggle.prototype._stateChanges;\n/**\n * Datepicker instance that the button will toggle.\n * @type {?}\n */\nMdDatepickerToggle.prototype.datepicker;\n/** @type {?} */\nMdDatepickerToggle.prototype._disabled;\n/** @type {?} */\nMdDatepickerToggle.prototype._intl;\n/** @type {?} */\nMdDatepickerToggle.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MD_DATE_FORMATS, MdDateFormats} from '@angular/material/core';\nimport {MdFormField} from '@angular/material/form-field';\nimport {Subscription} from 'rxjs/Subscription';\nimport {coerceDateProperty} from './coerce-date-property';\nimport {MdDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const /** @type {?} */ MD_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdDatepickerInput),\n  multi: true\n};\n\n\nexport const /** @type {?} */ MD_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MdDatepickerInput),\n  multi: true\n};\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MdDatepickerInputEvent instead.\n */\nexport class MdDatepickerInputEvent<D> {\n/**\n * The new value for the target datepicker input.\n */\nvalue: D | null;\n/**\n * @param {?} target\n * @param {?} targetElement\n */\nconstructor(public target: MdDatepickerInput<D>,\npublic targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\nfunction MdDatepickerInputEvent_tsickle_Closure_declarations() {\n/**\n * The new value for the target datepicker input.\n * @type {?}\n */\nMdDatepickerInputEvent.prototype.value;\n/** @type {?} */\nMdDatepickerInputEvent.prototype.target;\n/** @type {?} */\nMdDatepickerInputEvent.prototype.targetElement;\n}\n\n/**\n * Directive used to connect an input to a MdDatepicker.\n */\nexport class MdDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n/**\n * The datepicker that this input is associated with.\n * @param {?} value\n * @return {?}\n */\nset mdDatepicker(value: MdDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MdDatepicker<D>;\n/**\n * @param {?} value\n * @return {?}\n */\nprivate registerDatepicker(value: MdDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset matDatepicker(value: MdDatepicker<D>) {\n    // Note that we don't set `this.mdDatepicker = value` here,\n    // because that line gets stripped by the JS compiler.\n    this.registerDatepicker(value);\n  }\n/**\n * @param {?} filter\n * @return {?}\n */\nset mdDatepickerFilter(filter: (date: D | null) => boolean) {\n    this._dateFilter = filter;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n/**\n * @param {?} filter\n * @return {?}\n */\nset matDatepickerFilter(filter: (date: D | null) => boolean) {\n    this.mdDatepickerFilter = filter;\n  }\n/**\n * The value of the input.\n * @return {?}\n */\nget value(): D | null {\n    return this._value;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: D | null) {\n    value = coerceDateProperty(this._dateAdapter, value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n\n    let /** @type {?} */ oldDate = this.value;\n    this._value = value;\n    this._renderer.setProperty(this._elementRef.nativeElement, 'value',\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '');\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\nprivate _value: D | null;\n/**\n * The minimum valid date.\n * @return {?}\n */\nget min(): D | null { return this._min; }\n/**\n * @param {?} value\n * @return {?}\n */\nset min(value: D | null) {\n    this._min = coerceDateProperty(this._dateAdapter, value);\n    this._validatorOnChange();\n  }\nprivate _min: D | null;\n/**\n * The maximum valid date.\n * @return {?}\n */\nget max(): D | null { return this._max; }\n/**\n * @param {?} value\n * @return {?}\n */\nset max(value: D | null) {\n    this._max = coerceDateProperty(this._dateAdapter, value);\n    this._validatorOnChange();\n  }\nprivate _max: D | null;\n/**\n * Whether the datepicker-input is disabled.\n * @return {?}\n */\nget disabled() { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) {\n    const /** @type {?} */ newValue = coerceBooleanProperty(value);\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n  }\nprivate _disabled: boolean;\n/**\n * Emits when a `change` event is fired on this `<input>`.\n */\ndateChange = new EventEmitter<MdDatepickerInputEvent<D>>();\n/**\n * Emits when an `input` event is fired on this `<input>`.\n */\ndateInput = new EventEmitter<MdDatepickerInputEvent<D>>();\n/**\n * Emits when the value changes (either due to user input or programmatic change).\n */\n_valueChange = new EventEmitter<D|null>();\n/**\n * Emits when the disabled state has changed\n */\n_disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\nprivate _cvaOnChange: (value: any) => void = () => {};\nprivate _validatorOnChange = () => {};\nprivate _datepickerSubscription = Subscription.EMPTY;\nprivate _localeSubscription = Subscription.EMPTY;\n/**\n * The form control validator for whether the input parses.\n */\nprivate _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'mdDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n/**\n * The form control validator for the min date.\n */\nprivate _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = coerceDateProperty(this._dateAdapter, control.value);\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'mdDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n/**\n * The form control validator for the max date.\n */\nprivate _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = coerceDateProperty(this._dateAdapter, control.value);\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'mdDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n/**\n * The form control validator for the date filter.\n */\nprivate _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = coerceDateProperty(this._dateAdapter, control.value);\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'mdDatepickerFilter': true};\n  }\n/**\n * The combined form control validator for this input.\n */\nprivate _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n/**\n * Whether the last value set on the input was valid.\n */\nprivate _lastValueValid = false;\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n * @param {?} _mdFormField\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _renderer: Renderer2,\nprivate _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MdDateFormats,\nprivate _mdFormField: MdFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MD_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription =\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this._cvaOnChange(selected);\n            this._onTouched();\n            this.dateInput.emit(new MdDatepickerInputEvent(this, this._elementRef.nativeElement));\n            this.dateChange.emit(new MdDatepickerInputEvent(this, this._elementRef.nativeElement));\n          });\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n/**\n * Gets the element that the datepicker popup should be connected to.\n * @return {?} The element to connect the popup to.\n */\ngetPopupConnectionElementRef(): ElementRef {\n    return this._mdFormField ? this._mdFormField.underlineRef : this._elementRef;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: D): void {\n    this.value = value;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n/**\n * @param {?} disabled\n * @return {?}\n */\nsetDisabledState(disabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', disabled);\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\n_onInput(value: string) {\n    let /** @type {?} */ date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new MdDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n/**\n * @return {?}\n */\n_onChange() {\n    this.dateChange.emit(new MdDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n/**\n * @param {?} obj The object to check.\n * @return {?} The given object if it is both a date instance and valid, otherwise null.\n */\nprivate _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'input[mdDatepicker], input[matDatepicker]',\n  providers: [MD_DATEPICKER_VALUE_ACCESSOR, MD_DATEPICKER_VALIDATORS],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'mdDatepickerInput, matDatepickerInput',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_DATE_FORMATS, ] }, ]},\n{type: MdFormField, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'mdDatepicker': [{ type: Input },],\n'matDatepicker': [{ type: Input },],\n'mdDatepickerFilter': [{ type: Input },],\n'matDatepickerFilter': [{ type: Input },],\n'value': [{ type: Input },],\n'min': [{ type: Input },],\n'max': [{ type: Input },],\n'disabled': [{ type: Input },],\n'dateChange': [{ type: Output },],\n'dateInput': [{ type: Output },],\n};\n}\n\nfunction MdDatepickerInput_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerInput.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerInput.ctorParameters;\n/** @type {?} */\nMdDatepickerInput.propDecorators;\n/** @type {?} */\nMdDatepickerInput.prototype._datepicker;\n/** @type {?} */\nMdDatepickerInput.prototype._dateFilter;\n/** @type {?} */\nMdDatepickerInput.prototype._value;\n/** @type {?} */\nMdDatepickerInput.prototype._min;\n/** @type {?} */\nMdDatepickerInput.prototype._max;\n/** @type {?} */\nMdDatepickerInput.prototype._disabled;\n/**\n * Emits when a `change` event is fired on this `<input>`.\n * @type {?}\n */\nMdDatepickerInput.prototype.dateChange;\n/**\n * Emits when an `input` event is fired on this `<input>`.\n * @type {?}\n */\nMdDatepickerInput.prototype.dateInput;\n/**\n * Emits when the value changes (either due to user input or programmatic change).\n * @type {?}\n */\nMdDatepickerInput.prototype._valueChange;\n/**\n * Emits when the disabled state has changed\n * @type {?}\n */\nMdDatepickerInput.prototype._disabledChange;\n/** @type {?} */\nMdDatepickerInput.prototype._onTouched;\n/** @type {?} */\nMdDatepickerInput.prototype._cvaOnChange;\n/** @type {?} */\nMdDatepickerInput.prototype._validatorOnChange;\n/** @type {?} */\nMdDatepickerInput.prototype._datepickerSubscription;\n/** @type {?} */\nMdDatepickerInput.prototype._localeSubscription;\n/**\n * The form control validator for whether the input parses.\n * @type {?}\n */\nMdDatepickerInput.prototype._parseValidator;\n/**\n * The form control validator for the min date.\n * @type {?}\n */\nMdDatepickerInput.prototype._minValidator;\n/**\n * The form control validator for the max date.\n * @type {?}\n */\nMdDatepickerInput.prototype._maxValidator;\n/**\n * The form control validator for the date filter.\n * @type {?}\n */\nMdDatepickerInput.prototype._filterValidator;\n/**\n * The combined form control validator for this input.\n * @type {?}\n */\nMdDatepickerInput.prototype._validator;\n/**\n * Whether the last value set on the input was valid.\n * @type {?}\n */\nMdDatepickerInput.prototype._lastValueValid;\n/** @type {?} */\nMdDatepickerInput.prototype._elementRef;\n/** @type {?} */\nMdDatepickerInput.prototype._renderer;\n/** @type {?} */\nMdDatepickerInput.prototype._dateAdapter;\n/** @type {?} */\nMdDatepickerInput.prototype._dateFormats;\n/** @type {?} */\nMdDatepickerInput.prototype._mdFormField;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  PositionStrategy,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {first} from '@angular/cdk/rxjs';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MATERIAL_COMPATIBILITY_MODE} from '@angular/material/core';\nimport {MdDialog, MdDialogRef} from '@angular/material/dialog';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MdCalendar} from './calendar';\nimport {coerceDateProperty} from './coerce-date-property';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MdDatepickerInput} from './datepicker-input';\n/**\n * Used to generate a unique ID for each datepicker instance.\n */\nlet datepickerUid = 0;\n/**\n * Injection token that determines the scroll handling while the calendar is open.\n */\nexport const MD_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('md-datepicker-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n/**\n * \\@docs-private\n */\nexport const MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {\n  provide: MD_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MD_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MdCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * \\@docs-private\n */\nexport class MdDatepickerContent<D> implements AfterContentInit {\n  datepicker: MdDatepicker<D>;\n\n   _calendar: MdCalendar<D>;\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._calendar._focusActiveCell();\n  }\n/**\n * Handles keydown event on datepicker content.\n * @param {?} event The event.\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ESCAPE) {\n      this.datepicker.close();\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-datepicker-content, mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_calendar': [{ type: ViewChild, args: [MdCalendar, ] },],\n};\n}\n\nfunction MdDatepickerContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerContent.ctorParameters;\n/** @type {?} */\nMdDatepickerContent.propDecorators;\n/** @type {?} */\nMdDatepickerContent.prototype.datepicker;\n/** @type {?} */\nMdDatepickerContent.prototype._calendar;\n}\n\n/**\n * Component responsible for managing the datepicker popup/dialog.\n */\nexport class MdDatepicker<D> implements OnDestroy {\n/**\n * The date to open the calendar to initially.\n * @return {?}\n */\nget startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nset startAt(date: D | null) { this._startAt = coerceDateProperty(this._dateAdapter, date); }\nprivate _startAt: D | null;\n/**\n * The view that the calendar should start in.\n */\nstartView: 'month' | 'year' = 'month';\n/**\n * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n * than a popup and elements have more padding to allow for bigger touch targets.\n */\ntouchUi = false;\n/**\n * Whether the datepicker pop-up should be disabled.\n * @return {?}\n */\nget disabled() {\n    return this._disabled === undefined ? this._datepickerInput.disabled : this._disabled;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) {\n    const /** @type {?} */ newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\nprivate _disabled: boolean;\n/**\n * Emits new selected date when selected date changes.\n * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n */\nselectedChanged = new EventEmitter<D>();\n/**\n * Whether the calendar is open.\n */\nopened = false;\n/**\n * The id for the datepicker calendar.\n */\nid = `md-datepicker-${datepickerUid++}`;\n/**\n * The currently selected date.\n * @return {?}\n */\nget _selected(): D | null { return this._validSelected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _selected(value: D | null) { this._validSelected = value; }\nprivate _validSelected: D | null = null;\n/**\n * The minimum selectable date.\n * @return {?}\n */\nget _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n/**\n * The maximum selectable date.\n * @return {?}\n */\nget _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n/**\n * @return {?}\n */\nget _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n/**\n * A reference to the overlay when the calendar is opened as a popup.\n */\nprivate _popupRef: OverlayRef;\n/**\n * A reference to the dialog when the calendar is opened as a dialog.\n */\nprivate _dialogRef: MdDialogRef<any> | null;\n/**\n * A portal containing the calendar for this datepicker.\n */\nprivate _calendarPortal: ComponentPortal<MdDatepickerContent<D>>;\n/**\n * The element that was focused before the datepicker was opened.\n */\nprivate _focusedElementBeforeOpen: HTMLElement | null = null;\nprivate _inputSubscription = Subscription.EMPTY;\n/**\n * The input element this datepicker is associated with.\n */\n_datepickerInput: MdDatepickerInput<D>;\n/**\n * Emits when the datepicker is disabled.\n */\n_disabledChange = new Subject<boolean>();\n/**\n * @param {?} _dialog\n * @param {?} _overlay\n * @param {?} _ngZone\n * @param {?} _viewContainerRef\n * @param {?} _scrollStrategy\n * @param {?} _dateAdapter\n * @param {?} _dir\n * @param {?} _document\n */\nconstructor(private _dialog: MdDialog,\nprivate _overlay: Overlay,\nprivate _ngZone: NgZone,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _scrollStrategy,\nprivate _dateAdapter: DateAdapter<D>,\nprivate _dir: Directionality,\nprivate _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n    }\n  }\n/**\n * Selects the given date\n * @param {?} date\n * @return {?}\n */\n_select(date: D): void {\n    let /** @type {?} */ oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this.selectedChanged.emit(date);\n    }\n  }\n/**\n * Register an input with this datepicker.\n * @param {?} input The datepicker input to register with this datepicker.\n * @return {?}\n */\n_registerInput(input: MdDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('An MdDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n/**\n * Open the calendar.\n * @return {?}\n */\nopen(): void {\n    if (this.opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MdDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this.opened = true;\n  }\n/**\n * Close the calendar.\n * @return {?}\n */\nclose(): void {\n    if (!this.opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n\n      this._focusedElementBeforeOpen.focus();\n      this._focusedElementBeforeOpen = null;\n    }\n\n    this.opened = false;\n  }\n/**\n * Open the calendar as a dialog.\n * @return {?}\n */\nprivate _openAsDialog(): void {\n    this._dialogRef = this._dialog.open(MdDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n    });\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n  }\n/**\n * Open the calendar as a popup.\n * @return {?}\n */\nprivate _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal(MdDatepickerContent, this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      let /** @type {?} */ componentRef: ComponentRef<MdDatepickerContent<D>> =\n          this._popupRef.attach(this._calendarPortal);\n      componentRef.instance.datepicker = this;\n\n      // Update the position once the calendar has rendered.\n      first.call(this._ngZone.onStable.asObservable()).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n\n    this._popupRef.backdropClick().subscribe(() => this.close());\n  }\n/**\n * Create the popup.\n * @return {?}\n */\nprivate _createPopup(): void {\n    const /** @type {?} */ overlayState = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir ? this._dir.value : 'ltr',\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._popupRef = this._overlay.create(overlayState);\n  }\n/**\n * Create the popup PositionStrategy.\n * @return {?}\n */\nprivate _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .connectedTo(this._datepickerInput.getPopupConnectionElementRef(),\n        {originX: 'start', originY: 'bottom'},\n        {overlayX: 'start', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        { originX: 'start', originY: 'top' },\n        { overlayX: 'start', overlayY: 'bottom' }\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'bottom'},\n        {overlayX: 'end', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        { originX: 'end', originY: 'top' },\n        { overlayX: 'end', overlayY: 'bottom' }\n      );\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-datepicker, mat-datepicker',\n  template: '',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialog, },\n{type: Overlay, },\n{type: NgZone, },\n{type: ViewContainerRef, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_DATEPICKER_SCROLL_STRATEGY, ] }, ]},\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'startAt': [{ type: Input },],\n'startView': [{ type: Input },],\n'touchUi': [{ type: Input },],\n'disabled': [{ type: Input },],\n'selectedChanged': [{ type: Output },],\n};\n}\n\nfunction MdDatepicker_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepicker.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepicker.ctorParameters;\n/** @type {?} */\nMdDatepicker.propDecorators;\n/** @type {?} */\nMdDatepicker.prototype._startAt;\n/**\n * The view that the calendar should start in.\n * @type {?}\n */\nMdDatepicker.prototype.startView;\n/**\n * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n * than a popup and elements have more padding to allow for bigger touch targets.\n * @type {?}\n */\nMdDatepicker.prototype.touchUi;\n/** @type {?} */\nMdDatepicker.prototype._disabled;\n/**\n * Emits new selected date when selected date changes.\n * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n * @type {?}\n */\nMdDatepicker.prototype.selectedChanged;\n/**\n * Whether the calendar is open.\n * @type {?}\n */\nMdDatepicker.prototype.opened;\n/**\n * The id for the datepicker calendar.\n * @type {?}\n */\nMdDatepicker.prototype.id;\n/** @type {?} */\nMdDatepicker.prototype._validSelected;\n/**\n * A reference to the overlay when the calendar is opened as a popup.\n * @type {?}\n */\nMdDatepicker.prototype._popupRef;\n/**\n * A reference to the dialog when the calendar is opened as a dialog.\n * @type {?}\n */\nMdDatepicker.prototype._dialogRef;\n/**\n * A portal containing the calendar for this datepicker.\n * @type {?}\n */\nMdDatepicker.prototype._calendarPortal;\n/**\n * The element that was focused before the datepicker was opened.\n * @type {?}\n */\nMdDatepicker.prototype._focusedElementBeforeOpen;\n/** @type {?} */\nMdDatepicker.prototype._inputSubscription;\n/**\n * The input element this datepicker is associated with.\n * @type {?}\n */\nMdDatepicker.prototype._datepickerInput;\n/**\n * Emits when the datepicker is disabled.\n * @type {?}\n */\nMdDatepicker.prototype._disabledChange;\n/** @type {?} */\nMdDatepicker.prototype._dialog;\n/** @type {?} */\nMdDatepicker.prototype._overlay;\n/** @type {?} */\nMdDatepicker.prototype._ngZone;\n/** @type {?} */\nMdDatepicker.prototype._viewContainerRef;\n/** @type {?} */\nMdDatepicker.prototype._scrollStrategy;\n/** @type {?} */\nMdDatepicker.prototype._dateAdapter;\n/** @type {?} */\nMdDatepicker.prototype._dir;\n/** @type {?} */\nMdDatepicker.prototype._document;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * \\@docs-private\n */\nexport class MdCalendarCell {\n/**\n * @param {?} value\n * @param {?} displayValue\n * @param {?} ariaLabel\n * @param {?} enabled\n */\nconstructor(public value: number,\npublic displayValue: string,\npublic ariaLabel: string,\npublic enabled: boolean) {}\n}\n\nfunction MdCalendarCell_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCalendarCell.prototype.value;\n/** @type {?} */\nMdCalendarCell.prototype.displayValue;\n/** @type {?} */\nMdCalendarCell.prototype.ariaLabel;\n/** @type {?} */\nMdCalendarCell.prototype.enabled;\n}\n\n/**\n * An internal component used to display calendar data in a table.\n * \\@docs-private\n */\nexport class MdCalendarBody {\n/**\n * The label for the table. (e.g. \"Jan 2017\").\n */\nlabel: string;\n/**\n * The cells to display in the table.\n */\nrows: MdCalendarCell[][];\n/**\n * The value in the table that corresponds to today.\n */\ntodayValue: number;\n/**\n * The value in the table that is currently selected.\n */\nselectedValue: number;\n/**\n * The minimum number of free cells needed to fit the label in the first row.\n */\nlabelMinRequiredCells: number;\n/**\n * The number of columns in the table.\n */\nnumCols = 7;\n/**\n * Whether to allow selection of disabled cells.\n */\nallowDisabledSelection = false;\n/**\n * The cell number of the active cell in the table.\n */\nactiveCell = 0;\n/**\n * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n * maintained even as the table resizes.\n */\ncellAspectRatio = 1;\n/**\n * Emits when a new value is selected.\n */\nselectedValueChange = new EventEmitter<number>();\n/**\n * @param {?} cell\n * @return {?}\n */\n_cellClicked(cell: MdCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n/**\n * The number of blank cells to put at the beginning for the first row.\n * @return {?}\n */\nget _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n/**\n * @param {?} rowIndex\n * @param {?} colIndex\n * @return {?}\n */\n_isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let /** @type {?} */ cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: '[md-calendar-body], [mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'label': [{ type: Input },],\n'rows': [{ type: Input },],\n'todayValue': [{ type: Input },],\n'selectedValue': [{ type: Input },],\n'labelMinRequiredCells': [{ type: Input },],\n'numCols': [{ type: Input },],\n'allowDisabledSelection': [{ type: Input },],\n'activeCell': [{ type: Input },],\n'cellAspectRatio': [{ type: Input },],\n'selectedValueChange': [{ type: Output },],\n};\n}\n\nfunction MdCalendarBody_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCalendarBody.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCalendarBody.ctorParameters;\n/** @type {?} */\nMdCalendarBody.propDecorators;\n/**\n * The label for the table. (e.g. \"Jan 2017\").\n * @type {?}\n */\nMdCalendarBody.prototype.label;\n/**\n * The cells to display in the table.\n * @type {?}\n */\nMdCalendarBody.prototype.rows;\n/**\n * The value in the table that corresponds to today.\n * @type {?}\n */\nMdCalendarBody.prototype.todayValue;\n/**\n * The value in the table that is currently selected.\n * @type {?}\n */\nMdCalendarBody.prototype.selectedValue;\n/**\n * The minimum number of free cells needed to fit the label in the first row.\n * @type {?}\n */\nMdCalendarBody.prototype.labelMinRequiredCells;\n/**\n * The number of columns in the table.\n * @type {?}\n */\nMdCalendarBody.prototype.numCols;\n/**\n * Whether to allow selection of disabled cells.\n * @type {?}\n */\nMdCalendarBody.prototype.allowDisabledSelection;\n/**\n * The cell number of the active cell in the table.\n * @type {?}\n */\nMdCalendarBody.prototype.activeCell;\n/**\n * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n * maintained even as the table resizes.\n * @type {?}\n */\nMdCalendarBody.prototype.cellAspectRatio;\n/**\n * Emits when a new value is selected.\n * @type {?}\n */\nMdCalendarBody.prototype.selectedValueChange;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  DateAdapter,\n  MATERIAL_COMPATIBILITY_MODE,\n  MD_DATE_FORMATS,\n  MdDateFormats,\n} from '@angular/material/core';\nimport {first} from 'rxjs/operator/first';\nimport {Subscription} from 'rxjs/Subscription';\nimport {coerceDateProperty} from './coerce-date-property';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MdDatepickerIntl} from './datepicker-intl';\n/**\n * A calendar that is used as part of the datepicker.\n * \\@docs-private\n */\nexport class MdCalendar<D> implements AfterContentInit, OnDestroy {\nprivate _intlChanges: Subscription;\n/**\n * A date representing the period (month or year) to start the calendar in.\n * @return {?}\n */\nget startAt(): D | null { return this._startAt; }\n/**\n * @param {?} value\n * @return {?}\n */\nset startAt(value: D | null) { this._startAt = coerceDateProperty(this._dateAdapter, value); }\nprivate _startAt: D | null;\n/**\n * Whether the calendar should be started in month or year view.\n */\nstartView: 'month' | 'year' = 'month';\n/**\n * The currently selected date.\n * @return {?}\n */\nget selected(): D | null { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: D | null) { this._selected = coerceDateProperty(this._dateAdapter, value); }\nprivate _selected: D | null;\n/**\n * The minimum selectable date.\n * @return {?}\n */\nget minDate(): D | null { return this._minDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset minDate(value: D | null) { this._minDate = coerceDateProperty(this._dateAdapter, value); }\nprivate _minDate: D | null;\n/**\n * The maximum selectable date.\n * @return {?}\n */\nget maxDate(): D | null { return this._maxDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset maxDate(value: D | null) { this._maxDate = coerceDateProperty(this._dateAdapter, value); }\nprivate _maxDate: D | null;\n/**\n * A function used to filter which dates are selectable.\n */\ndateFilter: (date: D) => boolean;\n/**\n * Emits when the currently selected date changes.\n */\nselectedChange = new EventEmitter<D>();\n/**\n * Emits when any date is selected.\n */\nuserSelection = new EventEmitter<void>();\n/**\n * Date filter for the month and year views.\n */\n_dateFilterForViews = (date: D) => {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n/**\n * The current active date. This determines which time period is shown and which date is\n * highlighted when using keyboard navigation.\n * @return {?}\n */\nget _activeDate(): D { return this._clampedActiveDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n  }\nprivate _clampedActiveDate: D;\n/**\n * Whether the calendar is in month view.\n */\n_monthView: boolean;\n/**\n * The label for the current calendar view.\n * @return {?}\n */\nget _periodButtonText(): string {\n    return this._monthView ?\n        this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)\n            .toLocaleUpperCase() :\n        this._dateAdapter.getYearName(this._activeDate);\n  }\n/**\n * @return {?}\n */\nget _periodButtonLabel(): string {\n    return this._monthView ? this._intl.switchToYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n/**\n * The label for the the previous button.\n * @return {?}\n */\nget _prevButtonLabel(): string {\n    return this._monthView ? this._intl.prevMonthLabel : this._intl.prevYearLabel;\n  }\n/**\n * The label for the the next button.\n * @return {?}\n */\nget _nextButtonLabel(): string {\n    return this._monthView ? this._intl.nextMonthLabel : this._intl.nextYearLabel;\n  }\n/**\n * @param {?} _elementRef\n * @param {?} _intl\n * @param {?} _ngZone\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n * @param {?} changeDetectorRef\n */\nconstructor(private _elementRef: ElementRef,\nprivate _intl: MdDatepickerIntl,\nprivate _ngZone: NgZone,\nprivate _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MdDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MD_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._activeDate = this.startAt || this._dateAdapter.today();\n    this._focusActiveCell();\n    this._monthView = this.startView != 'year';\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n/**\n * Handles date selection in the month view.\n * @param {?} date\n * @return {?}\n */\n_dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n/**\n * @return {?}\n */\n_userSelected(): void {\n    this.userSelection.emit();\n  }\n/**\n * Handles month selection in the year view.\n * @param {?} month\n * @return {?}\n */\n_monthSelected(month: D): void {\n    this._activeDate = month;\n    this._monthView = true;\n  }\n/**\n * Handles user clicks on the period label.\n * @return {?}\n */\n_currentPeriodClicked(): void {\n    this._monthView = !this._monthView;\n  }\n/**\n * Handles user clicks on the previous button.\n * @return {?}\n */\n_previousClicked(): void {\n    this._activeDate = this._monthView ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\n        this._dateAdapter.addCalendarYears(this._activeDate, -1);\n  }\n/**\n * Handles user clicks on the next button.\n * @return {?}\n */\n_nextClicked(): void {\n    this._activeDate = this._monthView ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\n        this._dateAdapter.addCalendarYears(this._activeDate, 1);\n  }\n/**\n * Whether the previous period button is enabled.\n * @return {?}\n */\n_previousEnabled(): boolean {\n    if (!this.minDate) {\n      return true;\n    }\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\n  }\n/**\n * Whether the next period button is enabled.\n * @return {?}\n */\n_nextEnabled(): boolean {\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\n  }\n/**\n * Handles keydown events on the calendar body.\n * @param {?} event\n * @return {?}\n */\n_handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n    if (this._monthView) {\n      this._handleCalendarBodyKeydownInMonthView(event);\n    } else {\n      this._handleCalendarBodyKeydownInYearView(event);\n    }\n  }\n/**\n * Focuses the active cell after the microtask queue is empty.\n * @return {?}\n */\n_focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      first.call(this._ngZone.onStable.asObservable()).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n/**\n * Whether the two dates represent the same view in the current view mode (month or year).\n * @param {?} date1\n * @param {?} date2\n * @return {?}\n */\nprivate _isSameView(date1: D, date2: D): boolean {\n    return this._monthView ?\n        this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n        this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2) :\n        this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n  }\n/**\n * Handles keydown events on the calendar body when calendar is in month view.\n * @param {?} event\n * @return {?}\n */\nprivate _handleCalendarBodyKeydownInMonthView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n             this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (this._dateFilterForViews(this._activeDate)) {\n          this._dateSelected(this._activeDate);\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n/**\n * Handles keydown events on the calendar body when calendar is in year view.\n * @param {?} event\n * @return {?}\n */\nprivate _handleCalendarBodyKeydownInYearView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._prevMonthInSameCol(this._activeDate);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._nextMonthInSameCol(this._activeDate);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._activeDate);\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n/**\n * Determine the date for the month that comes before the given month in the same column in the\n * calendar table.\n * @param {?} date\n * @return {?}\n */\nprivate _prevMonthInSameCol(date: D): D {\n    // Determine how many months to jump forward given that there are 2 empty slots at the beginning\n    // of each year.\n    let /** @type {?} */ increment = this._dateAdapter.getMonth(date) <= 4 ? -5 :\n        (this._dateAdapter.getMonth(date) >= 7 ? -7 : -12);\n    return this._dateAdapter.addCalendarMonths(date, increment);\n  }\n/**\n * Determine the date for the month that comes after the given month in the same column in the\n * calendar table.\n * @param {?} date\n * @return {?}\n */\nprivate _nextMonthInSameCol(date: D): D {\n    // Determine how many months to jump forward given that there are 2 empty slots at the beginning\n    // of each year.\n    let /** @type {?} */ increment = this._dateAdapter.getMonth(date) <= 4 ? 7 :\n        (this._dateAdapter.getMonth(date) >= 7 ? 5 : 12);\n    return this._dateAdapter.addCalendarMonths(date, increment);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-calendar, mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: MdDatepickerIntl, },\n{type: NgZone, },\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_DATE_FORMATS, ] }, ]},\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'startAt': [{ type: Input },],\n'startView': [{ type: Input },],\n'selected': [{ type: Input },],\n'minDate': [{ type: Input },],\n'maxDate': [{ type: Input },],\n'dateFilter': [{ type: Input },],\n'selectedChange': [{ type: Output },],\n'userSelection': [{ type: Output },],\n};\n}\n\nfunction MdCalendar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCalendar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCalendar.ctorParameters;\n/** @type {?} */\nMdCalendar.propDecorators;\n/** @type {?} */\nMdCalendar.prototype._intlChanges;\n/** @type {?} */\nMdCalendar.prototype._startAt;\n/**\n * Whether the calendar should be started in month or year view.\n * @type {?}\n */\nMdCalendar.prototype.startView;\n/** @type {?} */\nMdCalendar.prototype._selected;\n/** @type {?} */\nMdCalendar.prototype._minDate;\n/** @type {?} */\nMdCalendar.prototype._maxDate;\n/**\n * A function used to filter which dates are selectable.\n * @type {?}\n */\nMdCalendar.prototype.dateFilter;\n/**\n * Emits when the currently selected date changes.\n * @type {?}\n */\nMdCalendar.prototype.selectedChange;\n/**\n * Emits when any date is selected.\n * @type {?}\n */\nMdCalendar.prototype.userSelection;\n/**\n * Date filter for the month and year views.\n * @type {?}\n */\nMdCalendar.prototype._dateFilterForViews;\n/** @type {?} */\nMdCalendar.prototype._clampedActiveDate;\n/**\n * Whether the calendar is in month view.\n * @type {?}\n */\nMdCalendar.prototype._monthView;\n/** @type {?} */\nMdCalendar.prototype._elementRef;\n/** @type {?} */\nMdCalendar.prototype._intl;\n/** @type {?} */\nMdCalendar.prototype._ngZone;\n/** @type {?} */\nMdCalendar.prototype._dateAdapter;\n/** @type {?} */\nMdCalendar.prototype._dateFormats;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n/**\n * Datepicker data that requires internationalization.\n */\nexport class MdDatepickerIntl {\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\n * components if the labels have changed after initialization.\n */\nchanges: Subject<void> = new Subject<void>();\n/**\n * A label for the calendar popup (used by screen readers).\n */\ncalendarLabel = 'Calendar';\n/**\n * A label for the button used to open the calendar popup (used by screen readers).\n */\nopenCalendarLabel = 'Open calendar';\n/**\n * A label for the previous month button (used by screen readers).\n */\nprevMonthLabel = 'Previous month';\n/**\n * A label for the next month button (used by screen readers).\n */\nnextMonthLabel = 'Next month';\n/**\n * A label for the previous year button (used by screen readers).\n */\nprevYearLabel = 'Previous year';\n/**\n * A label for the next year button (used by screen readers).\n */\nnextYearLabel = 'Next year';\n/**\n * A label for the 'switch to month view' button (used by screen readers).\n */\nswitchToMonthViewLabel = 'Change to month view';\n/**\n * A label for the 'switch to year view' button (used by screen readers).\n */\nswitchToYearViewLabel = 'Change to year view';\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDatepickerIntl_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDatepickerIntl.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDatepickerIntl.ctorParameters;\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\n * components if the labels have changed after initialization.\n * @type {?}\n */\nMdDatepickerIntl.prototype.changes;\n/**\n * A label for the calendar popup (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.calendarLabel;\n/**\n * A label for the button used to open the calendar popup (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.openCalendarLabel;\n/**\n * A label for the previous month button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.prevMonthLabel;\n/**\n * A label for the next month button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.nextMonthLabel;\n/**\n * A label for the previous year button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.prevYearLabel;\n/**\n * A label for the next year button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.nextYearLabel;\n/**\n * A label for the 'switch to month view' button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.switchToMonthViewLabel;\n/**\n * A label for the 'switch to year view' button (used by screen readers).\n * @type {?}\n */\nMdDatepickerIntl.prototype.switchToYearViewLabel;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * \\@docs-private\n * @param {?} provider\n * @return {?}\n */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MdDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MdNativeDateModule, or provide a custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {DateAdapter} from '@angular/material/core';\n/**\n * Function that attempts to coerce a value to a date using a DateAdapter. Date instances, null,\n * and undefined will be passed through. Empty strings will be coerced to null. Valid ISO 8601\n * strings (https://www.ietf.org/rfc/rfc3339.txt) will be coerced to dates. All other values will\n * result in an error being thrown.\n * @throws Throws when the value cannot be coerced.\n * @template D\n * @param {?} adapter The date adapter to use for coercion\n * @param {?} value The value to coerce.\n * @return {?} A date object coerced from the value.\n */\nexport function coerceDateProperty<D>(adapter: DateAdapter<D>, value: any): D | null {\n  if (typeof value === 'string') {\n    if (value == '') {\n      value = null;\n    } else {\n      value = adapter.fromIso8601(value) || value;\n    }\n  }\n  if (value == null || adapter.isDateInstance(value)) {\n    return value;\n  }\n  throw Error(`Datepicker: Value must be either a date object recognized by the DateAdapter or ` +\n              `an ISO 8601 string. Instead got: ${value}`);\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdIconModule,MdIconBase,_MdIconMixinBase,MdIcon,getMdIconNameNotFoundError,getMdIconNoHttpProviderError,getMdIconFailedToSanitizeError,MdIconRegistry,ICON_REGISTRY_PROVIDER_FACTORY,ICON_REGISTRY_PROVIDER,MatIcon,MatIconBase,MatIconModule,MatIconRegistry} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdCommonModule} from '@angular/material/core';\nimport {MdIcon} from './icon';\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\nexport class MdIconModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule],\n  exports: [MdIcon, MdCommonModule],\n  declarations: [MdIcon],\n  providers: [ICON_REGISTRY_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdIconModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIconModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIconModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  Renderer2,\n  SimpleChanges,\n  ViewEncapsulation,\n  Attribute,\n} from '@angular/core';\nimport {MdIconRegistry} from './icon-registry';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {first} from '@angular/material/core';\n/**\n * \\@docs-private\n */\nexport class MdIconBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdIconBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIconBase.prototype._renderer;\n/** @type {?} */\nMdIconBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdIconMixinBase = mixinColor(MdIconBase);\n/**\n * Component to display an icon. It can be used in the following ways:\n * \n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MdIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     <md-icon svgIcon=\"left-arrow\"></md-icon>\n *     <md-icon svgIcon=\"animals:cat\"></md-icon>\n * \n * - Use a font ligature as an icon by putting the ligature text in the content of the <md-icon>\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MdIconRegistry.registerFontClassAlias.\n *   Examples:\n *     <md-icon>home</md-icon>\n *     <md-icon fontSet=\"myfont\">sun</md-icon>\n * \n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     <md-icon fontSet=\"fa\" fontIcon=\"alarm\"></md-icon>\n */\nexport class MdIcon extends _MdIconMixinBase implements OnChanges, OnInit, CanColor {\n/**\n * Name of the icon in the SVG icon set.\n */\nsvgIcon: string;\n/**\n * Font set that the icon is a part of.\n */\nfontSet: string;\n/**\n * Name of an icon within a font set.\n */\nfontIcon: string;\nprivate _previousFontSetClass: string;\nprivate _previousFontIconClass: string;\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _mdIconRegistry\n * @param {?} ariaHidden\n */\nconstructor(\n      renderer: Renderer2,\n      elementRef: ElementRef,\nprivate _mdIconRegistry: MdIconRegistry,\n       ariaHidden: string) {\n    super(renderer, elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      renderer.setAttribute(elementRef.nativeElement, 'aria-hidden', 'true');\n    }\n  }\n/**\n * Splits an svgIcon binding value into its icon set and icon name components.\n * Returns a 2-element array of [(icon set), (icon name)].\n * The separator for the two fields is ':'. If there is no separator, an empty\n * string is returned for the icon set and the entire value is returned for\n * the icon name. If the argument is falsy, returns an array of two empty strings.\n * Throws an error if the name contains two or more ':' separators.\n * Examples:\n *   'social:cake' -> ['social', 'cake']\n *   'penguin' -> ['', 'penguin']\n *   null -> ['', '']\n *   'a:b:c' -> (throws Error)\n * @param {?} iconName\n * @return {?}\n */\nprivate _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const /** @type {?} */ parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return /** @type {?} */(( <[string, string]>parts));\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        first.call(this._mdIconRegistry.getNamedSvgIcon(iconName, namespace)).subscribe(\n            svg => this._setSvgElement(svg),\n            (err: Error) => console.log(`Error retrieving icon: ${err.message}`));\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <md-icon>arrow</md-icon>. In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n/**\n * @return {?}\n */\nprivate _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n/**\n * @param {?} svg\n * @return {?}\n */\nprivate _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n    this._renderer.appendChild(this._elementRef.nativeElement, svg);\n  }\n/**\n * @return {?}\n */\nprivate _clearSvgElement() {\n    const /** @type {?} */ layoutElement = this._elementRef.nativeElement;\n    const /** @type {?} */ childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let /** @type {?} */ i = 0; i < childCount; i++) {\n      this._renderer.removeChild(layoutElement, layoutElement.childNodes[i]);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const /** @type {?} */ elem = this._elementRef.nativeElement;\n    const /** @type {?} */ fontSetClass = this.fontSet ?\n        this._mdIconRegistry.classNameForFontAlias(this.fontSet) :\n        this._mdIconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        this._renderer.removeClass(elem, this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        this._renderer.addClass(elem, fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        this._renderer.removeClass(elem, this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        this._renderer.addClass(elem, this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'md-icon, mat-icon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: MdIconRegistry, },\n{type: undefined, decorators: [{ type: Attribute, args: ['aria-hidden', ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'svgIcon': [{ type: Input },],\n'fontSet': [{ type: Input },],\n'fontIcon': [{ type: Input },],\n};\n}\n\nfunction MdIcon_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIcon.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIcon.ctorParameters;\n/** @type {?} */\nMdIcon.propDecorators;\n/**\n * Name of the icon in the SVG icon set.\n * @type {?}\n */\nMdIcon.prototype.svgIcon;\n/**\n * Font set that the icon is a part of.\n * @type {?}\n */\nMdIcon.prototype.fontSet;\n/**\n * Name of an icon within a font set.\n * @type {?}\n */\nMdIcon.prototype.fontIcon;\n/** @type {?} */\nMdIcon.prototype._previousFontSetClass;\n/** @type {?} */\nMdIcon.prototype._previousFontIconClass;\n/** @type {?} */\nMdIcon.prototype._mdIconRegistry;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, Optional, SecurityContext, SkipSelf} from '@angular/core';\nimport {Http} from '@angular/http';\nimport {\n  catchOperator,\n  doOperator,\n  finallyOperator,\n  map,\n  RxChain,\n  share,\n} from '@angular/material/core';\nimport {DomSanitizer, SafeResourceUrl} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {forkJoin} from 'rxjs/observable/forkJoin';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {_throw as observableThrow} from 'rxjs/observable/throw';\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * \\@docs-private\n * @param {?} iconName\n * @return {?}\n */\nexport function getMdIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<md-icon>` without including \\@angular/http.\n * \\@docs-private\n * @return {?}\n */\nexport function getMdIconNoHttpProviderError(): Error {\n  return Error('Could not find Http provider for use with Angular Material icons. ' +\n               'Please include the HttpModule from @angular/http in your app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * \\@docs-private\n * @param {?} url URL that was attempted to be sanitized.\n * @return {?}\n */\nexport function getMdIconFailedToSanitizeError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MdIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * \\@docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement | null = null;\n/**\n * @param {?} url\n */\nconstructor(public url: SafeResourceUrl) { }\n}\n\nfunction SvgIconConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nSvgIconConfig.prototype.svgElement;\n/** @type {?} */\nSvgIconConfig.prototype.url;\n}\n\n/**\n * Service to register and display icons used by the <md-icon> component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nexport class MdIconRegistry {\n/**\n * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n */\nprivate _svgIconConfigs = new Map<string, SvgIconConfig>();\n/**\n * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n * Multiple icon sets can be registered under the same namespace.\n */\nprivate _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n/**\n * Cache for icons loaded by direct URLs.\n */\nprivate _cachedIconsByUrl = new Map<string, SVGElement>();\n/**\n * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n */\nprivate _inProgressUrlFetches = new Map<string, Observable<string>>();\n/**\n * Map from font identifiers to their CSS class names. Used for icon fonts.\n */\nprivate _fontCssClassesByAlias = new Map<string, string>();\n/**\n * The CSS class to apply when an <md-icon> component has no icon name, url, or font specified.\n * The default 'material-icons' value assumes that the material icon font has been loaded as\n * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n */\nprivate _defaultFontSetClass = 'material-icons';\n/**\n * @param {?} _http\n * @param {?} _sanitizer\n */\nconstructor(\nprivate _http: Http,\nprivate _sanitizer: DomSanitizer) {}\n/**\n * Registers an icon by URL in the default namespace.\n * @param {?} iconName Name under which the icon should be registered.\n * @param {?} url\n * @return {?}\n */\naddSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n/**\n * Registers an icon by URL in the specified namespace.\n * @param {?} namespace Namespace in which the icon should be registered.\n * @param {?} iconName Name under which the icon should be registered.\n * @param {?} url\n * @return {?}\n */\naddSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    const /** @type {?} */ key = iconKey(namespace, iconName);\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\n    return this;\n  }\n/**\n * Registers an icon set by URL in the default namespace.\n * @param {?} url\n * @return {?}\n */\naddSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n/**\n * Registers an icon set by URL in the specified namespace.\n * @param {?} namespace Namespace in which to register the icon set.\n * @param {?} url\n * @return {?}\n */\naddSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    const /** @type {?} */ config = new SvgIconConfig(url);\n    const /** @type {?} */ configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n    return this;\n  }\n/**\n * Defines an alias for a CSS class name to be used for icon fonts. Creating an mdIcon\n * component with the alias as the fontSet input will cause the class name to be applied\n * to the <md-icon> element.\n * \n * @param {?} alias Alias for the font.\n * @param {?=} className Class name override to be used instead of the alias.\n * @return {?}\n */\nregisterFontClassAlias(alias: string, className = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n/**\n * Returns the CSS class name associated with the alias by a previous call to\n * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n * @param {?} alias\n * @return {?}\n */\nclassNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n/**\n * Sets the CSS class name to be used for icon fonts when an <md-icon> component does not\n * have a fontSet input value, and is not loading an icon by name or URL.\n * \n * @param {?} className\n * @return {?}\n */\nsetDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n/**\n * Returns the CSS class name to be used for icon fonts when an <md-icon> component does not\n * have a fontSet input value, and is not loading an icon by name or URL.\n * @return {?}\n */\ngetDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n/**\n * Returns an Observable that produces the icon (as an <svg> DOM element) from the given URL.\n * The response from the URL may be cached so this will not always cause an HTTP request, but\n * the produced element will always be a new copy of the originally fetched icon. (That is,\n * it will not contain any modifications made to elements previously returned).\n * \n * @param {?} safeUrl URL from which to fetch the SVG icon.\n * @return {?}\n */\ngetSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    let /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMdIconFailedToSanitizeError(safeUrl);\n    }\n\n    let /** @type {?} */ cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return RxChain.from(this._loadSvgIconFromConfig(new SvgIconConfig(url)))\n      .call(doOperator, svg => this._cachedIconsByUrl.set( /** @type {?} */((url)), svg))\n      .call(map, svg => cloneSvg(svg))\n      .result();\n  }\n/**\n * Returns an Observable that produces the icon (as an <svg> DOM element) with the given name\n * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n * if not, the Observable will throw an error.\n * \n * @param {?} name Name of the icon to be retrieved.\n * @param {?=} namespace Namespace in which to look for the icon.\n * @return {?}\n */\ngetNamedSvgIcon(name: string, namespace = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const /** @type {?} */ key = iconKey(namespace, name);\n    const /** @type {?} */ config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const /** @type {?} */ iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMdIconNameNotFoundError(key));\n  }\n/**\n * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n * @param {?} config\n * @return {?}\n */\nprivate _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return RxChain.from(this._loadSvgIconFromConfig(config))\n          .call(doOperator, svg => config.svgElement = svg)\n          .call(map, svg => cloneSvg(svg))\n          .result();\n    }\n  }\n/**\n * Attempts to find an icon with the specified name in any of the SVG icon sets.\n * First searches the available cached icons for a nested element with a matching name, and\n * if found copies the element to a new <svg> element. If not found, fetches all icon sets\n * that have not been cached, and searches again after all fetches are completed.\n * The returned Observable produces the SVG element if possible, and throws\n * an error if no icon with the specified name can be found.\n * @param {?} name\n * @param {?} iconSetConfigs\n * @return {?}\n */\nprivate _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const /** @type {?} */ namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const /** @type {?} */ iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return RxChain.from(this._loadSvgIconSetFromConfig(iconSetConfig))\n          .call(catchOperator, (err: any): Observable<SVGElement | null> => {\n            let /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the combined Observable won't\n            // necessarily fail.\n            console.log(`Loading icon set URL: ${url} failed: ${err}`);\n            return observableOf(null);\n          })\n          .call(doOperator, svg => {\n            // Cache the SVG element.\n            if (svg) {\n              iconSetConfig.svgElement = svg;\n            }\n          })\n          .result();\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return map.call(forkJoin.call(Observable, iconSetFetchRequests), () => {\n      const /** @type {?} */ foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMdIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    });\n  }\n/**\n * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n * tag matches the specified name. If found, copies the nested element to a new SVG element and\n * returns it. Returns null if no matching element is found.\n * @param {?} iconName\n * @param {?} iconSetConfigs\n * @return {?}\n */\nprivate _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let /** @type {?} */ i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const /** @type {?} */ config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const /** @type {?} */ foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n/**\n * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n * from it.\n * @param {?} config\n * @return {?}\n */\nprivate _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return map.call(this._fetchUrl(config.url),\n        svgText => this._createSvgElementForSingleIcon(svgText));\n  }\n/**\n * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n * from it.\n * @param {?} config\n * @return {?}\n */\nprivate _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n      // TODO: Document that icons should only be loaded from trusted sources.\n    return map.call(this._fetchUrl(config.url),\n        svgText => this._svgElementFromString(svgText));\n  }\n/**\n * Creates a DOM element from the given SVG string, and adds default attributes.\n * @param {?} responseText\n * @return {?}\n */\nprivate _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const /** @type {?} */ svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n/**\n * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n * tag matches the specified name. If found, copies the nested element to a new SVG element and\n * returns it. Returns null if no matching element is found.\n * @param {?} iconSet\n * @param {?} iconName\n * @return {?}\n */\nprivate _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const /** @type {?} */ iconNode = iconSet.querySelector('#' + iconName);\n\n    if (!iconNode) {\n      return null;\n    }\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconNode.tagName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes( /** @type {?} */((iconNode.cloneNode(true) as SVGElement)));\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconNode.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconNode));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const /** @type {?} */ svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconNode.cloneNode(true));\n\n    return this._setSvgAttributes(svg);\n  }\n/**\n * Creates a DOM element from the given SVG string.\n * @param {?} str\n * @return {?}\n */\nprivate _svgElementFromString(str: string): SVGElement {\n    // TODO: Is there a better way than innerHTML? Renderer doesn't appear to have a method for\n    // creating an element from an HTML string.\n    const /** @type {?} */ div = document.createElement('DIV');\n    div.innerHTML = str;\n    const /** @type {?} */ svg = /** @type {?} */(( div.querySelector('svg') as SVGElement));\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n    return svg;\n  }\n/**\n * Converts an element into an SVG node by cloning all of its children.\n * @param {?} element\n * @return {?}\n */\nprivate _toSvgElement(element: Element): SVGElement {\n    let /** @type {?} */ svg = this._svgElementFromString('<svg></svg>');\n\n    for (let /** @type {?} */ i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === Node.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n/**\n * Sets the default attributes for an SVG element to be used as an icon.\n * @param {?} svg\n * @return {?}\n */\nprivate _setSvgAttributes(svg: SVGElement): SVGElement {\n    if (!svg.getAttribute('xmlns')) {\n      svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    }\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n/**\n * Returns an Observable which produces the string contents of the given URL. Results may be\n * cached, so future calls with the same URL may not cause another HTTP request.\n * @param {?} safeUrl\n * @return {?}\n */\nprivate _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\n    if (!this._http) {\n      throw getMdIconNoHttpProviderError();\n    }\n\n    const /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMdIconFailedToSanitizeError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const /** @type {?} */ inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const /** @type {?} */ req = RxChain.from(this._http.get(url))\n      .call(map, response => response.text())\n      .call(finallyOperator, () => this._inProgressUrlFetches.delete(url))\n      .call(share)\n      .result();\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, decorators: [{ type: Optional }, ]},\n{type: DomSanitizer, },\n];\n}\n\nfunction MdIconRegistry_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIconRegistry.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIconRegistry.ctorParameters;\n/**\n * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n * @type {?}\n */\nMdIconRegistry.prototype._svgIconConfigs;\n/**\n * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n * Multiple icon sets can be registered under the same namespace.\n * @type {?}\n */\nMdIconRegistry.prototype._iconSetConfigs;\n/**\n * Cache for icons loaded by direct URLs.\n * @type {?}\n */\nMdIconRegistry.prototype._cachedIconsByUrl;\n/**\n * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n * @type {?}\n */\nMdIconRegistry.prototype._inProgressUrlFetches;\n/**\n * Map from font identifiers to their CSS class names. Used for icon fonts.\n * @type {?}\n */\nMdIconRegistry.prototype._fontCssClassesByAlias;\n/**\n * The CSS class to apply when an <md-icon> component has no icon name, url, or font specified.\n * The default 'material-icons' value assumes that the material icon font has been loaded as\n * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n * @type {?}\n */\nMdIconRegistry.prototype._defaultFontSetClass;\n/** @type {?} */\nMdIconRegistry.prototype._http;\n/** @type {?} */\nMdIconRegistry.prototype._sanitizer;\n}\n\n/**\n * \\@docs-private\n * @param {?} parentRegistry\n * @param {?} http\n * @param {?} sanitizer\n * @return {?}\n */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n    parentRegistry: MdIconRegistry, http: Http, sanitizer: DomSanitizer) {\n  return parentRegistry || new MdIconRegistry(http, sanitizer);\n}\n/**\n * \\@docs-private\n */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MdIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MdIconRegistry,\n  deps: [[new Optional(), new SkipSelf(), MdIconRegistry], [new Optional(), Http], DomSanitizer],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY\n};\n/**\n * Clones an SVGElement while preserving type information.\n * @param {?} svg\n * @return {?}\n */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return /** @type {?} */(( svg.cloneNode(true) as SVGElement));\n}\n/**\n * Returns the cache key to use for an icon namespace and name.\n * @param {?} namespace\n * @param {?} name\n * @return {?}\n */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdDialogModule,MD_DIALOG_DATA,MD_DIALOG_SCROLL_STRATEGY,MD_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,MD_DIALOG_SCROLL_STRATEGY_PROVIDER,MdDialog,throwMdDialogContentAlreadyAttachedError,MdDialogContainer,MdDialogClose,MdDialogTitle,MdDialogContent,MdDialogActions,DialogRole,DialogPosition,MdDialogConfig,MdDialogRef,MAT_DIALOG_DATA,MAT_DIALOG_SCROLL_STRATEGY,MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,MatDialog,MatDialogActions,MatDialogClose,MatDialogConfig,MatDialogContainer,MatDialogContent,MatDialogModule,MatDialogRef,MatDialogTitle} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MdCommonModule} from '@angular/material/core';\nimport {MdDialog, MD_DIALOG_SCROLL_STRATEGY_PROVIDER} from './dialog';\nimport {MdDialogContainer} from './dialog-container';\nimport {\n  MdDialogClose,\n  MdDialogContent,\n  MdDialogTitle,\n  MdDialogActions\n} from './dialog-content-directives';\nexport class MdDialogModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    A11yModule,\n    MdCommonModule,\n  ],\n  exports: [\n    MdDialogContainer,\n    MdDialogClose,\n    MdDialogTitle,\n    MdDialogContent,\n    MdDialogActions,\n    MdCommonModule,\n  ],\n  declarations: [\n    MdDialogContainer,\n    MdDialogClose,\n    MdDialogTitle,\n    MdDialogActions,\n    MdDialogContent,\n  ],\n  providers: [\n    MdDialog,\n    MD_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MdDialogContainer],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Input, OnChanges, OnInit, Optional, SimpleChanges} from '@angular/core';\nimport {MdDialogRef} from './dialog-ref';\nimport {MdDialogContainer} from './dialog-container';\n/**\n * Counter used to generate unique IDs for dialog elements.\n */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nexport class MdDialogClose implements OnChanges {\n/**\n * Screenreader label for the button.\n */\nariaLabel: string = 'Close dialog';\n/**\n * Dialog close input.\n */\ndialogResult: any;\n\n   _matDialogClose: any;\n   _mdDialogClose: any;\n   _matDialogCloseResult: any;\n/**\n * @param {?} dialogRef\n */\nconstructor(public dialogRef: MdDialogRef<any>) { }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    const /** @type {?} */ proxiedChange = changes._matDialogClose || changes._mdDialogClose ||\n        changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `button[md-dialog-close], button[mat-dialog-close],\n             button[mdDialogClose], button[matDialogClose]`,\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialogRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'dialogResult': [{ type: Input, args: ['md-dialog-close', ] },],\n'_matDialogClose': [{ type: Input, args: ['matDialogClose', ] },],\n'_mdDialogClose': [{ type: Input, args: ['mdDialogClose', ] },],\n'_matDialogCloseResult': [{ type: Input, args: ['mat-dialog-close', ] },],\n};\n}\n\nfunction MdDialogClose_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogClose.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogClose.ctorParameters;\n/** @type {?} */\nMdDialogClose.propDecorators;\n/**\n * Screenreader label for the button.\n * @type {?}\n */\nMdDialogClose.prototype.ariaLabel;\n/**\n * Dialog close input.\n * @type {?}\n */\nMdDialogClose.prototype.dialogResult;\n/** @type {?} */\nMdDialogClose.prototype._matDialogClose;\n/** @type {?} */\nMdDialogClose.prototype._mdDialogClose;\n/** @type {?} */\nMdDialogClose.prototype._matDialogCloseResult;\n/** @type {?} */\nMdDialogClose.prototype.dialogRef;\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nexport class MdDialogTitle implements OnInit {\n   id = `md-dialog-title-${dialogElementUid++}`;\n/**\n * @param {?} _container\n */\nconstructor(\nprivate _container: MdDialogContainer) { }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (this._container && !this._container._ariaLabelledBy) {\n      Promise.resolve().then(() => this._container._ariaLabelledBy = this.id);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-dialog-title], [mat-dialog-title], [mdDialogTitle], [matDialogTitle]',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdDialogContainer, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n};\n}\n\nfunction MdDialogTitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogTitle.ctorParameters;\n/** @type {?} */\nMdDialogTitle.propDecorators;\n/** @type {?} */\nMdDialogTitle.prototype.id;\n/** @type {?} */\nMdDialogTitle.prototype._container;\n}\n\n/**\n * Scrollable content container of a dialog.\n */\nexport class MdDialogContent { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `[md-dialog-content], md-dialog-content, [mat-dialog-content], mat-dialog-content,\n             [mdDialogContent], [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogContent.ctorParameters;\n}\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nexport class MdDialogActions { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `[md-dialog-actions], md-dialog-actions, [mat-dialog-actions], mat-dialog-actions,\n             [mdDialogActions], [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdDialogActions_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogActions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogActions.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  BlockScrollStrategy,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, TemplatePortal} from '@angular/cdk/portal';\nimport {startWith} from '@angular/cdk/rxjs';\nimport {Location} from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {extendObject, PortalInjector} from '@angular/material/core';\nimport {Observable} from 'rxjs/Observable';\nimport {defer} from 'rxjs/observable/defer';\nimport {Subject} from 'rxjs/Subject';\nimport {MdDialogConfig} from './dialog-config';\nimport {MdDialogContainer} from './dialog-container';\nimport {MdDialogRef} from './dialog-ref';\n\nexport const /** @type {?} */ MD_DIALOG_DATA = new InjectionToken<any>('MdDialogData');\n/**\n * Injection token that determines the scroll handling while the dialog is open.\n */\nexport const MD_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('md-dialog-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MD_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => BlockScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n/**\n * \\@docs-private\n */\nexport const MD_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MD_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MD_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Service to open Material Design modal dialogs.\n */\nexport class MdDialog {\nprivate _openDialogsAtThisLevel: MdDialogRef<any>[] = [];\nprivate _afterAllClosedAtThisLevel = new Subject<void>();\nprivate _afterOpenAtThisLevel = new Subject<MdDialogRef<any>>();\nprivate _boundKeydown = this._handleKeydown.bind(this);\n/**\n * Keeps track of the currently-open dialogs.\n * @return {?}\n */\nget openDialogs(): MdDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n/**\n * Stream that emits when a dialog has been opened.\n * @return {?}\n */\nget afterOpen(): Subject<MdDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n/**\n * @return {?}\n */\nget _afterAllClosed() {\n    const /** @type {?} */ parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n/**\n * Stream that emits when all open dialog have finished closing.\n * Will emit on subscribe if there are no open dialogs to begin with.\n */\nafterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      startWith.call(this._afterAllClosed, undefined));\n/**\n * @param {?} _overlay\n * @param {?} _injector\n * @param {?} location\n * @param {?} _scrollStrategy\n * @param {?} _parentDialog\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _injector: Injector,\n       location: Location,\nprivate _scrollStrategy,\nprivate _parentDialog: MdDialog) {\n\n    // Close all of the dialogs when the user goes forwards/backwards in history or when the\n    // location hash changes. Note that this usually doesn't include clicking on links (unless\n    // the user is using the `HashLocationStrategy`).\n    if (!_parentDialog && location) {\n      location.subscribe(() => this.closeAll());\n    }\n  }\n/**\n * Opens a modal dialog containing the given component.\n * @template T\n * @param {?} componentOrTemplateRef Type of the component to load into the dialog,\n *     or a TemplateRef to instantiate as the dialog content.\n * @param {?=} config Extra configuration options.\n * @return {?} Reference to the newly-opened dialog.\n */\nopen<T>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MdDialogConfig): MdDialogRef<T> {\n\n    const /** @type {?} */ inProgressDialog = this.openDialogs.find(dialog => dialog._isAnimating());\n\n    // If there's a dialog that is in the process of being opened, return it instead.\n    if (inProgressDialog) {\n      return inProgressDialog;\n    }\n\n    config = _applyConfigDefaults(config);\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const /** @type {?} */ overlayRef = this._createOverlay(config);\n    const /** @type {?} */ dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const /** @type {?} */ dialogRef =\n        this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    if (!this.openDialogs.length) {\n      document.addEventListener('keydown', this._boundKeydown);\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n/**\n * Closes all of the currently-open dialogs.\n * @return {?}\n */\ncloseAll(): void {\n    let /** @type {?} */ i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n/**\n * Finds an open dialog by its id.\n * @param {?} id ID to use when looking up the dialog.\n * @return {?}\n */\ngetDialogById(id: string): MdDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n/**\n * Creates the overlay into which the dialog will be loaded.\n * @param {?} config The dialog configuration.\n * @return {?} A promise resolving to the OverlayRef for the created overlay.\n */\nprivate _createOverlay(config: MdDialogConfig): OverlayRef {\n    const /** @type {?} */ overlayState = this._getOverlayState(config);\n    return this._overlay.create(overlayState);\n  }\n/**\n * Creates an overlay state from a dialog config.\n * @param {?} dialogConfig The dialog configuration.\n * @return {?} The overlay configuration.\n */\nprivate _getOverlayState(dialogConfig: MdDialogConfig): OverlayConfig {\n    const /** @type {?} */ state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n/**\n * Attaches an MdDialogContainer to a dialog's already-created overlay.\n * @param {?} overlay Reference to the dialog's underlying overlay.\n * @param {?} config The dialog configuration.\n * @return {?} A promise resolving to a ComponentRef for the attached container.\n */\nprivate _attachDialogContainer(overlay: OverlayRef, config: MdDialogConfig): MdDialogContainer {\n    let /** @type {?} */ containerPortal = new ComponentPortal(MdDialogContainer, config.viewContainerRef);\n    let /** @type {?} */ containerRef: ComponentRef<MdDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n/**\n * Attaches the user-provided component to the already-created MdDialogContainer.\n * @template T\n * @param {?} componentOrTemplateRef The type of component being loaded into the dialog,\n *     or a TemplateRef to instantiate as the content.\n * @param {?} dialogContainer Reference to the wrapping MdDialogContainer.\n * @param {?} overlayRef Reference to the overlay in which the dialog resides.\n * @param {?} config The dialog configuration.\n * @return {?} A promise resolving to the MdDialogRef that should be returned to the user.\n */\nprivate _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MdDialogContainer,\n      overlayRef: OverlayRef,\n      config: MdDialogConfig): MdDialogRef<T> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const /** @type {?} */ dialogRef = new MdDialogRef<T>(overlayRef, dialogContainer, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, /** @type {?} */(( null)), /** @type {?} */((\n          <any>{ $implicit: config.data, dialogRef }))));\n    } else {\n      const /** @type {?} */ injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const /** @type {?} */ contentRef = dialogContainer.attachComponentPortal(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n/**\n * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n * of a dialog to close itself and, optionally, to return a value.\n * @template T\n * @param {?} config Config object that is used to construct the dialog.\n * @param {?} dialogRef Reference to the dialog.\n * @param {?} dialogContainer\n * @return {?} The custom injector that can be used inside the dialog.\n */\nprivate _createInjector<T>(\n      config: MdDialogConfig,\n      dialogRef: MdDialogRef<T>,\n      dialogContainer: MdDialogContainer): PortalInjector {\n\n    const /** @type {?} */ userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const /** @type {?} */ injectionTokens = new WeakMap();\n\n    injectionTokens.set(MdDialogRef, dialogRef);\n    injectionTokens.set(MdDialogContainer, dialogContainer);\n    injectionTokens.set(MD_DIALOG_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n/**\n * Removes a dialog from the array of open dialogs.\n * @param {?} dialogRef Dialog to be removed.\n * @return {?}\n */\nprivate _removeOpenDialog(dialogRef: MdDialogRef<any>) {\n    const /** @type {?} */ index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // no open dialogs are left, call next on afterAllClosed Subject\n      if (!this.openDialogs.length) {\n        this._afterAllClosed.next();\n        document.removeEventListener('keydown', this._boundKeydown);\n      }\n    }\n  }\n/**\n * Handles global key presses while there are open dialogs. Closes the\n * top dialog when the user presses escape.\n * @param {?} event\n * @return {?}\n */\nprivate _handleKeydown(event: KeyboardEvent): void {\n    const /** @type {?} */ topDialog = this.openDialogs[this.openDialogs.length - 1];\n    const /** @type {?} */ canClose = topDialog ? !topDialog.disableClose : false;\n\n    if (event.keyCode === ESCAPE && canClose) {\n      topDialog.close();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: Injector, },\n{type: Location, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Inject, args: [MD_DIALOG_SCROLL_STRATEGY, ] }, ]},\n{type: MdDialog, decorators: [{ type: Optional }, { type: SkipSelf }, ]},\n];\n}\n\nfunction MdDialog_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialog.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialog.ctorParameters;\n/** @type {?} */\nMdDialog.prototype._openDialogsAtThisLevel;\n/** @type {?} */\nMdDialog.prototype._afterAllClosedAtThisLevel;\n/** @type {?} */\nMdDialog.prototype._afterOpenAtThisLevel;\n/** @type {?} */\nMdDialog.prototype._boundKeydown;\n/**\n * Stream that emits when all open dialog have finished closing.\n * Will emit on subscribe if there are no open dialogs to begin with.\n * @type {?}\n */\nMdDialog.prototype.afterAllClosed;\n/** @type {?} */\nMdDialog.prototype._overlay;\n/** @type {?} */\nMdDialog.prototype._injector;\n/** @type {?} */\nMdDialog.prototype._scrollStrategy;\n/** @type {?} */\nMdDialog.prototype._parentDialog;\n}\n\n/**\n * Applies default options to the dialog config.\n * @param {?=} config Config to be modified.\n * @return {?} The new configuration object.\n */\nfunction _applyConfigDefaults(config?: MdDialogConfig): MdDialogConfig {\n  return extendObject(new MdDialogConfig(), config);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {OverlayRef, GlobalPositionStrategy} from '@angular/cdk/overlay';\nimport {filter, first, RxChain} from '@angular/cdk/rxjs';\nimport {DialogPosition} from './dialog-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MdDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet /** @type {?} */ uniqueId = 0;\n/**\n * Reference to a dialog opened via the MdDialog service.\n */\nexport class MdDialogRef<T> {\n/**\n * The instance of component opened into the dialog.\n */\ncomponentInstance: T;\n/**\n * Whether the user is allowed to close the dialog.\n */\ndisableClose = this._containerInstance._config.disableClose;\n/**\n * Subject for notifying the user that the dialog has finished opening.\n */\nprivate _afterOpen = new Subject<void>();\n/**\n * Subject for notifying the user that the dialog has finished closing.\n */\nprivate _afterClosed = new Subject<any>();\n/**\n * Subject for notifying the user that the dialog has started closing.\n */\nprivate _beforeClose = new Subject<any>();\n/**\n * Result to be passed to afterClosed.\n */\nprivate _result: any;\n/**\n * @param {?} _overlayRef\n * @param {?} _containerInstance\n * @param {?=} id\n */\nconstructor(\nprivate _overlayRef: OverlayRef,\nprivate _containerInstance: MdDialogContainer,\npublic readonly id: string = `md-dialog-${uniqueId++}`) {\n\n    // Emit when opening animation completes\n    RxChain.from(_containerInstance._animationStateChanged)\n      .call(filter, event => event.phaseName === 'done' && event.toState === 'enter')\n      .call(first)\n      .subscribe(() => {\n        this._afterOpen.next();\n        this._afterOpen.complete();\n      });\n\n    // Dispose overlay when closing animation is complete\n    RxChain.from(_containerInstance._animationStateChanged)\n      .call(filter, event => event.phaseName === 'done' && event.toState === 'exit')\n      .call(first)\n      .subscribe(() => {\n        this._overlayRef.dispose();\n        this._afterClosed.next(this._result);\n        this._afterClosed.complete();\n        this.componentInstance = null!;\n      });\n  }\n/**\n * Close the dialog.\n * @param {?=} dialogResult Optional result to return to the dialog opener.\n * @return {?}\n */\nclose(dialogResult?: any): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    RxChain.from(this._containerInstance._animationStateChanged)\n      .call(filter, event => event.phaseName === 'start')\n      .call(first)\n      .subscribe(() => {\n        this._beforeClose.next(dialogResult);\n        this._beforeClose.complete();\n        this._overlayRef.detachBackdrop();\n      });\n\n    this._containerInstance._startExitAnimation();\n  }\n/**\n * Gets an observable that is notified when the dialog is finished opening.\n * @return {?}\n */\nafterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n/**\n * Gets an observable that is notified when the dialog is finished closing.\n * @return {?}\n */\nafterClosed(): Observable<any> {\n    return this._afterClosed.asObservable();\n  }\n/**\n * Gets an observable that is notified when the dialog has started closing.\n * @return {?}\n */\nbeforeClose(): Observable<any> {\n    return this._beforeClose.asObservable();\n  }\n/**\n * Gets an observable that emits when the overlay's backdrop has been clicked.\n * @return {?}\n */\nbackdropClick(): Observable<void> {\n    return this._overlayRef.backdropClick();\n  }\n/**\n * Updates the dialog's position.\n * @param {?=} position New dialog position.\n * @return {?}\n */\nupdatePosition(position?: DialogPosition): this {\n    let /** @type {?} */ strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n/**\n * Updates the dialog's width and height.\n * @param {?=} width New width of the dialog.\n * @param {?=} height New height of the dialog.\n * @return {?}\n */\nupdateSize(width = 'auto', height = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n/**\n * Returns whether the dialog is animating.\n * @return {?}\n */\n_isAnimating(): boolean {\n    return this._containerInstance._isAnimating;\n  }\n/**\n * Fetches the position strategy object from the overlay ref.\n * @return {?}\n */\nprivate _getPositionStrategy(): GlobalPositionStrategy {\n    return /** @type {?} */(( this._overlayRef.getState().positionStrategy as GlobalPositionStrategy));\n  }\n}\n\nfunction MdDialogRef_tsickle_Closure_declarations() {\n/**\n * The instance of component opened into the dialog.\n * @type {?}\n */\nMdDialogRef.prototype.componentInstance;\n/**\n * Whether the user is allowed to close the dialog.\n * @type {?}\n */\nMdDialogRef.prototype.disableClose;\n/**\n * Subject for notifying the user that the dialog has finished opening.\n * @type {?}\n */\nMdDialogRef.prototype._afterOpen;\n/**\n * Subject for notifying the user that the dialog has finished closing.\n * @type {?}\n */\nMdDialogRef.prototype._afterClosed;\n/**\n * Subject for notifying the user that the dialog has started closing.\n * @type {?}\n */\nMdDialogRef.prototype._beforeClose;\n/**\n * Result to be passed to afterClosed.\n * @type {?}\n */\nMdDialogRef.prototype._result;\n/** @type {?} */\nMdDialogRef.prototype._overlayRef;\n/** @type {?} */\nMdDialogRef.prototype._containerInstance;\n/** @type {?} */\nMdDialogRef.prototype.id;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {animate, AnimationEvent, state, style, transition, trigger} from '@angular/animations';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {\n  BasePortalHost,\n  ComponentPortal,\n  PortalHostDirective,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MdDialogConfig} from './dialog-config';\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalHost without an origin.\n * \\@docs-private\n * @return {?}\n */\nexport function throwMdDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * \\@docs-private\n */\nexport class MdDialogContainer extends BasePortalHost {\n/**\n * The portal host inside of this container into which the dialog content will be loaded.\n */\n_portalHost: PortalHostDirective;\n/**\n * The class that traps and manages focus within the dialog.\n */\nprivate _focusTrap: FocusTrap;\n/**\n * Element that was focused before the dialog was opened. Save this to restore upon close.\n */\nprivate _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n/**\n * The dialog configuration.\n */\n_config: MdDialogConfig;\n/**\n * State of the dialog animation.\n */\n_state: 'void' | 'enter' | 'exit' = 'enter';\n/**\n * Emits when an animation state changes.\n */\n_animationStateChanged = new EventEmitter<AnimationEvent>();\n/**\n * ID of the element that should be considered as the dialog's label.\n */\n_ariaLabelledBy: string | null = null;\n/**\n * Whether the container is currently mid-animation.\n */\n_isAnimating = false;\n/**\n * @param {?} _elementRef\n * @param {?} _focusTrapFactory\n * @param {?} _changeDetectorRef\n * @param {?} _document\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _focusTrapFactory: FocusTrapFactory,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _document: any) {\n\n    super();\n  }\n/**\n * Attach a ComponentPortal as content to this dialog container.\n * @template T\n * @param {?} portal Portal to be attached as the dialog content.\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalHost.hasAttached()) {\n      throwMdDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalHost.attachComponentPortal(portal);\n  }\n/**\n * Attach a TemplatePortal as content to this dialog container.\n * @template C\n * @param {?} portal Portal to be attached as the dialog content.\n * @return {?}\n */\nattachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalHost.hasAttached()) {\n      throwMdDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalHost.attachTemplatePortal(portal);\n  }\n/**\n * Moves the focus inside the focus trap.\n * @return {?}\n */\nprivate _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If we didn't find any focusable elements inside the dialog, focus the\n      // container so the user can't tab into other elements behind it.\n      if (!hasMovedFocus) {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n/**\n * Restores focus to the element that was focused before the dialog opened.\n * @return {?}\n */\nprivate _restoreFocus() {\n    const /** @type {?} */ toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n/**\n * Saves a reference to the element that was focused before the dialog was opened.\n * @return {?}\n */\nprivate _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = /** @type {?} */(( this._document.activeElement as HTMLElement));\n    }\n  }\n/**\n * Callback, invoked whenever an animation on the host completes.\n * @param {?} event\n * @return {?}\n */\n_onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n    this._isAnimating = false;\n  }\n/**\n * Callback, invoked when an animation on the host starts.\n * @param {?} event\n * @return {?}\n */\n_onAnimationStart(event: AnimationEvent) {\n    this._isAnimating = true;\n    this._animationStateChanged.emit(event);\n  }\n/**\n * Starts the dialog exit animation.\n * @return {?}\n */\n_startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-dialog-container, mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [\n    trigger('slideDialog', [\n      // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n      // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n      // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n      // solves both issues.\n      state('enter', style({ transform: 'none', opacity: 1 })),\n      state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n      state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n      transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    ])\n  ],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    '[attr.role]': '_config?.role',\n    '[attr.aria-labelledby]': '_ariaLabelledBy',\n    '[attr.aria-describedby]': '_config?.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: FocusTrapFactory, },\n{type: ChangeDetectorRef, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalHost': [{ type: ViewChild, args: [PortalHostDirective, ] },],\n};\n}\n\nfunction MdDialogContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMdDialogContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdDialogContainer.ctorParameters;\n/** @type {?} */\nMdDialogContainer.propDecorators;\n/**\n * The portal host inside of this container into which the dialog content will be loaded.\n * @type {?}\n */\nMdDialogContainer.prototype._portalHost;\n/**\n * The class that traps and manages focus within the dialog.\n * @type {?}\n */\nMdDialogContainer.prototype._focusTrap;\n/**\n * Element that was focused before the dialog was opened. Save this to restore upon close.\n * @type {?}\n */\nMdDialogContainer.prototype._elementFocusedBeforeDialogWasOpened;\n/**\n * The dialog configuration.\n * @type {?}\n */\nMdDialogContainer.prototype._config;\n/**\n * State of the dialog animation.\n * @type {?}\n */\nMdDialogContainer.prototype._state;\n/**\n * Emits when an animation state changes.\n * @type {?}\n */\nMdDialogContainer.prototype._animationStateChanged;\n/**\n * ID of the element that should be considered as the dialog's label.\n * @type {?}\n */\nMdDialogContainer.prototype._ariaLabelledBy;\n/**\n * Whether the container is currently mid-animation.\n * @type {?}\n */\nMdDialogContainer.prototype._isAnimating;\n/** @type {?} */\nMdDialogContainer.prototype._elementRef;\n/** @type {?} */\nMdDialogContainer.prototype._focusTrapFactory;\n/** @type {?} */\nMdDialogContainer.prototype._changeDetectorRef;\n/** @type {?} */\nMdDialogContainer.prototype._document;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  top?: string;\n  bottom?: string;\n  left?: string;\n  right?: string;\n}\n/**\n * Configuration for opening a modal dialog with the MdDialog service.\n */\nexport class MdDialogConfig {\n/**\n * Where the attached component should live in Angular's *logical* component tree.\n * This affects what is available for injection and the change detection order for the\n * component instantiated inside of the dialog. This does not affect where the dialog\n * content will be rendered.\n */\nviewContainerRef?: ViewContainerRef;\n/**\n * ID for the dialog. If omitted, a unique one will be generated.\n */\nid?: string;\n/**\n * The ARIA role of the dialog element.\n */\nrole?: DialogRole = 'dialog';\n/**\n * Custom class for the overlay pane.\n */\npanelClass?: string | string[] = '';\n/**\n * Whether the dialog has a backdrop.\n */\nhasBackdrop?: boolean = true;\n/**\n * Custom class for the backdrop,\n */\nbackdropClass?: string = '';\n/**\n * Whether the user can use escape or clicking outside to close a modal.\n */\ndisableClose?: boolean = false;\n/**\n * Width of the dialog.\n */\nwidth?: string = '';\n/**\n * Height of the dialog.\n */\nheight?: string = '';\n/**\n * Position overrides.\n */\nposition?: DialogPosition;\n/**\n * Data being injected into the child component.\n */\ndata?: any = null;\n/**\n * Layout direction for the dialog's content.\n */\ndirection?: Direction = 'ltr';\n/**\n * ID of the element that describes the dialog.\n */\nariaDescribedBy?: string | null = null;\n\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n\nfunction MdDialogConfig_tsickle_Closure_declarations() {\n/**\n * Where the attached component should live in Angular's *logical* component tree.\n * This affects what is available for injection and the change detection order for the\n * component instantiated inside of the dialog. This does not affect where the dialog\n * content will be rendered.\n * @type {?}\n */\nMdDialogConfig.prototype.viewContainerRef;\n/**\n * ID for the dialog. If omitted, a unique one will be generated.\n * @type {?}\n */\nMdDialogConfig.prototype.id;\n/**\n * The ARIA role of the dialog element.\n * @type {?}\n */\nMdDialogConfig.prototype.role;\n/**\n * Custom class for the overlay pane.\n * @type {?}\n */\nMdDialogConfig.prototype.panelClass;\n/**\n * Whether the dialog has a backdrop.\n * @type {?}\n */\nMdDialogConfig.prototype.hasBackdrop;\n/**\n * Custom class for the backdrop,\n * @type {?}\n */\nMdDialogConfig.prototype.backdropClass;\n/**\n * Whether the user can use escape or clicking outside to close a modal.\n * @type {?}\n */\nMdDialogConfig.prototype.disableClose;\n/**\n * Width of the dialog.\n * @type {?}\n */\nMdDialogConfig.prototype.width;\n/**\n * Height of the dialog.\n * @type {?}\n */\nMdDialogConfig.prototype.height;\n/**\n * Position overrides.\n * @type {?}\n */\nMdDialogConfig.prototype.position;\n/**\n * Data being injected into the child component.\n * @type {?}\n */\nMdDialogConfig.prototype.data;\n/**\n * Layout direction for the dialog's content.\n * @type {?}\n */\nMdDialogConfig.prototype.direction;\n/**\n * ID of the element that describes the dialog.\n * @type {?}\n */\nMdDialogConfig.prototype.ariaDescribedBy;\n}\n\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdChipsModule,MdChipListChange,MdChipList,MdChipEvent,MdChipSelectionChange,MdChipBase,_MdChipMixinBase,MdBasicChip,MdChip,MdChipRemove,MdChipInputEvent,MdChipInput,MatBasicChip,MatChip,MatChipBase,MatChipEvent,MatChipInput,MatChipInputEvent,MatChipListChange,MatChipList,MatChipRemove,MatChipsModule} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdChipList} from './chip-list';\nimport {MdBasicChip, MdChip, MdChipRemove} from './chip';\nimport {MdChipInput} from './chip-input';\nexport class MdChipsModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [],\n  exports: [MdChipList, MdChip, MdChipInput, MdChipRemove, MdChipRemove, MdBasicChip],\n  declarations: [MdChipList, MdChip, MdChipInput, MdChipRemove,  MdChipRemove, MdBasicChip]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdChipsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipsModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ElementRef,\n  Output,\n  EventEmitter,\n  Input,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER} from '@angular/material/core';\nimport {MdChipList} from './chip-list';\n\nexport interface MdChipInputEvent {\n  input: HTMLInputElement;\n  value: string;\n}\n/**\n * Directive that adds chip-specific behaviors to an input element inside <md-form-field>.\n * May be placed inside or outside of an <md-chip-list>.\n */\nexport class MdChipInput {\n  focused: boolean = false;\n  _chipList: MdChipList;\n/**\n * Register input for chip list\n * @param {?} value\n * @return {?}\n */\nset chipList(value: MdChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n/**\n * Whether or not the chipEnd event will be emitted when the input is blurred.\n * @return {?}\n */\nget addOnBlur() { return this._addOnBlur; }\n/**\n * @param {?} value\n * @return {?}\n */\nset addOnBlur(value) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n   separatorKeyCodes: number[] = [ENTER];\n/**\n * Emitted when a chip is to be added.\n */\nchipEnd = new EventEmitter<MdChipInputEvent>();\n\n   _matChipInputTokenEnd = this.chipEnd;\n/**\n * @param {?} value\n * @return {?}\n */\nset matChipList(value: MdChipList) { this.chipList = value; }\n/**\n * @return {?}\n */\nget matAddOnBlur() { return this._addOnBlur; }\n/**\n * @param {?} value\n * @return {?}\n */\nset matAddOnBlur(value) { this.addOnBlur = value; }\n/**\n * @return {?}\n */\nget matSeparatorKeyCodes() { return this.separatorKeyCodes; }\n/**\n * @param {?} v\n * @return {?}\n */\nset matSeparatorKeyCodes(v: number[]) { this.separatorKeyCodes = v; }\n\n   placeholder: string = '';\n/**\n * @return {?}\n */\nget empty(): boolean {\n    let /** @type {?} */ value: string | null = this._inputElement.value;\n    return value == null || value === '';\n  }\n/**\n * The native input element to which this directive is attached.\n */\nprotected _inputElement: HTMLInputElement;\n/**\n * @param {?} _elementRef\n */\nconstructor(protected _elementRef: ElementRef) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n/**\n * Utility method to make host definition/tests more clear.\n * @param {?=} event\n * @return {?}\n */\n_keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n/**\n * Checks to see if the blur should emit the (chipEnd) event.\n * @return {?}\n */\n_blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n/**\n * @return {?}\n */\n_focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n/**\n * Checks to see if the (chipEnd) event needs to be emitted.\n * @param {?=} event\n * @return {?}\n */\n_emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n/**\n * @return {?}\n */\nfocus() { this._inputElement.focus(); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'input[mdChipInputFor], input[matChipInputFor]',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'chipList': [{ type: Input, args: ['mdChipInputFor', ] },],\n'addOnBlur': [{ type: Input, args: ['mdChipInputAddOnBlur', ] },],\n'separatorKeyCodes': [{ type: Input, args: ['mdChipInputSeparatorKeyCodes', ] },],\n'chipEnd': [{ type: Output, args: ['mdChipInputTokenEnd', ] },],\n'_matChipInputTokenEnd': [{ type: Output, args: ['matChipInputTokenEnd', ] },],\n'matChipList': [{ type: Input, args: ['matChipInputFor', ] },],\n'matAddOnBlur': [{ type: Input, args: ['matChipInputAddOnBlur', ] },],\n'matSeparatorKeyCodes': [{ type: Input, args: ['matChipInputSeparatorKeyCodes', ] },],\n'placeholder': [{ type: Input },],\n};\n}\n\nfunction MdChipInput_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipInput.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipInput.ctorParameters;\n/** @type {?} */\nMdChipInput.propDecorators;\n/** @type {?} */\nMdChipInput.prototype.focused;\n/** @type {?} */\nMdChipInput.prototype._chipList;\n/** @type {?} */\nMdChipInput.prototype._addOnBlur;\n/** @type {?} */\nMdChipInput.prototype.separatorKeyCodes;\n/**\n * Emitted when a chip is to be added.\n * @type {?}\n */\nMdChipInput.prototype.chipEnd;\n/** @type {?} */\nMdChipInput.prototype._matChipInputTokenEnd;\n/** @type {?} */\nMdChipInput.prototype.placeholder;\n/**\n * The native input element to which this directive is attached.\n * @type {?}\n */\nMdChipInput.prototype._inputElement;\n/** @type {?} */\nMdChipInput.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {startWith} from '@angular/cdk/rxjs';\nimport {\n  AfterContentInit,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Renderer2,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  BACKSPACE,\n  DELETE,\n  Directionality,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  UP_ARROW\n} from '@angular/material/core';\nimport {MdFormFieldControl} from '@angular/material/form-field';\n\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\n\nimport {MdChip, MdChipEvent, MdChipSelectionChange} from './chip';\nimport {MdChipInput} from './chip-input';\n\n// Increasing integer for generating unique ids for chip-list components.\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Change event object that is emitted when the chip list value has changed.\n */\nexport class MdChipListChange {\n/**\n * @param {?} source\n * @param {?} value\n */\nconstructor(public source: MdChipList,\npublic value: any) { }\n}\n\nfunction MdChipListChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipListChange.prototype.source;\n/** @type {?} */\nMdChipListChange.prototype.value;\n}\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\nexport class MdChipList implements MdFormFieldControl<any>, ControlValueAccessor,\n    AfterContentInit, OnInit, OnDestroy {\n/**\n * Stream that emits whenever the state of the input changes such that the wrapping `MdFormField`\n * needs to run change detection.\n */\nstateChanges = new Subject<void>();\n/**\n * When a chip is destroyed, we track the index so we can focus the appropriate next chip.\n */\nprotected _lastDestroyedIndex: number|null = null;\n/**\n * Track which chips we're listening to for focus/destruction.\n */\nprotected _chipSet: WeakMap<MdChip, boolean> = new WeakMap();\n/**\n * Subscription to tabbing out from the chip list.\n */\nprivate _tabOutSubscription = Subscription.EMPTY;\n/**\n * Subscription to changes in the chip list.\n */\nprivate _changeSubscription: Subscription;\n/**\n * Subscription to focus changes in the chips.\n */\nprivate _chipFocusSubscription: Subscription|null;\n/**\n * Subscription to blur changes in the chips.\n */\nprivate _chipBlurSubscription: Subscription|null;\n/**\n * Subscription to selection changes in chips.\n */\nprivate _chipSelectionSubscription: Subscription|null;\n/**\n * Subscription to remove changes in chips.\n */\nprivate _chipRemoveSubscription: Subscription|null;\n/**\n * Whether or not the chip is selectable.\n */\nprotected _selectable: boolean = true;\n/**\n * Whether the component is in multiple selection mode.\n */\nprivate _multiple: boolean = false;\n/**\n * The chip input to add more chips\n */\nprotected _chipInput: MdChipInput;\n/**\n * The aria-describedby attribute on the chip list for improved a11y.\n */\nprotected _ariaDescribedby: string;\n/**\n * Id of the chip list\n */\nprotected _id: string;\n/**\n * Uid of the chip list\n */\nprotected _uid: string = `md-chip-list-${nextUniqueId++}`;\n/**\n * Whether this is required\n */\nprotected _required: boolean = false;\n/**\n * Whether this is disabled\n */\nprotected _disabled: boolean = false;\n\n  protected _value: any;\n/**\n * Placeholder for the chip list. Alternatively, placeholder can be set on MdChipInput\n */\nprotected _placeholder: string;\n/**\n * Tab index for the chip list.\n */\n_tabIndex = 0;\n/**\n * User defined tab index.\n * When it is not null, use user defined tab index. Otherwise use _tabIndex\n */\n_userTabIndex: number | null = null;\n/**\n * The FocusKeyManager which handles focus.\n */\n_keyManager: FocusKeyManager<MdChip>;\n/**\n * Function when touched\n */\n_onTouched = () => {};\n/**\n * Function when changed\n */\n_onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MdChip>;\n/**\n * Comparison function to specify which option is displayed. Defaults to object equality.\n */\nprivate _compareWith = (o1: any, o2: any) => o1 === o2;\n/**\n * The array of selected chips inside chip list.\n * @return {?}\n */\nget selected(): MdChip[] | MdChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n/**\n * Whether the user should be allowed to select multiple chips.\n * @return {?}\n */\nget multiple(): boolean { return this._multiple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n/**\n * A function to compare the option values with the selected values. The first argument\n * is a value from an option. The second is a value from the selection. A boolean\n * should be returned.\n * @return {?}\n */\nget compareWith() { return this._compareWith; }\n/**\n * @param {?} fn\n * @return {?}\n */\nset compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n/**\n * Required for FormFieldControl\n * @return {?}\n */\nget value() { return this._value; }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\n    this.writeValue(newValue);\n    this._value = newValue;\n  }\n/**\n * Required for FormFieldControl. The ID of the chip list\n * @param {?} value\n * @return {?}\n */\nset id(value: string) {\n    this._id = value;\n    this.stateChanges.next();\n  }\n/**\n * @return {?}\n */\nget id() { return this._id || this._uid; }\n/**\n * Required for FormFieldControl. Whether the chip list is required.\n * @param {?} value\n * @return {?}\n */\nset required(value: any) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n/**\n * @return {?}\n */\nget required() {\n    return this._required;\n  }\n/**\n * For FormFieldControl. Use chip input's placholder if there's a chip input\n * @param {?} value\n * @return {?}\n */\nset placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n/**\n * @return {?}\n */\nget placeholder() {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n/**\n * Whether any chips or the mdChipInput inside of this chip-list has focus.\n * @return {?}\n */\nget focused() {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n/**\n * Whether this chip-list contains no chips and no mdChipInput.\n * @return {?}\n */\nget empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n/**\n * Whether this chip-list is disabled.\n * @return {?}\n */\nget disabled() { return this.ngControl ? this.ngControl.disabled : this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Whether the chip list is in an error state.\n * @return {?}\n */\nget errorState(): boolean {\n    const /** @type {?} */ isInvalid = this.ngControl && this.ngControl.invalid;\n    const /** @type {?} */ isTouched = this.ngControl && this.ngControl.touched;\n    const /** @type {?} */ isSubmitted = (this._parentFormGroup && this._parentFormGroup.submitted) ||\n      (this._parentForm && this._parentForm.submitted);\n    return !!(isInvalid && (isTouched || isSubmitted));\n  }\n/**\n * Orientation of the chip list.\n */\nariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n/**\n * Whether or not this chip is selectable. When a chip is not selectable,\n * its selected state is always ignored.\n * @return {?}\n */\nget selectable(): boolean { return this._selectable; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selectable(value: boolean) { this._selectable = coerceBooleanProperty(value); }\n/**\n * @param {?} value\n * @return {?}\n */\nset tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n/**\n * Combined stream of all of the child chips' selection change events.\n * @return {?}\n */\nget chipSelectionChanges(): Observable<MdChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n/**\n * Combined stream of all of the child chips' focus change events.\n * @return {?}\n */\nget chipFocusChanges(): Observable<MdChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n/**\n * Combined stream of all of the child chips' blur change events.\n * @return {?}\n */\nget chipBlurChanges(): Observable<MdChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n/**\n * Combined stream of all of the child chips' remove change events.\n * @return {?}\n */\nget chipRemoveChanges(): Observable<MdChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroy));\n  }\n/**\n * Event emitted when the selected chip list value has been changed by the user.\n */\nchange: EventEmitter<MdChipListChange> = new EventEmitter<MdChipListChange>();\n/**\n * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n * to facilitate the two-way binding for the `value` input.\n * \\@docs-private\n */\nvalueChange = new EventEmitter<any>();\n/**\n * The chip components contained within this chip list.\n */\nchips: QueryList<MdChip>;\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _changeDetectorRef\n * @param {?} _dir\n * @param {?} _parentForm\n * @param {?} _parentFormGroup\n * @param {?} ngControl\n */\nconstructor(protected _renderer: Renderer2,\n              protected _elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _dir: Directionality,\nprivate _parentForm: NgForm,\nprivate _parentFormGroup: FormGroupDirective,\npublic ngControl: NgControl) {\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\n\n    this._keyManager = new FocusKeyManager<MdChip>(this.chips).withWrap();\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = startWith.call(this.chips.changes, null).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n    });\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._selectionModel = new SelectionModel<MdChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n    this._dropSubscriptions();\n  }\n/**\n * Associates an HTML input element with this chip list.\n * @param {?} inputElement\n * @return {?}\n */\nregisterInput(inputElement: MdChipInput) {\n    this._chipInput = inputElement;\n  }\n/**\n * @param {?} ids\n * @return {?}\n */\nsetDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n/**\n * @param {?} disabled\n * @return {?}\n */\nsetDisabledState(disabled: boolean): void {\n    this.disabled = disabled;\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', disabled);\n    this.stateChanges.next();\n  }\n/**\n * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n * are no eligible chips.\n * @return {?}\n */\nfocus() {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n/**\n * Attempt to focus an input if we have one.\n * @return {?}\n */\n_focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n/**\n * Pass events to the keyboard manager. Available here for tests.\n * @param {?} event\n * @return {?}\n */\n_keydown(event: KeyboardEvent) {\n    let /** @type {?} */ code = event.keyCode;\n    let /** @type {?} */ target = /** @type {?} */(( event.target as HTMLElement));\n    let /** @type {?} */ isInputEmpty = this._isInputEmpty(target);\n    let /** @type {?} */ isRtl = this._dir && this._dir.value == 'rtl';\n\n    let /** @type {?} */ isPrevKey = (code === (isRtl ? RIGHT_ARROW : LEFT_ARROW));\n    let /** @type {?} */ isNextKey = (code === (isRtl ? LEFT_ARROW : RIGHT_ARROW));\n    let /** @type {?} */ isBackKey = (code === BACKSPACE || code == DELETE || code == UP_ARROW || isPrevKey);\n    // If they are on an empty input and hit backspace/delete/left arrow, focus the last chip\n    if (isInputEmpty && isBackKey) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n      return;\n    }\n\n    // If they are on a chip, check for space/left/right, otherwise pass to our key manager (like\n    // up/down keys)\n    if (target && target.classList.contains('mat-chip')) {\n      if (isPrevKey) {\n        this._keyManager.setPreviousItemActive();\n        event.preventDefault();\n      } else if (isNextKey) {\n        this._keyManager.setNextItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n    }\n    this.stateChanges.next();\n  }\n/**\n * Check the tab index as you should not be allowed to focus an empty list.\n * @return {?}\n */\nprotected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n/**\n * Update key manager's active item when chip is deleted.\n * If the deleted chip is the last chip in chip list, focus the new last chip.\n * Otherwise focus the next chip in the list.\n * Save `_lastDestroyedIndex` so we can set the correct focus.\n * @param {?} chip\n * @return {?}\n */\nprotected _updateKeyManager(chip: MdChip) {\n    let /** @type {?} */ chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n/**\n * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n * one.\n * @return {?}\n */\nprotected _updateFocusForDestroyedChips() {\n    let /** @type {?} */ chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0) {\n      // Check whether the destroyed chip was the last item\n      const /** @type {?} */ newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let /** @type {?} */ focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    } else if (chipsArray.length === 0) {\n      this._focusInput();\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n/**\n * Utility to ensure all indexes are valid.\n * \n * @param {?} index The index to be checked.\n * @return {?} True if the index is valid for our list of chips.\n */\nprivate _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n/**\n * @param {?} element\n * @return {?}\n */\nprivate _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let /** @type {?} */ input = /** @type {?} */(( element as HTMLInputElement));\n\n      return !input.value;\n    }\n\n    return false;\n  }\n/**\n * @param {?} value\n * @param {?=} isUserInput\n * @return {?}\n */\n_setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const /** @type {?} */ correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        this._keyManager.setActiveItem(this.chips.toArray().indexOf(correspondingChip));\n      }\n    }\n  }\n/**\n * Finds and selects the chip based on its value.\n * @param {?} value\n * @param {?=} isUserInput\n * @return {?} Chip that has the corresponding value.\n */\nprivate _selectValue(value: any, isUserInput: boolean = true): MdChip | undefined {\n\n    const /** @type {?} */ correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n/**\n * @return {?}\n */\nprivate _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n      this.stateChanges.next();\n    });\n  }\n/**\n * Deselects every chip in the list.\n * @param {?=} skip Chip that should not be deselected.\n * @return {?}\n */\nprivate _clearSelection(skip?: MdChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n/**\n * Sorts the model values, ensuring that they keep the same\n * order that they have in the panel.\n * @return {?}\n */\nprivate _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n/**\n * Emits change event to set the model value.\n * @param {?=} fallbackValue\n * @return {?}\n */\nprivate _propagateChanges(fallbackValue?: any): void {\n    let /** @type {?} */ valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MdChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * When blurred, mark the field as touched when focus moved outside the chip list.\n * @return {?}\n */\n_blur() {\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n/**\n * Mark the field as touched\n * @return {?}\n */\n_markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n/**\n * @return {?}\n */\nprivate _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n/**\n * @return {?}\n */\nprivate _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n/**\n * Listens to user-generated selection events on each chip.\n * @return {?}\n */\nprivate _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n/**\n * Listens to user-generated selection events on each chip.\n * @return {?}\n */\nprivate _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let /** @type {?} */ chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(_ => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n/**\n * @return {?}\n */\nprivate _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe((event) => {\n      this._updateKeyManager(event.chip);\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-chip-list, mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'mdChipList, matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    'role': 'listbox',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)'\n  },\n  providers: [{provide: MdFormFieldControl, useExisting: MdChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: NgForm, decorators: [{ type: Optional }, ]},\n{type: FormGroupDirective, decorators: [{ type: Optional }, ]},\n{type: NgControl, decorators: [{ type: Optional }, { type: Self }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'multiple': [{ type: Input },],\n'compareWith': [{ type: Input },],\n'value': [{ type: Input },],\n'id': [{ type: Input },],\n'required': [{ type: Input },],\n'placeholder': [{ type: Input },],\n'disabled': [{ type: Input },],\n'ariaOrientation': [{ type: Input, args: ['aria-orientation', ] },],\n'selectable': [{ type: Input },],\n'tabIndex': [{ type: Input },],\n'change': [{ type: Output },],\n'valueChange': [{ type: Output },],\n'chips': [{ type: ContentChildren, args: [MdChip, ] },],\n};\n}\n\nfunction MdChipList_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipList.ctorParameters;\n/** @type {?} */\nMdChipList.propDecorators;\n/**\n * Stream that emits whenever the state of the input changes such that the wrapping `MdFormField`\n * needs to run change detection.\n * @type {?}\n */\nMdChipList.prototype.stateChanges;\n/**\n * When a chip is destroyed, we track the index so we can focus the appropriate next chip.\n * @type {?}\n */\nMdChipList.prototype._lastDestroyedIndex;\n/**\n * Track which chips we're listening to for focus/destruction.\n * @type {?}\n */\nMdChipList.prototype._chipSet;\n/**\n * Subscription to tabbing out from the chip list.\n * @type {?}\n */\nMdChipList.prototype._tabOutSubscription;\n/**\n * Subscription to changes in the chip list.\n * @type {?}\n */\nMdChipList.prototype._changeSubscription;\n/**\n * Subscription to focus changes in the chips.\n * @type {?}\n */\nMdChipList.prototype._chipFocusSubscription;\n/**\n * Subscription to blur changes in the chips.\n * @type {?}\n */\nMdChipList.prototype._chipBlurSubscription;\n/**\n * Subscription to selection changes in chips.\n * @type {?}\n */\nMdChipList.prototype._chipSelectionSubscription;\n/**\n * Subscription to remove changes in chips.\n * @type {?}\n */\nMdChipList.prototype._chipRemoveSubscription;\n/**\n * Whether or not the chip is selectable.\n * @type {?}\n */\nMdChipList.prototype._selectable;\n/**\n * Whether the component is in multiple selection mode.\n * @type {?}\n */\nMdChipList.prototype._multiple;\n/**\n * The chip input to add more chips\n * @type {?}\n */\nMdChipList.prototype._chipInput;\n/**\n * The aria-describedby attribute on the chip list for improved a11y.\n * @type {?}\n */\nMdChipList.prototype._ariaDescribedby;\n/**\n * Id of the chip list\n * @type {?}\n */\nMdChipList.prototype._id;\n/**\n * Uid of the chip list\n * @type {?}\n */\nMdChipList.prototype._uid;\n/**\n * Whether this is required\n * @type {?}\n */\nMdChipList.prototype._required;\n/**\n * Whether this is disabled\n * @type {?}\n */\nMdChipList.prototype._disabled;\n/** @type {?} */\nMdChipList.prototype._value;\n/**\n * Placeholder for the chip list. Alternatively, placeholder can be set on MdChipInput\n * @type {?}\n */\nMdChipList.prototype._placeholder;\n/**\n * Tab index for the chip list.\n * @type {?}\n */\nMdChipList.prototype._tabIndex;\n/**\n * User defined tab index.\n * When it is not null, use user defined tab index. Otherwise use _tabIndex\n * @type {?}\n */\nMdChipList.prototype._userTabIndex;\n/**\n * The FocusKeyManager which handles focus.\n * @type {?}\n */\nMdChipList.prototype._keyManager;\n/**\n * Function when touched\n * @type {?}\n */\nMdChipList.prototype._onTouched;\n/**\n * Function when changed\n * @type {?}\n */\nMdChipList.prototype._onChange;\n/** @type {?} */\nMdChipList.prototype._selectionModel;\n/**\n * Comparison function to specify which option is displayed. Defaults to object equality.\n * @type {?}\n */\nMdChipList.prototype._compareWith;\n/**\n * Orientation of the chip list.\n * @type {?}\n */\nMdChipList.prototype.ariaOrientation;\n/**\n * Event emitted when the selected chip list value has been changed by the user.\n * @type {?}\n */\nMdChipList.prototype.change;\n/**\n * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n * to facilitate the two-way binding for the `value` input.\n * \\@docs-private\n * @type {?}\n */\nMdChipList.prototype.valueChange;\n/**\n * The chip components contained within this chip list.\n * @type {?}\n */\nMdChipList.prototype.chips;\n/** @type {?} */\nMdChipList.prototype._renderer;\n/** @type {?} */\nMdChipList.prototype._elementRef;\n/** @type {?} */\nMdChipList.prototype._changeDetectorRef;\n/** @type {?} */\nMdChipList.prototype._dir;\n/** @type {?} */\nMdChipList.prototype._parentForm;\n/** @type {?} */\nMdChipList.prototype._parentFormGroup;\n/** @type {?} */\nMdChipList.prototype.ngControl;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport {\n  BACKSPACE,\n  CanColor,\n  CanDisable,\n  DELETE,\n  mixinColor,\n  mixinDisabled,\n  SPACE,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\n\nexport interface MdChipEvent {\n  chip: MdChip;\n}\n/**\n * Event object emitted by MdChip when selected or deselected.\n */\nexport class MdChipSelectionChange {\n/**\n * @param {?} source\n * @param {?} selected\n * @param {?=} isUserInput\n */\nconstructor(public source: MdChip,\npublic selected: boolean,\npublic isUserInput = false) { }\n}\n\nfunction MdChipSelectionChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipSelectionChange.prototype.source;\n/** @type {?} */\nMdChipSelectionChange.prototype.selected;\n/** @type {?} */\nMdChipSelectionChange.prototype.isUserInput;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdChipBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdChipBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipBase.prototype._renderer;\n/** @type {?} */\nMdChipBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdChipMixinBase = mixinColor(mixinDisabled(MdChipBase), 'primary');\n/**\n * Dummy directive to add CSS class to basic chips.\n * \\@docs-private\n */\nexport class MdBasicChip { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `md-basic-chip, [md-basic-chip], mat-basic-chip, [mat-basic-chip]`,\n  host: {'class': 'mat-basic-chip'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdBasicChip_tsickle_Closure_declarations() {\n/** @type {?} */\nMdBasicChip.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdBasicChip.ctorParameters;\n}\n\n/**\n * Material design styled Chip component. Used inside the MdChipList component.\n */\nexport class MdChip extends _MdChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n  CanDisable {\n\n  protected _value: any;\n\n  protected _selected: boolean = false;\n\n  protected _selectable: boolean = true;\n\n  protected _removable: boolean = true;\n/**\n * Whether the chip has focus.\n */\n_hasFocus: boolean = false;\n/**\n * Whether the chip is selected.\n * @return {?}\n */\nget selected(): boolean { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n/**\n * The value of the chip. Defaults to the content inside <md-chip> tags.\n * @return {?}\n */\nget value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) { this._value = newValue; }\n/**\n * Whether or not the chips are selectable. When a chip is not selectable,\n * changes to it's selected state are always ignored.\n * @return {?}\n */\nget selectable(): boolean { return this._selectable; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selectable(value: boolean) { this._selectable = coerceBooleanProperty(value); }\n/**\n * Determines whether or not the chip displays the remove styling and emits (remove) events.\n * @return {?}\n */\nget removable(): boolean { return this._removable; }\n/**\n * @param {?} value\n * @return {?}\n */\nset removable(value: boolean) { this._removable = coerceBooleanProperty(value); }\n/**\n * Emits when the chip is focused.\n */\n_onFocus = new Subject<MdChipEvent>();\n/**\n * Emits when the chip is blured.\n */\n_onBlur = new Subject<MdChipEvent>();\n/**\n * Emitted when the chip is selected or deselected.\n */\nselectionChange = new EventEmitter<MdChipSelectionChange>();\n/**\n * Emitted when the chip is destroyed.\n */\ndestroyed = new EventEmitter<MdChipEvent>();\n/**\n * Emitted when the chip is destroyed.\n * @deprecated Use 'destroyed' instead.\n */\ndestroy = this.destroyed;\n/**\n * Emitted when a chip is to be removed.\n */\nremoved = new EventEmitter<MdChipEvent>();\n/**\n * Emitted when a chip is to be removed.\n * @deprecated Use `removed` instead.\n */\nonRemove = this.removed;\n/**\n * @return {?}\n */\nget ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n/**\n * @param {?} renderer\n * @param {?} _elementRef\n */\nconstructor(renderer: Renderer2,\npublic _elementRef: ElementRef) {\n    super(renderer, _elementRef);\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    this.destroyed.emit({chip: this});\n  }\n/**\n * Selects the chip.\n * @return {?}\n */\nselect(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n/**\n * Deselects the chip.\n * @return {?}\n */\ndeselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n/**\n * Select this chip and emit selected event\n * @return {?}\n */\nselectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n/**\n * Toggles the current selected state of this chip.\n * @param {?=} isUserInput\n * @return {?}\n */\ntoggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n/**\n * Allows for programmatic focusing of the chip.\n * @return {?}\n */\nfocus(): void {\n    this._elementRef.nativeElement.focus();\n    this._onFocus.next({chip: this});\n  }\n/**\n * Allows for programmatic removal of the chip. Called by the MdChipList when the DELETE or\n * BACKSPACE keys are pressed.\n * \n * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n * @return {?}\n */\nremove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n/**\n * Ensures events fire properly upon click.\n * @param {?} event\n * @return {?}\n */\n_handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.focus();\n  }\n/**\n * Handle custom key presses.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n/**\n * @return {?}\n */\n_blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `md-basic-chip, [md-basic-chip], md-chip, [md-chip],\n             mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled'],\n  exportAs: 'mdChip, matChip',\n  host: {\n    'class': 'mat-chip',\n    'tabindex': '-1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_hasFocus = true',\n    '(blur)': '_blur()',\n  },\n\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'selected': [{ type: Input },],\n'value': [{ type: Input },],\n'selectable': [{ type: Input },],\n'removable': [{ type: Input },],\n'selectionChange': [{ type: Output },],\n'destroyed': [{ type: Output },],\n'destroy': [{ type: Output },],\n'removed': [{ type: Output },],\n'onRemove': [{ type: Output, args: ['remove', ] },],\n};\n}\n\nfunction MdChip_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChip.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChip.ctorParameters;\n/** @type {?} */\nMdChip.propDecorators;\n/** @type {?} */\nMdChip.prototype._value;\n/** @type {?} */\nMdChip.prototype._selected;\n/** @type {?} */\nMdChip.prototype._selectable;\n/** @type {?} */\nMdChip.prototype._removable;\n/**\n * Whether the chip has focus.\n * @type {?}\n */\nMdChip.prototype._hasFocus;\n/**\n * Emits when the chip is focused.\n * @type {?}\n */\nMdChip.prototype._onFocus;\n/**\n * Emits when the chip is blured.\n * @type {?}\n */\nMdChip.prototype._onBlur;\n/**\n * Emitted when the chip is selected or deselected.\n * @type {?}\n */\nMdChip.prototype.selectionChange;\n/**\n * Emitted when the chip is destroyed.\n * @type {?}\n */\nMdChip.prototype.destroyed;\n/**\n * Emitted when the chip is destroyed.\n * @deprecated Use 'destroyed' instead.\n * @type {?}\n */\nMdChip.prototype.destroy;\n/**\n * Emitted when a chip is to be removed.\n * @type {?}\n */\nMdChip.prototype.removed;\n/**\n * Emitted when a chip is to be removed.\n * @deprecated Use `removed` instead.\n * @type {?}\n */\nMdChip.prototype.onRemove;\n/** @type {?} */\nMdChip.prototype._elementRef;\n}\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n * \n * Example:\n * \n *     <md-chip>\n *       <md-icon mdChipRemove>cancel</md-icon>\n *     </md-chip>\n * \n * You *may* use a custom icon, but you may need to override the `md-chip-remove` positioning styles\n * to properly center the icon within the chip.\n */\nexport class MdChipRemove {\n/**\n * @param {?} _parentChip\n */\nconstructor(protected _parentChip: MdChip) {}\n/**\n * Calls the parent chip's public `remove()` method if applicable.\n * @return {?}\n */\n_handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdChipRemove], [matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove',\n    '(click)': '_handleClick($event)'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdChip, },\n];\n}\n\nfunction MdChipRemove_tsickle_Closure_declarations() {\n/** @type {?} */\nMdChipRemove.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdChipRemove.ctorParameters;\n/** @type {?} */\nMdChipRemove.prototype._parentChip;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Subject} from 'rxjs/Subject';\n/**\n * Class to be used to power selecting one or more options from a list.\n */\nexport class SelectionModel<T> {\n/**\n * Currently-selected values.\n */\nprivate _selection: Set<T> = new Set();\n/**\n * Keeps track of the deselected options that haven't been emitted by the change event.\n */\nprivate _deselectedToEmit: T[] = [];\n/**\n * Keeps track of the selected option that haven't been emitted by the change event.\n */\nprivate _selectedToEmit: T[] = [];\n/**\n * Cache for the array value of the selected items.\n */\nprivate _selected: T[] | null;\n/**\n * Selected value(s).\n * @return {?}\n */\nget selected(): T[] {\n    if (!this._selected) {\n      this._selected = Array.from(this._selection.values());\n    }\n\n    return this._selected;\n  }\n/**\n * Event emitted when the value has changed.\n */\nonChange: Subject<SelectionChange<T>> | null = this._emitChanges ? new Subject() : null;\n/**\n * @param {?=} _isMulti\n * @param {?=} initiallySelectedValues\n * @param {?=} _emitChanges\n */\nconstructor(\nprivate _isMulti = false,\n    initiallySelectedValues?: T[],\nprivate _emitChanges = true) {\n\n    if (initiallySelectedValues) {\n      if (_isMulti) {\n        initiallySelectedValues.forEach(value => this._markSelected(value));\n      } else {\n        this._markSelected(initiallySelectedValues[0]);\n      }\n\n      // Clear the array in order to avoid firing the change event for preselected values.\n      this._selectedToEmit.length = 0;\n    }\n  }\n/**\n * Selects a value or an array of values.\n * @param {?} value\n * @return {?}\n */\nselect(value: T): void {\n    this._markSelected(value);\n    this._emitChangeEvent();\n  }\n/**\n * Deselects a value or an array of values.\n * @param {?} value\n * @return {?}\n */\ndeselect(value: T): void {\n    this._unmarkSelected(value);\n    this._emitChangeEvent();\n  }\n/**\n * Toggles a value between selected and deselected.\n * @param {?} value\n * @return {?}\n */\ntoggle(value: T): void {\n    this.isSelected(value) ? this.deselect(value) : this.select(value);\n  }\n/**\n * Clears all of the selected values.\n * @return {?}\n */\nclear(): void {\n    this._unmarkAll();\n    this._emitChangeEvent();\n  }\n/**\n * Determines whether a value is selected.\n * @param {?} value\n * @return {?}\n */\nisSelected(value: T): boolean {\n    return this._selection.has(value);\n  }\n/**\n * Determines whether the model does not have a value.\n * @return {?}\n */\nisEmpty(): boolean {\n    return this._selection.size === 0;\n  }\n/**\n * Determines whether the model has a value.\n * @return {?}\n */\nhasValue(): boolean {\n    return !this.isEmpty();\n  }\n/**\n * Sorts the selected values based on a predicate function.\n * @param {?=} predicate\n * @return {?}\n */\nsort(predicate?: (a: T, b: T) => number): void {\n    if (this._isMulti && this._selected) {\n      this._selected.sort(predicate);\n    }\n  }\n/**\n * Emits a change event and clears the records of selected and deselected values.\n * @return {?}\n */\nprivate _emitChangeEvent() {\n    if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n      let /** @type {?} */ eventData = new SelectionChange(this._selectedToEmit, this._deselectedToEmit);\n\n      if (this.onChange) {\n        this.onChange.next(eventData);\n      }\n\n      this._deselectedToEmit = [];\n      this._selectedToEmit = [];\n    }\n\n    this._selected = null;\n  }\n/**\n * Selects a value.\n * @param {?} value\n * @return {?}\n */\nprivate _markSelected(value: T) {\n    if (!this.isSelected(value)) {\n      if (!this._isMulti) {\n        this._unmarkAll();\n      }\n\n      this._selection.add(value);\n\n      if (this._emitChanges) {\n        this._selectedToEmit.push(value);\n      }\n    }\n  }\n/**\n * Deselects a value.\n * @param {?} value\n * @return {?}\n */\nprivate _unmarkSelected(value: T) {\n    if (this.isSelected(value)) {\n      this._selection.delete(value);\n\n      if (this._emitChanges) {\n        this._deselectedToEmit.push(value);\n      }\n    }\n  }\n/**\n * Clears out the selected values.\n * @return {?}\n */\nprivate _unmarkAll() {\n    if (!this.isEmpty()) {\n      this._selection.forEach(value => this._unmarkSelected(value));\n    }\n  }\n}\n\nfunction SelectionModel_tsickle_Closure_declarations() {\n/**\n * Currently-selected values.\n * @type {?}\n */\nSelectionModel.prototype._selection;\n/**\n * Keeps track of the deselected options that haven't been emitted by the change event.\n * @type {?}\n */\nSelectionModel.prototype._deselectedToEmit;\n/**\n * Keeps track of the selected option that haven't been emitted by the change event.\n * @type {?}\n */\nSelectionModel.prototype._selectedToEmit;\n/**\n * Cache for the array value of the selected items.\n * @type {?}\n */\nSelectionModel.prototype._selected;\n/**\n * Event emitted when the value has changed.\n * @type {?}\n */\nSelectionModel.prototype.onChange;\n/** @type {?} */\nSelectionModel.prototype._isMulti;\n/** @type {?} */\nSelectionModel.prototype._emitChanges;\n}\n\n/**\n * Describes an event emitted when the value of a MdSelectionModel has changed.\n * \\@docs-private\n */\nexport class SelectionChange<T> {\n/**\n * @param {?=} added\n * @param {?=} removed\n */\nconstructor(public added?: T[],\npublic removed?: T[]) { }\n}\n\nfunction SelectionChange_tsickle_Closure_declarations() {\n/** @type {?} */\nSelectionChange.prototype.added;\n/** @type {?} */\nSelectionChange.prototype.removed;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Observable} from 'rxjs/Observable';\nimport {CollectionViewer} from './collection-viewer';\n/**\n * @abstract\n */\nexport abstract class DataSource<T> {\n/**\n * Connects a collection viewer (such as a data-table) to this data source. Note that\n * the stream provided will be accessed during change detection and should not directly change\n * values that are bound in template views.\n * @abstract\n * @param {?} collectionViewer The component that exposes a view over the data provided by this\n *     data source.\n * @return {?} Observable that emits a new value when the data changes.\n */\nconnect(collectionViewer: CollectionViewer) {}\n/**\n * Disconnects a collection viewer (such as a data-table) from this data source. Can be used\n * to perform any clean-up or tear-down operations when a view is being destroyed.\n * \n * @abstract\n * @param {?} collectionViewer The component that exposes a view over the data provided by this\n *     data source.\n * @return {?}\n */\ndisconnect(collectionViewer: CollectionViewer) {}\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MD_CHECKBOX_CONTROL_VALUE_ACCESSOR,TransitionCheckState,MdCheckboxChange,MdCheckboxBase,_MdCheckboxMixinBase,MdCheckbox,MdCheckboxModule,_MdCheckboxRequiredValidator,MD_CHECKBOX_REQUIRED_VALIDATOR,MdCheckboxRequiredValidator,MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR,MAT_CHECKBOX_REQUIRED_VALIDATOR,MatCheckbox,MatCheckboxBase,MatCheckboxChange,MatCheckboxModule,MatCheckboxRequiredValidator} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MdRippleModule, MdCommonModule} from '@angular/material/core';\nimport {MdCheckbox} from './checkbox';\nimport {MdCheckboxRequiredValidator} from './checkbox-required-validator';\nimport {A11yModule} from '@angular/cdk/a11y';\nexport class MdCheckboxModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MdRippleModule, MdCommonModule, ObserversModule, A11yModule],\n  exports: [MdCheckbox, MdCheckboxRequiredValidator, MdCommonModule],\n  declarations: [MdCheckbox, MdCheckboxRequiredValidator],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCheckboxModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCheckboxModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCheckboxModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const /** @type {?} */ _MdCheckboxRequiredValidator = CheckboxRequiredValidator;\n\nexport const /** @type {?} */ MD_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MdCheckboxRequiredValidator),\n  multi: true\n};\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `md-checkbox`.\n */\nexport class MdCheckboxRequiredValidator extends _MdCheckboxRequiredValidator {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `md-checkbox[required][formControlName],\n             mat-checkbox[required][formControlName],\n             md-checkbox[required][formControl], md-checkbox[required][ngModel],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MD_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCheckboxRequiredValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCheckboxRequiredValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCheckboxRequiredValidator.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  Renderer2,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple, MATERIAL_COMPATIBILITY_MODE,\n  MdRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleRef,\n} from '@angular/material/core';\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Provider Expression that allows md-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n */\nexport const MD_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdCheckbox),\n  multi: true\n};\nexport type TransitionCheckState = number;\nexport let TransitionCheckState: any = {};\nTransitionCheckState.Init = 0;\nTransitionCheckState.Checked = 1;\nTransitionCheckState.Unchecked = 2;\nTransitionCheckState.Indeterminate = 3;\nTransitionCheckState[TransitionCheckState.Init] = \"Init\";\nTransitionCheckState[TransitionCheckState.Checked] = \"Checked\";\nTransitionCheckState[TransitionCheckState.Unchecked] = \"Unchecked\";\nTransitionCheckState[TransitionCheckState.Indeterminate] = \"Indeterminate\";\n\n/**\n * Change event object emitted by MdCheckbox.\n */\nexport class MdCheckboxChange {\n/**\n * The source MdCheckbox of the event.\n */\nsource: MdCheckbox;\n/**\n * The new `checked` value of the checkbox.\n */\nchecked: boolean;\n}\n\nfunction MdCheckboxChange_tsickle_Closure_declarations() {\n/**\n * The source MdCheckbox of the event.\n * @type {?}\n */\nMdCheckboxChange.prototype.source;\n/**\n * The new `checked` value of the checkbox.\n * @type {?}\n */\nMdCheckboxChange.prototype.checked;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdCheckboxBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdCheckboxBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCheckboxBase.prototype._renderer;\n/** @type {?} */\nMdCheckboxBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdCheckboxMixinBase =\n  mixinColor(mixinDisableRipple(mixinDisabled(MdCheckboxBase)), 'accent');\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MdCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\nexport class MdCheckbox extends _MdCheckboxMixinBase implements ControlValueAccessor, AfterViewInit,\n    OnDestroy, CanColor, CanDisable, CanDisableRipple {\n/**\n * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n * take precedence so this may be omitted.\n */\nariaLabel: string = '';\n/**\n * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n */\nariaLabelledby: string | null = null;\nprivate _uniqueId: string = `md-checkbox-${++nextUniqueId}`;\n/**\n * A unique id for the checkbox input. If none is supplied, it will be auto-generated.\n */\nid: string = this._uniqueId;\n/**\n * Returns the unique id for the visual hidden input.\n * @return {?}\n */\nget inputId(): string { return `${this.id || this._uniqueId}-input`; }\nprivate _required: boolean;\n/**\n * Whether the checkbox is required.\n * @return {?}\n */\nget required(): boolean { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value) { this._required = coerceBooleanProperty(value); }\n/**\n * Whether or not the checkbox should appear before or after the label.\n * @deprecated\n * @return {?}\n */\nget align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n/**\n * Whether the label should appear after or before the checkbox. Defaults to 'after'\n */\nlabelPosition: 'before' | 'after' = 'after';\n/**\n * Tabindex value that is passed to the underlying input element.\n */\ntabIndex: number = 0;\n/**\n * Name value will be applied to the input element if present\n */\nname: string | null = null;\n/**\n * Event emitted when the checkbox's `checked` value changes.\n */\nchange: EventEmitter<MdCheckboxChange> = new EventEmitter<MdCheckboxChange>();\n/**\n * Event emitted when the checkbox's `indeterminate` value changes.\n */\nindeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n/**\n * The value attribute of the native input element\n */\nvalue: string ;\n/**\n * The native `<input type=\"checkbox\"> element\n */\n_inputElement: ElementRef;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n */\n_ripple: MdRipple;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n * \\@docs-private\n */\nonTouched: () => any = () => {};\nprivate _currentAnimationClass: string = '';\nprivate _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\nprivate _checked: boolean = false;\nprivate _indeterminate: boolean = false;\nprivate _controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * Reference to the focused state ripple.\n */\nprivate _focusRipple: RippleRef | null;\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _changeDetectorRef\n * @param {?} _focusMonitor\n */\nconstructor(renderer: Renderer2,\n              elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _focusMonitor: FocusMonitor) {\n    super(renderer, elementRef);\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement, this._renderer, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n/**\n * Whether the checkbox is checked.\n * @return {?}\n */\nget checked() {\n    return this._checked;\n  }\n/**\n * @param {?} checked\n * @return {?}\n */\nset checked(checked: boolean) {\n    if (checked != this.checked) {\n      this._checked = checked;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n * set to false.\n * @return {?}\n */\nget indeterminate() {\n    return this._indeterminate;\n  }\n/**\n * @param {?} indeterminate\n * @return {?}\n */\nset indeterminate(indeterminate: boolean) {\n    let /** @type {?} */ changed =  indeterminate != this._indeterminate;\n    this._indeterminate = indeterminate;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n/**\n * @return {?}\n */\n_isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n/**\n * Method being called whenever the label text changes.\n * @return {?}\n */\n_onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value Value to be set to the model.\n * @return {?}\n */\nwriteValue(value: any) {\n    this.checked = !!value;\n  }\n/**\n * Registers a callback to be triggered when the value has changed.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Function to be called on change.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback to be triggered when the control has been touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be triggered when the checkbox is touched.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Sets the checkbox's disabled state. Implemented as a part of ControlValueAccessor.\n * @param {?} isDisabled Whether the checkbox should be disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * @param {?} newState\n * @return {?}\n */\nprivate _transitionCheckState(newState: TransitionCheckState) {\n    let /** @type {?} */ oldState = this._currentCheckState;\n    let /** @type {?} */ renderer = this._renderer;\n    let /** @type {?} */ elementRef = this._elementRef;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      renderer.removeClass(elementRef.nativeElement, this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      renderer.addClass(elementRef.nativeElement, this._currentAnimationClass);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _emitChangeEvent() {\n    let /** @type {?} */ event = new MdCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n/**\n * Function is called whenever the focus changes for the input element.\n * @param {?} focusOrigin\n * @return {?}\n */\nprivate _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, centered: true});\n    } else if (!focusOrigin) {\n      this._removeFocusRipple();\n      this.onTouched();\n    }\n  }\n/**\n * Toggles the `checked` state of the checkbox.\n * @return {?}\n */\ntoggle(): void {\n    this.checked = !this.checked;\n  }\n/**\n * Event handler for checkbox input element.\n * Toggles checked state if element is not disabled.\n * Do not toggle on (change) event since IE doesn't fire change event when\n *   indeterminate checkbox is clicked.\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    this._removeFocusRipple();\n\n    if (!this.disabled) {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this._indeterminate) {\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n        this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    }\n  }\n/**\n * Focuses the checkbox.\n * @return {?}\n */\nfocus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n/**\n * @param {?} oldState\n * @param {?} newState\n * @return {?}\n */\nprivate _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let /** @type {?} */ animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n/**\n * Fades out the focus state ripple.\n * @return {?}\n */\nprivate _removeFocusRipple(): void {\n    if (this._focusRipple) {\n      this._focusRipple.fadeOut();\n      this._focusRipple = null;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-checkbox, mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MD_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: FocusMonitor, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'id': [{ type: Input },],\n'required': [{ type: Input },],\n'align': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'tabIndex': [{ type: Input },],\n'name': [{ type: Input },],\n'change': [{ type: Output },],\n'indeterminateChange': [{ type: Output },],\n'value': [{ type: Input },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n'_ripple': [{ type: ViewChild, args: [MdRipple, ] },],\n'checked': [{ type: Input },],\n'indeterminate': [{ type: Input },],\n};\n}\n\nfunction MdCheckbox_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCheckbox.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCheckbox.ctorParameters;\n/** @type {?} */\nMdCheckbox.propDecorators;\n/**\n * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n * take precedence so this may be omitted.\n * @type {?}\n */\nMdCheckbox.prototype.ariaLabel;\n/**\n * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n * @type {?}\n */\nMdCheckbox.prototype.ariaLabelledby;\n/** @type {?} */\nMdCheckbox.prototype._uniqueId;\n/**\n * A unique id for the checkbox input. If none is supplied, it will be auto-generated.\n * @type {?}\n */\nMdCheckbox.prototype.id;\n/** @type {?} */\nMdCheckbox.prototype._required;\n/**\n * Whether the label should appear after or before the checkbox. Defaults to 'after'\n * @type {?}\n */\nMdCheckbox.prototype.labelPosition;\n/**\n * Tabindex value that is passed to the underlying input element.\n * @type {?}\n */\nMdCheckbox.prototype.tabIndex;\n/**\n * Name value will be applied to the input element if present\n * @type {?}\n */\nMdCheckbox.prototype.name;\n/**\n * Event emitted when the checkbox's `checked` value changes.\n * @type {?}\n */\nMdCheckbox.prototype.change;\n/**\n * Event emitted when the checkbox's `indeterminate` value changes.\n * @type {?}\n */\nMdCheckbox.prototype.indeterminateChange;\n/**\n * The value attribute of the native input element\n * @type {?}\n */\nMdCheckbox.prototype.value;\n/**\n * The native `<input type=\"checkbox\"> element\n * @type {?}\n */\nMdCheckbox.prototype._inputElement;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n * @type {?}\n */\nMdCheckbox.prototype._ripple;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n * \\@docs-private\n * @type {?}\n */\nMdCheckbox.prototype.onTouched;\n/** @type {?} */\nMdCheckbox.prototype._currentAnimationClass;\n/** @type {?} */\nMdCheckbox.prototype._currentCheckState;\n/** @type {?} */\nMdCheckbox.prototype._checked;\n/** @type {?} */\nMdCheckbox.prototype._indeterminate;\n/** @type {?} */\nMdCheckbox.prototype._controlValueAccessorChangeFn;\n/**\n * Reference to the focused state ripple.\n * @type {?}\n */\nMdCheckbox.prototype._focusRipple;\n/** @type {?} */\nMdCheckbox.prototype._changeDetectorRef;\n/** @type {?} */\nMdCheckbox.prototype._focusMonitor;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdMutationObserverFactory,ObserveContent,ObserversModule} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ElementRef,\n  NgModule,\n  Output,\n  Input,\n  EventEmitter,\n  OnDestroy,\n  AfterContentInit,\n  Injectable,\n  NgZone,\n} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\nimport {RxChain, debounceTime} from '@angular/cdk/rxjs';\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * \\@docs-private\n */\nexport class MdMutationObserverFactory {\n/**\n * @param {?} callback\n * @return {?}\n */\ncreate(callback): MutationObserver | null {\n    return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdMutationObserverFactory_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMutationObserverFactory.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMutationObserverFactory.ctorParameters;\n}\n\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\nexport class ObserveContent implements AfterContentInit, OnDestroy {\nprivate _observer: MutationObserver | null;\n/**\n * Event emitted for each change in the element's content.\n */\nevent = new EventEmitter<MutationRecord[]>();\n/**\n * Used for debouncing the emitted values to the observeContent event.\n */\nprivate _debouncer = new Subject<MutationRecord[]>();\n/**\n * Debounce interval for emitting the changes.\n */\ndebounce: number;\n/**\n * @param {?} _mutationObserverFactory\n * @param {?} _elementRef\n * @param {?} _ngZone\n */\nconstructor(\nprivate _mutationObserverFactory: MdMutationObserverFactory,\nprivate _elementRef: ElementRef,\nprivate _ngZone: NgZone) { }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    if (this.debounce > 0) {\n      this._ngZone.runOutsideAngular(() => {\n        RxChain.from(this._debouncer)\n          .call(debounceTime, this.debounce)\n          .subscribe((mutations: MutationRecord[]) => this.event.emit(mutations));\n      });\n    } else {\n      this._debouncer.subscribe(mutations => this.event.emit(mutations));\n    }\n\n    this._observer = this._ngZone.runOutsideAngular(() => {\n      return this._mutationObserverFactory.create((mutations: MutationRecord[]) => {\n        this._debouncer.next(mutations);\n      });\n    });\n\n    if (this._observer) {\n      this._observer.observe(this._elementRef.nativeElement, {\n        characterData: true,\n        childList: true,\n        subtree: true\n      });\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._observer) {\n      this._observer.disconnect();\n    }\n\n    this._debouncer.complete();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkObserveContent]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdMutationObserverFactory, },\n{type: ElementRef, },\n{type: NgZone, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'event': [{ type: Output, args: ['cdkObserveContent', ] },],\n'debounce': [{ type: Input },],\n};\n}\n\nfunction ObserveContent_tsickle_Closure_declarations() {\n/** @type {?} */\nObserveContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nObserveContent.ctorParameters;\n/** @type {?} */\nObserveContent.propDecorators;\n/** @type {?} */\nObserveContent.prototype._observer;\n/**\n * Event emitted for each change in the element's content.\n * @type {?}\n */\nObserveContent.prototype.event;\n/**\n * Used for debouncing the emitted values to the observeContent event.\n * @type {?}\n */\nObserveContent.prototype._debouncer;\n/**\n * Debounce interval for emitting the changes.\n * @type {?}\n */\nObserveContent.prototype.debounce;\n/** @type {?} */\nObserveContent.prototype._mutationObserverFactory;\n/** @type {?} */\nObserveContent.prototype._elementRef;\n/** @type {?} */\nObserveContent.prototype._ngZone;\n}\n\nexport class ObserversModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [ObserveContent],\n  declarations: [ObserveContent],\n  providers: [MdMutationObserverFactory]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ObserversModule_tsickle_Closure_declarations() {\n/** @type {?} */\nObserversModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nObserversModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdCardContent,MdCardTitle,MdCardSubtitle,MdCardActions,MdCardFooter,MdCardImage,MdCardSmImage,MdCardMdImage,MdCardLgImage,MdCardXlImage,MdCardAvatar,MdCard,MdCardHeader,MdCardTitleGroup,MdCardModule,MatCard,MatCardActions,MatCardAvatar,MatCardContent,MatCardFooter,MatCardHeader,MatCardImage,MatCardLgImage,MatCardMatImage,MatCardModule,MatCardSmImage,MatCardSubtitle,MatCardTitle,MatCardTitleGroup,MatCardXlImage} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdCommonModule} from '@angular/material/core';\nimport {\n  MdCard,\n  MdCardHeader,\n  MdCardTitleGroup,\n  MdCardContent,\n  MdCardTitle,\n  MdCardSubtitle,\n  MdCardActions,\n  MdCardFooter,\n  MdCardSmImage,\n  MdCardMdImage,\n  MdCardLgImage,\n  MdCardImage,\n  MdCardXlImage,\n  MdCardAvatar,\n} from './card';\nexport class MdCardModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule],\n  exports: [\n    MdCard,\n    MdCardHeader,\n    MdCardTitleGroup,\n    MdCardContent,\n    MdCardTitle,\n    MdCardSubtitle,\n    MdCardActions,\n    MdCardFooter,\n    MdCardSmImage,\n    MdCardMdImage,\n    MdCardLgImage,\n    MdCardImage,\n    MdCardXlImage,\n    MdCardAvatar,\n    MdCommonModule,\n  ],\n  declarations: [\n    MdCard, MdCardHeader, MdCardTitleGroup, MdCardContent, MdCardTitle, MdCardSubtitle,\n    MdCardActions, MdCardFooter, MdCardSmImage, MdCardMdImage, MdCardLgImage, MdCardImage,\n    MdCardXlImage, MdCardAvatar,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardContent {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-card-content, mat-card-content',\n  host: {'class': 'mat-card-content'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardContent.ctorParameters;\n}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardTitle {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `md-card-title, mat-card-title, [md-card-title], [mat-card-title],\n             [mdCardTitle], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardTitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardTitle.ctorParameters;\n}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardSubtitle {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `md-card-subtitle, mat-card-subtitle, [md-card-subtitle], [mat-card-subtitle],\n             [mdCardSubtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardSubtitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardSubtitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardSubtitle.ctorParameters;\n}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardActions {\n/**\n * Position of the actions inside the card.\n */\nalign: 'start' | 'end' = 'start';\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-card-actions, mat-card-actions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'align': [{ type: Input },],\n};\n}\n\nfunction MdCardActions_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardActions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardActions.ctorParameters;\n/** @type {?} */\nMdCardActions.propDecorators;\n/**\n * Position of the actions inside the card.\n * @type {?}\n */\nMdCardActions.prototype.align;\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MdCardFooter {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-card-footer, mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardFooter_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardFooter.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardFooter.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-image], [mat-card-image], [mdCardImage], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardImage.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardSmImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-sm-image], [mat-card-sm-image], [mdCardImageSmall], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardSmImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardSmImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardSmImage.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardMdImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-md-image], [mat-card-md-image], [mdCardImageMedium], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardMdImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardMdImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardMdImage.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardLgImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-lg-image], [mat-card-lg-image], [mdCardImageLarge], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardLgImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardLgImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardLgImage.ctorParameters;\n}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardXlImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-xl-image], [mat-card-xl-image], [mdCardImageXLarge], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardXlImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardXlImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardXlImage.ctorParameters;\n}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MdCardAvatar {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-card-avatar], [mat-card-avatar], [mdCardAvatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardAvatar_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardAvatar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardAvatar.ctorParameters;\n}\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n * \n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - md-card-title\n * - md-card-subtitle\n * - md-card-content\n * - md-card-actions\n * - md-card-footer\n */\nexport class MdCard {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-card, mat-card',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCard_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCard.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCard.ctorParameters;\n}\n\n/**\n * Component intended to be used within the `<md-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * \\@docs-private\n */\nexport class MdCardHeader {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-card-header, mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardHeader.ctorParameters;\n}\n\n/**\n * Component intended to be used within the <md-card> component. It adds styles for a preset\n * layout that groups an image with a title section.\n * \\@docs-private\n */\nexport class MdCardTitleGroup {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-card-title-group, mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdCardTitleGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCardTitleGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCardTitleGroup.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {ToggleType,MdButtonToggleGroupBase,_MdButtonToggleGroupMixinBase,MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,MdButtonToggleChange,MdButtonToggleGroup,MdButtonToggleGroupMultiple,MdButtonToggle,MdButtonToggleModule,MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,MatButtonToggle,MatButtonToggleChange,MatButtonToggleGroup,MatButtonToggleGroupBase,MatButtonToggleGroupMultiple,MatButtonToggleModule} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdButtonToggleGroup, MdButtonToggleGroupMultiple, MdButtonToggle} from './button-toggle';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER, MdCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nexport class MdButtonToggleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule, A11yModule],\n  exports: [\n    MdButtonToggleGroup,\n    MdButtonToggleGroupMultiple,\n    MdButtonToggle,\n    MdCommonModule,\n  ],\n  declarations: [MdButtonToggleGroup, MdButtonToggleGroupMultiple, MdButtonToggle],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdButtonToggleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggleModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Renderer2,\n  EventEmitter,\n  Input,\n  OnInit,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  forwardRef,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/material/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n/**\n * \\@docs-private\n */\nexport class MdButtonToggleGroupBase {}\nexport const /** @type {?} */ _MdButtonToggleGroupMixinBase = mixinDisabled(MdButtonToggleGroupBase);\n/**\n * Provider Expression that allows md-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n */\nexport const MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdButtonToggleGroup),\n  multi: true\n};\n\nlet /** @type {?} */ _uniqueIdCounter = 0;\n/**\n * Change event object emitted by MdButtonToggle.\n */\nexport class MdButtonToggleChange {\n/**\n * The MdButtonToggle that emits the event.\n */\nsource: MdButtonToggle | null;\n/**\n * The value assigned to the MdButtonToggle.\n */\nvalue: any;\n}\n\nfunction MdButtonToggleChange_tsickle_Closure_declarations() {\n/**\n * The MdButtonToggle that emits the event.\n * @type {?}\n */\nMdButtonToggleChange.prototype.source;\n/**\n * The value assigned to the MdButtonToggle.\n * @type {?}\n */\nMdButtonToggleChange.prototype.value;\n}\n\n/**\n * Exclusive selection button toggle group that behaves like a radio-button group.\n */\nexport class MdButtonToggleGroup extends _MdButtonToggleGroupMixinBase\n    implements ControlValueAccessor, CanDisable {\n/**\n * The value for the button toggle group. Should match currently selected button toggle.\n */\nprivate _value: any = null;\n/**\n * The HTML name attribute applied to toggles in this group.\n */\nprivate _name: string = `md-button-toggle-group-${_uniqueIdCounter++}`;\n/**\n * Whether the button toggle group should be vertical.\n */\nprivate _vertical: boolean = false;\n/**\n * The currently selected button toggle, should match the value.\n */\nprivate _selected: MdButtonToggle | null = null;\n/**\n * The method to be called in order to update ngModel.\n * Now `ngModel` binding is not supported in multiple selection mode.\n */\n_controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n */\nonTouched: () => any = () => {};\n/**\n * Child button toggle buttons.\n */\n_buttonToggles: QueryList<MdButtonToggle>;\n/**\n * `name` attribute for the underlying `input` element.\n * @return {?}\n */\nget name(): string {\n    return this._name;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset name(value: string) {\n    this._name = value;\n    this._updateButtonToggleNames();\n  }\n/**\n * Whether the toggle group is vertical.\n * @return {?}\n */\nget vertical(): boolean {\n    return this._vertical;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n/**\n * Value of the toggle group.\n * @return {?}\n */\nget value(): any {\n    return this._value;\n  }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\n    if (this._value != newValue) {\n      this._value = newValue;\n\n      this._updateSelectedButtonToggleFromValue();\n    }\n  }\n/**\n * Whether the toggle group is selected.\n * @return {?}\n */\nget selected() {\n    return this._selected;\n  }\n/**\n * @param {?} selected\n * @return {?}\n */\nset selected(selected: MdButtonToggle | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n\n    if (selected && !selected.checked) {\n      selected.checked = true;\n    }\n  }\n/**\n * Event emitted when the group's value changes.\n */\nchange: EventEmitter<MdButtonToggleChange> = new EventEmitter<MdButtonToggleChange>();\n/**\n * @param {?} _changeDetector\n */\nconstructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n/**\n * @return {?}\n */\nprivate _updateButtonToggleNames(): void {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => {\n        toggle.name = this._name;\n      });\n    }\n  }\n/**\n * @return {?}\n */\nprivate _updateSelectedButtonToggleFromValue(): void {\n    let /** @type {?} */ isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._buttonToggles != null && !isAlreadySelected) {\n      let /** @type {?} */ matchingButtonToggle = this._buttonToggles.filter(\n          buttonToggle => buttonToggle.value == this._value)[0];\n\n      if (matchingButtonToggle) {\n        this.selected = matchingButtonToggle;\n      } else if (this.value == null) {\n        this.selected = null;\n        this._buttonToggles.forEach(buttonToggle => {\n          buttonToggle.checked = false;\n        });\n      }\n    }\n  }\n/**\n * Dispatch change event with current selection and group value.\n * @return {?}\n */\n_emitChangeEvent(): void {\n    let /** @type {?} */ event = new MdButtonToggleChange();\n    event.source = this._selected;\n    event.value = this._value;\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value Value to be set to the model.\n * @return {?}\n */\nwriteValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n/**\n * Registers a callback that will be triggered when the value has changed.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn On change callback function.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback that will be triggered when the control has been touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn On touch callback function.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Toggles the disabled state of the component. Implemented as part of ControlValueAccessor.\n * @param {?} isDisabled Whether the component should be disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-button-toggle-group:not([multiple]), mat-button-toggle-group:not([multiple])',\n  providers: [MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n  inputs: ['disabled'],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'mdButtonToggleGroup, matButtonToggleGroup',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_buttonToggles': [{ type: ContentChildren, args: [forwardRef(() => MdButtonToggle), ] },],\n'name': [{ type: Input },],\n'vertical': [{ type: Input },],\n'value': [{ type: Input },],\n'selected': [{ type: Input },],\n'change': [{ type: Output },],\n};\n}\n\nfunction MdButtonToggleGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggleGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggleGroup.ctorParameters;\n/** @type {?} */\nMdButtonToggleGroup.propDecorators;\n/**\n * The value for the button toggle group. Should match currently selected button toggle.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._value;\n/**\n * The HTML name attribute applied to toggles in this group.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._name;\n/**\n * Whether the button toggle group should be vertical.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._vertical;\n/**\n * The currently selected button toggle, should match the value.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._selected;\n/**\n * The method to be called in order to update ngModel.\n * Now `ngModel` binding is not supported in multiple selection mode.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._controlValueAccessorChangeFn;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * @type {?}\n */\nMdButtonToggleGroup.prototype.onTouched;\n/**\n * Child button toggle buttons.\n * @type {?}\n */\nMdButtonToggleGroup.prototype._buttonToggles;\n/**\n * Event emitted when the group's value changes.\n * @type {?}\n */\nMdButtonToggleGroup.prototype.change;\n/** @type {?} */\nMdButtonToggleGroup.prototype._changeDetector;\n}\n\n/**\n * Multiple selection button-toggle group. `ngModel` is not supported in this mode.\n */\nexport class MdButtonToggleGroupMultiple extends _MdButtonToggleGroupMixinBase\n    implements CanDisable {\n/**\n * Whether the button toggle group should be vertical.\n */\nprivate _vertical: boolean = false;\n/**\n * Whether the toggle group is vertical.\n * @return {?}\n */\nget vertical(): boolean {\n    return this._vertical;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-button-toggle-group[multiple], mat-button-toggle-group[multiple]',\n  exportAs: 'mdButtonToggleGroup, matButtonToggleGroup',\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    'role': 'group'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'vertical': [{ type: Input },],\n};\n}\n\nfunction MdButtonToggleGroupMultiple_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggleGroupMultiple.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggleGroupMultiple.ctorParameters;\n/** @type {?} */\nMdButtonToggleGroupMultiple.propDecorators;\n/**\n * Whether the button toggle group should be vertical.\n * @type {?}\n */\nMdButtonToggleGroupMultiple.prototype._vertical;\n}\n\n/**\n * Single button inside of a toggle group.\n */\nexport class MdButtonToggle implements OnInit, OnDestroy {\n/**\n * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n * take precedence so this may be omitted.\n */\nariaLabel: string = '';\n/**\n * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n */\nariaLabelledby: string | null = null;\n/**\n * Whether or not this button toggle is checked.\n */\nprivate _checked: boolean = false;\n/**\n * Type of the button toggle. Either 'radio' or 'checkbox'.\n */\n_type: ToggleType;\n/**\n * Whether or not this button toggle is disabled.\n */\nprivate _disabled: boolean = false;\n/**\n * Value assigned to this button toggle.\n */\nprivate _value: any = null;\n/**\n * Whether or not the button toggle is a single selection.\n */\nprivate _isSingleSelector: boolean = false;\n/**\n * Unregister function for _buttonToggleDispatcher *\n */\nprivate _removeUniqueSelectionListener: () => void = () => {};\n\n   _inputElement: ElementRef;\n/**\n * The parent button toggle group (exclusive selection). Optional.\n */\nbuttonToggleGroup: MdButtonToggleGroup;\n/**\n * The parent button toggle group (multiple selection). Optional.\n */\nbuttonToggleGroupMultiple: MdButtonToggleGroupMultiple;\n/**\n * Unique ID for the underlying `input` element.\n * @return {?}\n */\nget inputId(): string {\n    return `${this.id}-input`;\n  }\n/**\n * The unique ID for this button toggle.\n */\nid: string;\n/**\n * HTML's 'name' attribute used to group radios for unique selection.\n */\nname: string;\n/**\n * Whether the button is checked.\n * @return {?}\n */\nget checked(): boolean { return this._checked; }\n/**\n * @param {?} newCheckedState\n * @return {?}\n */\nset checked(newCheckedState: boolean) {\n    if (this._isSingleSelector && newCheckedState) {\n      // Notify all button toggles with the same name (in the same group) to un-check.\n      this._buttonToggleDispatcher.notify(this.id, this.name);\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._checked = newCheckedState;\n\n    if (newCheckedState && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\n      this.buttonToggleGroup.selected = this;\n    }\n  }\n/**\n * MdButtonToggleGroup reads this to assign its own value.\n * @return {?}\n */\nget value(): any {\n    return this._value;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: any) {\n    if (this._value != value) {\n      if (this.buttonToggleGroup != null && this.checked) {\n        this.buttonToggleGroup.value = value;\n      }\n      this._value = value;\n    }\n  }\n/**\n * Whether the button is disabled.\n * @return {?}\n */\nget disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\n        (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n/**\n * Event emitted when the group value changes.\n */\nchange: EventEmitter<MdButtonToggleChange> = new EventEmitter<MdButtonToggleChange>();\n/**\n * @param {?} toggleGroup\n * @param {?} toggleGroupMultiple\n * @param {?} _changeDetectorRef\n * @param {?} _buttonToggleDispatcher\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _focusMonitor\n */\nconstructor( toggleGroup: MdButtonToggleGroup,\n               toggleGroupMultiple: MdButtonToggleGroupMultiple,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _buttonToggleDispatcher: UniqueSelectionDispatcher,\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _focusMonitor: FocusMonitor) {\n\n    this.buttonToggleGroup = toggleGroup;\n    this.buttonToggleGroupMultiple = toggleGroupMultiple;\n\n    if (this.buttonToggleGroup) {\n      this._removeUniqueSelectionListener =\n        _buttonToggleDispatcher.listen((id: string, name: string) => {\n          if (id != this.id && name == this.name) {\n            this.checked = false;\n            this._changeDetectorRef.markForCheck();\n          }\n        });\n\n      this._type = 'radio';\n      this.name = this.buttonToggleGroup.name;\n      this._isSingleSelector = true;\n    } else {\n      // Even if there is no group at all, treat the button toggle as a checkbox so it can be\n      // toggled on or off.\n      this._type = 'checkbox';\n      this._isSingleSelector = false;\n    }\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (this.id == null) {\n      this.id = `md-button-toggle-${_uniqueIdCounter++}`;\n    }\n\n    if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\n      this._checked = true;\n    }\n    this._focusMonitor.monitor(this._elementRef.nativeElement, this._renderer, true);\n  }\n/**\n * Focuses the button.\n * @return {?}\n */\nfocus() {\n    this._inputElement.nativeElement.focus();\n  }\n/**\n * Toggle the state of the current button toggle.\n * @return {?}\n */\nprivate _toggle(): void {\n    this.checked = !this.checked;\n  }\n/**\n * Checks the button toggle due to an interaction with the underlying native input.\n * @param {?} event\n * @return {?}\n */\n_onInputChange(event: Event) {\n    event.stopPropagation();\n\n    if (this._isSingleSelector) {\n      // Propagate the change one-way via the group, which will in turn mark this\n      // button toggle as checked.\n      let /** @type {?} */ groupValueChanged = this.buttonToggleGroup.selected != this;\n      this.checked = true;\n      this.buttonToggleGroup.selected = this;\n      this.buttonToggleGroup.onTouched();\n      if (groupValueChanged) {\n        this.buttonToggleGroup._emitChangeEvent();\n      }\n    } else {\n      this._toggle();\n    }\n\n    // Emit a change event when the native input does.\n    this._emitChangeEvent();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n/**\n * Dispatch change event with current value.\n * @return {?}\n */\nprivate _emitChangeEvent(): void {\n    let /** @type {?} */ event = new MdButtonToggleChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    this._removeUniqueSelectionListener();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-button-toggle, mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup && !buttonToggleGroupMultiple',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdButtonToggleGroup, decorators: [{ type: Optional }, ]},\n{type: MdButtonToggleGroupMultiple, decorators: [{ type: Optional }, ]},\n{type: ChangeDetectorRef, },\n{type: UniqueSelectionDispatcher, },\n{type: Renderer2, },\n{type: ElementRef, },\n{type: FocusMonitor, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n'id': [{ type: Input },],\n'name': [{ type: Input },],\n'checked': [{ type: Input },],\n'value': [{ type: Input },],\n'disabled': [{ type: Input },],\n'change': [{ type: Output },],\n};\n}\n\nfunction MdButtonToggle_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonToggle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonToggle.ctorParameters;\n/** @type {?} */\nMdButtonToggle.propDecorators;\n/**\n * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n * take precedence so this may be omitted.\n * @type {?}\n */\nMdButtonToggle.prototype.ariaLabel;\n/**\n * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n * @type {?}\n */\nMdButtonToggle.prototype.ariaLabelledby;\n/**\n * Whether or not this button toggle is checked.\n * @type {?}\n */\nMdButtonToggle.prototype._checked;\n/**\n * Type of the button toggle. Either 'radio' or 'checkbox'.\n * @type {?}\n */\nMdButtonToggle.prototype._type;\n/**\n * Whether or not this button toggle is disabled.\n * @type {?}\n */\nMdButtonToggle.prototype._disabled;\n/**\n * Value assigned to this button toggle.\n * @type {?}\n */\nMdButtonToggle.prototype._value;\n/**\n * Whether or not the button toggle is a single selection.\n * @type {?}\n */\nMdButtonToggle.prototype._isSingleSelector;\n/**\n * Unregister function for _buttonToggleDispatcher *\n * @type {?}\n */\nMdButtonToggle.prototype._removeUniqueSelectionListener;\n/** @type {?} */\nMdButtonToggle.prototype._inputElement;\n/**\n * The parent button toggle group (exclusive selection). Optional.\n * @type {?}\n */\nMdButtonToggle.prototype.buttonToggleGroup;\n/**\n * The parent button toggle group (multiple selection). Optional.\n * @type {?}\n */\nMdButtonToggle.prototype.buttonToggleGroupMultiple;\n/**\n * The unique ID for this button toggle.\n * @type {?}\n */\nMdButtonToggle.prototype.id;\n/**\n * HTML's 'name' attribute used to group radios for unique selection.\n * @type {?}\n */\nMdButtonToggle.prototype.name;\n/**\n * Event emitted when the group value changes.\n * @type {?}\n */\nMdButtonToggle.prototype.change;\n/** @type {?} */\nMdButtonToggle.prototype._changeDetectorRef;\n/** @type {?} */\nMdButtonToggle.prototype._buttonToggleDispatcher;\n/** @type {?} */\nMdButtonToggle.prototype._renderer;\n/** @type {?} */\nMdButtonToggle.prototype._elementRef;\n/** @type {?} */\nMdButtonToggle.prototype._focusMonitor;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdButtonModule,MdButtonCssMatStyler,MdRaisedButtonCssMatStyler,MdIconButtonCssMatStyler,MdFab,MdMiniFab,MdButtonBase,_MdButtonMixinBase,MdButton,MdAnchor,MatButton,MatButtonBase,MatButtonCssMatStyler,MatButtonModule,MatAnchor,MatIconButtonCssMatStyler,MatFab,MatMiniFab,MatRaisedButtonCssMatStyler} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdCommonModule, MdRippleModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {\n  MdAnchor,\n  MdButton,\n  MdMiniFab,\n  MdButtonCssMatStyler,\n  MdFab,\n  MdIconButtonCssMatStyler,\n  MdRaisedButtonCssMatStyler\n} from './button';\nexport class MdButtonModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    MdRippleModule,\n    MdCommonModule,\n    A11yModule,\n  ],\n  exports: [\n    MdButton,\n    MdAnchor,\n    MdMiniFab,\n    MdFab,\n    MdCommonModule,\n    MdButtonCssMatStyler,\n    MdRaisedButtonCssMatStyler,\n    MdIconButtonCssMatStyler,\n  ],\n  declarations: [\n    MdButton,\n    MdAnchor,\n    MdMiniFab,\n    MdFab,\n    MdButtonCssMatStyler,\n    MdRaisedButtonCssMatStyler,\n    MdIconButtonCssMatStyler,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdButtonModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MATERIAL_COMPATIBILITY_MODE,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n/**\n * Default color palette for round buttons (md-fab and md-mini-fab)\n */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdButtonCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[md-button], button[mat-button], a[md-button], a[mat-button]',\n  host: {'class': 'mat-button'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdButtonCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButtonCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdRaisedButtonCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'button[md-raised-button], button[mat-raised-button], ' +\n      'a[md-raised-button], a[mat-raised-button]',\n  host: {'class': 'mat-raised-button'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRaisedButtonCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRaisedButtonCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRaisedButtonCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdIconButtonCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector:\n      'button[md-icon-button], button[mat-icon-button], a[md-icon-button], a[mat-icon-button]',\n  host: {'class': 'mat-icon-button'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdIconButtonCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMdIconButtonCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdIconButtonCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MdFab {\n/**\n * @param {?} button\n * @param {?} anchor\n */\nconstructor(   button: MdButton,\n                 anchor: MdAnchor) {\n    // Set the default color palette for the md-fab components.\n    (button || anchor).color = DEFAULT_ROUND_BUTTON_COLOR;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[md-fab], button[mat-fab], a[md-fab], a[mat-fab]',\n  host: {'class': 'mat-fab'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdButton, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MdButton), ] }, ]},\n{type: MdAnchor, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MdAnchor), ] }, ]},\n];\n}\n\nfunction MdFab_tsickle_Closure_declarations() {\n/** @type {?} */\nMdFab.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdFab.ctorParameters;\n}\n\n/**\n * Directive that targets mini-fab buttons and anchors. It's used to apply the `mat-` class\n * to all mini-fab buttons and also is responsible for setting the default color palette.\n * \\@docs-private\n */\nexport class MdMiniFab {\n/**\n * @param {?} button\n * @param {?} anchor\n */\nconstructor(   button: MdButton,\n                 anchor: MdAnchor) {\n    // Set the default color palette for the md-mini-fab components.\n    (button || anchor).color = DEFAULT_ROUND_BUTTON_COLOR;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[md-mini-fab], button[mat-mini-fab], a[md-mini-fab], a[mat-mini-fab]',\n  host: {'class': 'mat-mini-fab'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MdButton, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MdButton), ] }, ]},\n{type: MdAnchor, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MdAnchor), ] }, ]},\n];\n}\n\nfunction MdMiniFab_tsickle_Closure_declarations() {\n/** @type {?} */\nMdMiniFab.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdMiniFab.ctorParameters;\n}\n\n/**\n * \\@docs-private\n */\nexport class MdButtonBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MdButtonBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButtonBase.prototype._renderer;\n/** @type {?} */\nMdButtonBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MdButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MdButtonBase)));\n/**\n * Material design button.\n */\nexport class MdButton extends _MdButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n/**\n * Whether the button is round.\n */\n_isRoundButton: boolean = this._hasAttributeWithPrefix('fab', 'mini-fab');\n/**\n * Whether the button is icon button.\n */\n_isIconButton: boolean = this._hasAttributeWithPrefix('icon-button');\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _platform\n * @param {?} _focusMonitor\n */\nconstructor(renderer: Renderer2,\n              elementRef: ElementRef,\nprivate _platform: Platform,\nprivate _focusMonitor: FocusMonitor) {\n    super(renderer, elementRef);\n    this._focusMonitor.monitor(this._elementRef.nativeElement, this._renderer, true);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n/**\n * Focuses the button.\n * @return {?}\n */\nfocus(): void {\n    this._getHostElement().focus();\n  }\n/**\n * @return {?}\n */\n_getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n/**\n * @return {?}\n */\n_isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n/**\n * Gets whether the button has one of the given attributes\n * with either an 'md-' or 'mat-' prefix.\n * @param {...?} unprefixedAttributeNames\n * @return {?}\n */\n_hasAttributeWithPrefix(...unprefixedAttributeNames: string[]) {\n    // If not on the browser, say that there are none of the attributes present.\n    // Since these only affect how the ripple displays (and ripples only happen on the client),\n    // detecting these attributes isn't necessary when not on the browser.\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    return unprefixedAttributeNames.some(suffix => {\n      const /** @type {?} */ el = this._getHostElement();\n\n      return el.hasAttribute('md-' + suffix) || el.hasAttribute('mat-' + suffix);\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: `button[md-button], button[md-raised-button], button[md-icon-button],\n             button[md-fab], button[md-mini-fab],\n             button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab]`,\n  host: {\n    '[disabled]': 'disabled || null',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: Platform, },\n{type: FocusMonitor, },\n];\n}\n\nfunction MdButton_tsickle_Closure_declarations() {\n/** @type {?} */\nMdButton.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdButton.ctorParameters;\n/**\n * Whether the button is round.\n * @type {?}\n */\nMdButton.prototype._isRoundButton;\n/**\n * Whether the button is icon button.\n * @type {?}\n */\nMdButton.prototype._isIconButton;\n/** @type {?} */\nMdButton.prototype._platform;\n/** @type {?} */\nMdButton.prototype._focusMonitor;\n}\n\n/**\n * Raised Material design button.\n */\nexport class MdAnchor extends MdButton {\n/**\n * @param {?} platform\n * @param {?} focusMonitor\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(\n      platform: Platform,\n      focusMonitor: FocusMonitor,\n      elementRef: ElementRef,\n      renderer: Renderer2) {\n    super(renderer, elementRef, platform, focusMonitor);\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: `a[md-button], a[md-raised-button], a[md-icon-button], a[md-fab], a[md-mini-fab],\n             a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab], a[mat-mini-fab]`,\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Platform, },\n{type: FocusMonitor, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\n}\n\nfunction MdAnchor_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAnchor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAnchor.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdAutocompleteSelectedEvent,MdAutocomplete,MdAutocompleteModule,AUTOCOMPLETE_OPTION_HEIGHT,AUTOCOMPLETE_PANEL_HEIGHT,MD_AUTOCOMPLETE_SCROLL_STRATEGY,MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,MD_AUTOCOMPLETE_VALUE_ACCESSOR,getMdAutocompleteMissingPanelError,MdAutocompleteTrigger,MAT_AUTOCOMPLETE_SCROLL_STRATEGY,MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,MAT_AUTOCOMPLETE_VALUE_ACCESSOR,MatAutocomplete,MatAutocompleteModule,MatAutocompleteTrigger} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MdOptionModule, MdCommonModule} from '@angular/material/core';\nimport {MdAutocomplete} from './autocomplete';\nimport {\n  MdAutocompleteTrigger,\n  MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,\n} from './autocomplete-trigger';\nexport class MdAutocompleteModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdOptionModule, OverlayModule, MdCommonModule, CommonModule],\n  exports: [MdAutocomplete, MdOptionModule, MdAutocompleteTrigger, MdCommonModule],\n  declarations: [MdAutocomplete, MdAutocompleteTrigger],\n  providers: [MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdAutocompleteModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocompleteModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocompleteModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  PositionStrategy,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter, first, map, RxChain, switchMap} from '@angular/cdk/rxjs';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {MdOption, MdOptionSelectionChange} from '@angular/material/core';\nimport {MdFormField} from '@angular/material/form-field';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MdAutocomplete} from './autocomplete';\n/**\n * The height of each autocomplete option.\n */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/**\n * The total height of the autocomplete panel.\n */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/**\n * Injection token that determines the scroll handling while the autocomplete panel is open.\n */\nexport const MD_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('md-autocomplete-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n/**\n * \\@docs-private\n */\nexport const MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER = {\n  provide: MD_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MD_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * \\@docs-private\n */\nexport const MD_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdAutocompleteTrigger),\n  multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @return {?}\n */\nexport function getMdAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `md-autocomplete`. ' +\n               'Make sure that the id passed to the `mdAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\nexport class MdAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\nprivate _overlayRef: OverlayRef | null;\nprivate _portal: TemplatePortal<any>;\nprivate _panelOpen: boolean = false;\n/**\n * Strategy that is used to position the panel.\n */\nprivate _positionStrategy: ConnectedPositionStrategy;\n/**\n * Whether or not the placeholder state is being overridden.\n */\nprivate _manuallyFloatingPlaceholder = false;\n/**\n * The subscription for closing actions (some are bound to document).\n */\nprivate _closingActionsSubscription: Subscription;\n/**\n * View -> model callback called when value changes\n */\n_onChange: (value: any) => void = () => {};\n/**\n * View -> model callback called when autocomplete has been touched\n */\n_onTouched = () => {};\n\n  /* The autocomplete panel to be attached to this trigger. */\n   autocomplete: MdAutocomplete;\n/**\n * Property with mat- prefix for no-conflict mode.\n * @return {?}\n */\nget _matAutocomplete(): MdAutocomplete {\n    return this.autocomplete;\n  }\n/**\n * @param {?} autocomplete\n * @return {?}\n */\nset _matAutocomplete(autocomplete: MdAutocomplete) {\n    this.autocomplete = autocomplete;\n  }\n/**\n * @param {?} _element\n * @param {?} _overlay\n * @param {?} _viewContainerRef\n * @param {?} _zone\n * @param {?} _changeDetectorRef\n * @param {?} _scrollStrategy\n * @param {?} _dir\n * @param {?} _formField\n * @param {?} _document\n */\nconstructor(private _element: ElementRef,\nprivate _overlay: Overlay,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _zone: NgZone,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _scrollStrategy,\nprivate _dir: Directionality,\nprivate _formField: MdFormField,\nprivate _document: any) {}\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._destroyPanel();\n  }\n/**\n * @return {?}\n */\nget panelOpen(): boolean {\n    return this._panelOpen && this.autocomplete.showPanel;\n  }\n/**\n * Opens the autocomplete suggestion panel.\n * @return {?}\n */\nopenPanel(): void {\n    this._attachOverlay();\n    this._floatPlaceholder();\n  }\n/**\n * Closes the autocomplete suggestion panel.\n * @return {?}\n */\nclosePanel(): void {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    this._resetPlaceholder();\n\n    if (this._panelOpen) {\n      this._panelOpen = false;\n\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the placeholder is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n/**\n * A stream of actions that should close the autocomplete panel, including\n * when an option is selected, on blur, and when TAB is pressed.\n * @return {?}\n */\nget panelClosingActions(): Observable<MdOptionSelectionChange> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut,\n      this._outsideClickStream\n    );\n  }\n/**\n * Stream of autocomplete option selections.\n * @return {?}\n */\nget optionSelections(): Observable<MdOptionSelectionChange> {\n    return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n  }\n/**\n * The currently active option, coerced to MdOption type.\n * @return {?}\n */\nget activeOption(): MdOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n/**\n * Stream of clicks outside of the autocomplete panel.\n * @return {?}\n */\nprivate get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return RxChain.from(merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )).call(filter, (event: MouseEvent | TouchEvent) => {\n      const /** @type {?} */ clickTarget = /** @type {?} */(( event.target as HTMLElement));\n      const /** @type {?} */ formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._panelOpen &&\n             clickTarget !== this._element.nativeElement &&\n             (!formField || !formField.contains(clickTarget)) &&\n             (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }).result();\n  }\n/**\n * Sets the autocomplete's value. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} value New value to be written to the model.\n * @return {?}\n */\nwriteValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n/**\n * Saves a callback function to be invoked when the autocomplete's value\n * changes from user input. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the value changes.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n/**\n * Saves a callback function to be invoked when the autocomplete is blurred\n * by the user. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the component has been touched.\n * @return {?}\n */\nregisterOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ESCAPE && this.panelOpen) {\n      this._resetActiveItem();\n      this.closePanel();\n      event.stopPropagation();\n    } else if (this.activeOption && event.keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const /** @type {?} */ prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const /** @type {?} */ isArrowKey = event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW;\n\n      if (this.panelOpen) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey) {\n        this.openPanel();\n      }\n\n      Promise.resolve().then(() => {\n        if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n          this._scrollToOption();\n        }\n      });\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleInput(event: KeyboardEvent): void {\n    // We need to ensure that the input is focused, because IE will fire the `input`\n    // event on focus/blur/load if the input has a placeholder. See:\n    // https://connect.microsoft.com/IE/feedback/details/885747/\n    if (document.activeElement === event.target) {\n      this._onChange(( /** @type {?} */((event.target as HTMLInputElement))).value);\n      this.openPanel();\n    }\n  }\n/**\n * @return {?}\n */\n_handleFocus(): void {\n    this._attachOverlay();\n    this._floatPlaceholder(true);\n  }\n/**\n * In \"auto\" mode, the placeholder will animate down as soon as focus is lost.\n * This causes the value to jump when selecting an option with the mouse.\n * This method manually floats the placeholder until the panel can be closed.\n * @param {?=} shouldAnimate Whether the placeholder should be animated when it is floated.\n * @return {?}\n */\nprivate _floatPlaceholder(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatPlaceholder === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockPlaceholder();\n      } else {\n        this._formField.floatPlaceholder = 'always';\n      }\n\n      this._manuallyFloatingPlaceholder = true;\n    }\n  }\n/**\n * If the placeholder has been manually elevated, return it to its normal state.\n * @return {?}\n */\nprivate _resetPlaceholder(): void  {\n    if (this._manuallyFloatingPlaceholder) {\n      this._formField.floatPlaceholder = 'auto';\n      this._manuallyFloatingPlaceholder = false;\n    }\n  }\n/**\n * Given that we are not actually focusing active options, we must manually adjust scroll\n * to reveal options below the fold. First, we find the offset of the option from the top\n * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n * the panel height + the option height, so the active option will be just visible at the\n * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n * will become the offset. If that offset is visible within the panel already, the scrollTop is\n * not adjusted.\n * @return {?}\n */\nprivate _scrollToOption(): void {\n    const /** @type {?} */ activeOptionIndex = this.autocomplete._keyManager.activeItemIndex || 0;\n    const /** @type {?} */ labelCount = MdOption.countGroupLabelsBeforeOption(activeOptionIndex,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n    const /** @type {?} */ optionOffset = (activeOptionIndex + labelCount) * AUTOCOMPLETE_OPTION_HEIGHT;\n    const /** @type {?} */ panelTop = this.autocomplete._getScrollTop();\n\n    if (optionOffset < panelTop) {\n      // Scroll up to reveal selected option scrolled above the panel top\n      this.autocomplete._setScrollTop(optionOffset);\n    } else if (optionOffset + AUTOCOMPLETE_OPTION_HEIGHT > panelTop + AUTOCOMPLETE_PANEL_HEIGHT) {\n      // Scroll down to reveal selected option scrolled below the panel bottom\n      const /** @type {?} */ newScrollTop =\n          Math.max(0, optionOffset - AUTOCOMPLETE_PANEL_HEIGHT + AUTOCOMPLETE_OPTION_HEIGHT);\n      this.autocomplete._setScrollTop(newScrollTop);\n    }\n  }\n/**\n * This method listens to a stream of panel closing actions and resets the\n * stream every time the option list changes.\n * @return {?}\n */\nprivate _subscribeToClosingActions(): Subscription {\n    const /** @type {?} */ firstStable = first.call(this._zone.onStable.asObservable());\n    const /** @type {?} */ optionChanges = map.call(this.autocomplete.options.changes, () =>\n      this._positionStrategy.recalculateLastPosition());\n\n    // When the zone is stable initially, and when the option list changes...\n    return RxChain.from(merge(firstStable, optionChanges))\n      // create a new stream of panelClosingActions, replacing any previous streams\n      // that were created, and flatten it so our stream only emits closing events...\n      .call(switchMap, () => {\n        this._resetActiveItem();\n        this.autocomplete._setVisibility();\n        return this.panelClosingActions;\n      })\n      // when the first closing event occurs...\n      .call(first)\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n/**\n * Destroys the autocomplete suggestion panel.\n * @return {?}\n */\nprivate _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nprivate _setTriggerValue(value: any): void {\n    const /** @type {?} */ toDisplay = this.autocomplete.displayWith ? this.autocomplete.displayWith(value) : value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const /** @type {?} */ inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MdFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n/**\n * This method closes the panel, and if a value is specified, also sets the associated\n * control to that value. It will also mark the control as dirty if this interaction\n * stemmed from the user.\n * @param {?} event\n * @return {?}\n */\nprivate _setValueAndClose(event: MdOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n/**\n * Clear any previous selected option and emit a selection change event for this option\n * @param {?} skip\n * @return {?}\n */\nprivate _clearPreviousSelectedOption(skip: MdOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n/**\n * @return {?}\n */\nprivate _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMdAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.getState().width = this._getHostWidth();\n      this._overlayRef.updateSize();\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    this.autocomplete._setVisibility();\n    this._panelOpen = true;\n  }\n/**\n * @return {?}\n */\nprivate _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir ? this._dir.value : 'ltr'\n    });\n  }\n/**\n * @return {?}\n */\nprivate _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy =  this._overlay.position().connectedTo(\n        this._getConnectedElement(),\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\n        .withFallbackPosition(\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\n        );\n    return this._positionStrategy;\n  }\n/**\n * @return {?}\n */\nprivate _getConnectedElement(): ElementRef {\n    return this._formField ? this._formField._connectionContainerRef : this._element;\n  }\n/**\n * Returns the width of the input element, so the panel width can match it.\n * @return {?}\n */\nprivate _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n/**\n * Reset active item to -1 so arrow events will activate the correct options.\n * @return {?}\n */\nprivate _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(-1);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `input[mdAutocomplete], input[matAutocomplete],\n             textarea[mdAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    'aria-multiline': 'false',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  providers: [MD_AUTOCOMPLETE_VALUE_ACCESSOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Overlay, },\n{type: ViewContainerRef, },\n{type: NgZone, },\n{type: ChangeDetectorRef, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_AUTOCOMPLETE_SCROLL_STRATEGY, ] }, ]},\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: MdFormField, decorators: [{ type: Optional }, { type: Host }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'autocomplete': [{ type: Input, args: ['mdAutocomplete', ] },],\n'_matAutocomplete': [{ type: Input, args: ['matAutocomplete', ] },],\n};\n}\n\nfunction MdAutocompleteTrigger_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocompleteTrigger.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocompleteTrigger.ctorParameters;\n/** @type {?} */\nMdAutocompleteTrigger.propDecorators;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._overlayRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._portal;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._panelOpen;\n/**\n * Strategy that is used to position the panel.\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._positionStrategy;\n/**\n * Whether or not the placeholder state is being overridden.\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._manuallyFloatingPlaceholder;\n/**\n * The subscription for closing actions (some are bound to document).\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._closingActionsSubscription;\n/**\n * View -> model callback called when value changes\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._onChange;\n/**\n * View -> model callback called when autocomplete has been touched\n * @type {?}\n */\nMdAutocompleteTrigger.prototype._onTouched;\n/** @type {?} */\nMdAutocompleteTrigger.prototype.autocomplete;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._element;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._overlay;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._viewContainerRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._zone;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._changeDetectorRef;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._scrollStrategy;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._dir;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._formField;\n/** @type {?} */\nMdAutocompleteTrigger.prototype._document;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n} from '@angular/core';\nimport {MdOption, MdOptgroup} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n/**\n * Event object that is emitted when an autocomplete option is selected\n */\nexport class MdAutocompleteSelectedEvent {\n/**\n * @param {?} source\n * @param {?} option\n */\nconstructor(public source: MdAutocomplete,\npublic option: MdOption) { }\n}\n\nfunction MdAutocompleteSelectedEvent_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocompleteSelectedEvent.prototype.source;\n/** @type {?} */\nMdAutocompleteSelectedEvent.prototype.option;\n}\n\nexport class MdAutocomplete implements AfterContentInit {\n/**\n * Manages active item in option list based on key events.\n */\n_keyManager: ActiveDescendantKeyManager<MdOption>;\n/**\n * Whether the autocomplete panel should be visible, depending on option length.\n */\nshowPanel = false;\n/**\n * \\@docs-private\n */\ntemplate: TemplateRef<any>;\n/**\n * Element for the panel containing the autocomplete options.\n */\npanel: ElementRef;\n/**\n * \\@docs-private\n */\noptions: QueryList<MdOption>;\n/**\n * \\@docs-private\n */\noptionGroups: QueryList<MdOptgroup>;\n/**\n * Function that maps an option's control value to its display value in the trigger.\n */\ndisplayWith: ((value: any) => string) | null = null;\n/**\n * Event that is emitted whenever an option from the list is selected.\n */\noptionSelected: EventEmitter<MdAutocompleteSelectedEvent> =\n      new EventEmitter<MdAutocompleteSelectedEvent>();\n/**\n * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n */\nid: string = `md-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n/**\n * @param {?} _changeDetectorRef\n */\nconstructor(private _changeDetectorRef: ChangeDetectorRef) { }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MdOption>(this.options).withWrap();\n  }\n/**\n * Sets the panel scrollTop. This allows us to manually scroll to display options\n * above or below the fold, as they are not actually being focused when active.\n * @param {?} scrollTop\n * @return {?}\n */\n_setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n/**\n * Returns the panel's scrollTop.\n * @return {?}\n */\n_getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n/**\n * Panel should hide itself when the option list is empty.\n * @return {?}\n */\n_setVisibility(): void {\n    Promise.resolve().then(() => {\n      this.showPanel = !!this.options.length;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n/**\n * Emits the `select` event.\n * @param {?} option\n * @return {?}\n */\n_emitSelectEvent(option: MdOption): void {\n    const /** @type {?} */ event = new MdAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n/**\n * Sets a class on the panel based on whether it is visible.\n * @return {?}\n */\n_getClassList() {\n    return {\n      'mat-autocomplete-visible': this.showPanel,\n      'mat-autocomplete-hidden': !this.showPanel\n    };\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-autocomplete, mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'mdAutocomplete, matAutocomplete',\n  host: {\n    'class': 'mat-autocomplete'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'template': [{ type: ViewChild, args: [TemplateRef, ] },],\n'panel': [{ type: ViewChild, args: ['panel', ] },],\n'options': [{ type: ContentChildren, args: [MdOption, { descendants: true }, ] },],\n'optionGroups': [{ type: ContentChildren, args: [MdOptgroup, ] },],\n'displayWith': [{ type: Input },],\n'optionSelected': [{ type: Output },],\n};\n}\n\nfunction MdAutocomplete_tsickle_Closure_declarations() {\n/** @type {?} */\nMdAutocomplete.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdAutocomplete.ctorParameters;\n/** @type {?} */\nMdAutocomplete.propDecorators;\n/**\n * Manages active item in option list based on key events.\n * @type {?}\n */\nMdAutocomplete.prototype._keyManager;\n/**\n * Whether the autocomplete panel should be visible, depending on option length.\n * @type {?}\n */\nMdAutocomplete.prototype.showPanel;\n/**\n * \\@docs-private\n * @type {?}\n */\nMdAutocomplete.prototype.template;\n/**\n * Element for the panel containing the autocomplete options.\n * @type {?}\n */\nMdAutocomplete.prototype.panel;\n/**\n * \\@docs-private\n * @type {?}\n */\nMdAutocomplete.prototype.options;\n/**\n * \\@docs-private\n * @type {?}\n */\nMdAutocomplete.prototype.optionGroups;\n/**\n * Function that maps an option's control value to its display value in the trigger.\n * @type {?}\n */\nMdAutocomplete.prototype.displayWith;\n/**\n * Event that is emitted whenever an option from the list is selected.\n * @type {?}\n */\nMdAutocomplete.prototype.optionSelected;\n/**\n * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n * @type {?}\n */\nMdAutocomplete.prototype.id;\n/** @type {?} */\nMdAutocomplete.prototype._changeDetectorRef;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MdFormFieldModule,MdError,MdFormField,MdFormFieldControl,getMdFormFieldPlaceholderConflictError,getMdFormFieldDuplicatedHintError,getMdFormFieldMissingControlError,MdHint,MdPlaceholder,MdPrefix,MdSuffix,MatFormFieldModule,MatError,MatFormField,MatFormFieldControl,MatHint,MatPlaceholder,MatPrefix,MatSuffix} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdError} from './error';\nimport {MdFormField} from './form-field';\nimport {MdHint} from './hint';\nimport {MdPlaceholder} from './placeholder';\nimport {MdPrefix} from './prefix';\nimport {MdSuffix} from './suffix';\nimport {CommonModule} from '@angular/common';\nimport {PlatformModule} from '@angular/material/core';\nexport class MdFormFieldModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [\n    MdError,\n    MdHint,\n    MdFormField,\n    MdPlaceholder,\n    MdPrefix,\n    MdSuffix,\n  ],\n  imports: [\n    CommonModule,\n    PlatformModule,\n  ],\n  exports: [\n    MdError,\n    MdHint,\n    MdFormField,\n    MdPlaceholder,\n    MdPrefix,\n    MdSuffix,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdFormFieldModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdFormFieldModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdFormFieldModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {first, startWith} from '@angular/cdk/rxjs';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  FloatPlaceholderType,\n  MD_PLACEHOLDER_GLOBAL_OPTIONS,\n  PlaceholderOptions,\n} from '@angular/material/core';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {MdError} from './error';\nimport {MdFormFieldControl} from './form-field-control';\nimport {\n  getMdFormFieldDuplicatedHintError,\n  getMdFormFieldMissingControlError,\n  getMdFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MdHint} from './hint';\nimport {MdPlaceholder} from './placeholder';\nimport {MdPrefix} from './prefix';\nimport {MdSuffix} from './suffix';\n\n\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Container for form controls that applies Material Design styling and behavior.\n */\nexport class MdFormField implements AfterViewInit, AfterContentInit, AfterContentChecked {\nprivate _placeholderOptions: PlaceholderOptions;\n/**\n * Color of the form field underline, based on the theme.\n */\ncolor: 'primary' | 'accent' | 'warn' = 'primary';\n/**\n * @deprecated Use `color` instead.\n * @return {?}\n */\nget dividerColor() { return this.color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset dividerColor(value) { this.color = value; }\n/**\n * Whether the required marker should be hidden.\n * @return {?}\n */\nget hideRequiredMarker() { return this._hideRequiredMarker; }\n/**\n * @param {?} value\n * @return {?}\n */\nset hideRequiredMarker(value: any) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\nprivate _hideRequiredMarker: boolean;\n/**\n * Override for the logic that disables the placeholder animation in certain cases.\n */\nprivate _showAlwaysAnimate = false;\n/**\n * Whether the floating label should always float or not.\n * @return {?}\n */\nget _shouldAlwaysFloat() {\n    return this._floatPlaceholder === 'always' && !this._showAlwaysAnimate;\n  }\n/**\n * Whether the placeholder can float or not.\n * @return {?}\n */\nget _canPlaceholderFloat() { return this._floatPlaceholder !== 'never'; }\n/**\n * State of the md-hint and md-error animations.\n */\n_subscriptAnimationState: string = '';\n/**\n * Text for the form field hint.\n * @return {?}\n */\nget hintLabel() { return this._hintLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\nprivate _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `md-hint-${nextUniqueId++}`;\n/**\n * Whether the placeholder should always float, never float or float as the user types.\n * @return {?}\n */\nget floatPlaceholder() { return this._floatPlaceholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset floatPlaceholder(value: FloatPlaceholderType) {\n    if (value !== this._floatPlaceholder) {\n      this._floatPlaceholder = value || this._placeholderOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\nprivate _floatPlaceholder: FloatPlaceholderType;\n/**\n * Reference to the form field's underline element.\n */\nunderlineRef: ElementRef;\n   _connectionContainerRef: ElementRef;\nprivate _placeholder: ElementRef;\n   _control: MdFormFieldControl<any>;\n   _placeholderChild: MdPlaceholder;\n   _errorChildren: QueryList<MdError>;\n   _hintChildren: QueryList<MdHint>;\n   _prefixChildren: QueryList<MdPrefix>;\n   _suffixChildren: QueryList<MdSuffix>;\n/**\n * @param {?} _elementRef\n * @param {?} _changeDetectorRef\n * @param {?} placeholderOptions\n */\nconstructor(\npublic _elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\n        placeholderOptions: PlaceholderOptions) {\n    this._placeholderOptions = placeholderOptions ? placeholderOptions : {};\n    this.floatPlaceholder = this._placeholderOptions.float || 'auto';\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._validateControlChild();\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    startWith.call(this._control.stateChanges, null).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    let /** @type {?} */ ngControl = this._control.ngControl;\n    if (ngControl && ngControl.valueChanges) {\n      ngControl.valueChanges.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Re-validate when the number of hints changes.\n    startWith.call(this._hintChildren.changes, null).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    startWith.call(this._errorChildren.changes, null).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n/**\n * @return {?}\n */\nngAfterContentChecked() {\n    this._validateControlChild();\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n/**\n * Determines whether a class from the NgControl should be forwarded to the host element.\n * @param {?} prop\n * @return {?}\n */\n_shouldForward(prop: string): boolean {\n    let /** @type {?} */ ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ( /** @type {?} */((ngControl as any)))[prop];\n  }\n/**\n * Whether the form field has a placeholder.\n * @return {?}\n */\n_hasPlaceholder() {\n    return !!(this._control.placeholder || this._placeholderChild);\n  }\n/**\n * Determines whether to display hints or errors.\n * @return {?}\n */\n_getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n/**\n * Animates the placeholder up and locks it in position.\n * @return {?}\n */\n_animateAndLockPlaceholder(): void {\n    if (this._placeholder && this._canPlaceholderFloat) {\n      this._showAlwaysAnimate = true;\n      this._floatPlaceholder = 'always';\n\n      first.call(fromEvent(this._placeholder.nativeElement, 'transitionend')).subscribe(() => {\n        this._showAlwaysAnimate = false;\n      });\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n * or child element with the `md-placeholder` directive).\n * @return {?}\n */\nprivate _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMdFormFieldPlaceholderConflictError();\n    }\n  }\n/**\n * Does any extra processing that is required when handling the hints.\n * @return {?}\n */\nprivate _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n/**\n * Ensure that there is a maximum of one of each `<md-hint>` alignment specified, with the\n * attribute being considered as `align=\"start\"`.\n * @return {?}\n */\nprivate _validateHints() {\n    if (this._hintChildren) {\n      let /** @type {?} */ startHint: MdHint;\n      let /** @type {?} */ endHint: MdHint;\n      this._hintChildren.forEach((hint: MdHint) => {\n        if (hint.align == 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMdFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align == 'end') {\n          if (endHint) {\n            throw getMdFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n/**\n * Sets the list of element IDs that describe the child control. This allows the control to update\n * its `aria-describedby` attribute accordingly.\n * @return {?}\n */\nprivate _syncDescribedByIds() {\n    if (this._control) {\n      let /** @type {?} */ ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let /** @type {?} */ startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let /** @type {?} */ endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(mdError => mdError.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n/**\n * Throws an error if the form field's control is missing.\n * @return {?}\n */\nprotected _validateControlChild() {\n    if (!this._control) {\n      throw getMdFormFieldMissingControlError();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  // TODO(mmalerba): the input-container selectors and classes are deprecated and will be removed.\n  selector: 'md-input-container, mat-input-container, md-form-field, mat-form-field',\n  templateUrl: 'form-field.html',\n  // MdInput is a directive and can't have styles, so we need to include its styles here.\n  // The MdInput styles are fairly minimal so it shouldn't be a big deal for people who aren't using\n  // MdInput.\n  styleUrls: ['form-field.css', '../input/input.css'],\n  animations: [\n    // TODO(mmalerba): Use angular animations for placeholder animation as well.\n    trigger('transitionMessages', [\n      state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n      transition('void => enter', [\n        style({ opacity: 0, transform: 'translateY(-100%)' }),\n        animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n      ]),\n    ]),\n  ],\n  host: {\n    'class': 'mat-input-container mat-form-field',\n    '[class.mat-input-invalid]': '_control.errorState',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-focused]': '_control.focused',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '(click)': '_control.focus()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_PLACEHOLDER_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'color': [{ type: Input },],\n'dividerColor': [{ type: Input },],\n'hideRequiredMarker': [{ type: Input },],\n'hintLabel': [{ type: Input },],\n'floatPlaceholder': [{ type: Input },],\n'underlineRef': [{ type: ViewChild, args: ['underline', ] },],\n'_connectionContainerRef': [{ type: ViewChild, args: ['connectionContainer', ] },],\n'_placeholder': [{ type: ViewChild, args: ['placeholder', ] },],\n'_control': [{ type: ContentChild, args: [MdFormFieldControl, ] },],\n'_placeholderChild': [{ type: ContentChild, args: [MdPlaceholder, ] },],\n'_errorChildren': [{ type: ContentChildren, args: [MdError, ] },],\n'_hintChildren': [{ type: ContentChildren, args: [MdHint, ] },],\n'_prefixChildren': [{ type: ContentChildren, args: [MdPrefix, ] },],\n'_suffixChildren': [{ type: ContentChildren, args: [MdSuffix, ] },],\n};\n}\n\nfunction MdFormField_tsickle_Closure_declarations() {\n/** @type {?} */\nMdFormField.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdFormField.ctorParameters;\n/** @type {?} */\nMdFormField.propDecorators;\n/** @type {?} */\nMdFormField.prototype._placeholderOptions;\n/**\n * Color of the form field underline, based on the theme.\n * @type {?}\n */\nMdFormField.prototype.color;\n/** @type {?} */\nMdFormField.prototype._hideRequiredMarker;\n/**\n * Override for the logic that disables the placeholder animation in certain cases.\n * @type {?}\n */\nMdFormField.prototype._showAlwaysAnimate;\n/**\n * State of the md-hint and md-error animations.\n * @type {?}\n */\nMdFormField.prototype._subscriptAnimationState;\n/** @type {?} */\nMdFormField.prototype._hintLabel;\n/** @type {?} */\nMdFormField.prototype._hintLabelId;\n/** @type {?} */\nMdFormField.prototype._floatPlaceholder;\n/**\n * Reference to the form field's underline element.\n * @type {?}\n */\nMdFormField.prototype.underlineRef;\n/** @type {?} */\nMdFormField.prototype._connectionContainerRef;\n/** @type {?} */\nMdFormField.prototype._placeholder;\n/** @type {?} */\nMdFormField.prototype._control;\n/** @type {?} */\nMdFormField.prototype._placeholderChild;\n/** @type {?} */\nMdFormField.prototype._errorChildren;\n/** @type {?} */\nMdFormField.prototype._hintChildren;\n/** @type {?} */\nMdFormField.prototype._prefixChildren;\n/** @type {?} */\nMdFormField.prototype._suffixChildren;\n/** @type {?} */\nMdFormField.prototype._elementRef;\n/** @type {?} */\nMdFormField.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive} from '@angular/core';\n/**\n * Suffix to be placed at the end of the form field.\n */\nexport class MdSuffix {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdSuffix], [matSuffix]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdSuffix_tsickle_Closure_declarations() {\n/** @type {?} */\nMdSuffix.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdSuffix.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive} from '@angular/core';\n/**\n * Prefix to be placed the the front of the form field.\n */\nexport class MdPrefix {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mdPrefix], [matPrefix]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPrefix_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPrefix.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPrefix.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive} from '@angular/core';\n/**\n * The floating placeholder for an `MdFormField`.\n */\nexport class MdPlaceholder {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-placeholder, mat-placeholder'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPlaceholder_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPlaceholder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPlaceholder.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Hint text to be shown underneath the form field control.\n */\nexport class MdHint {\n/**\n * Whether to align the hint label at the start or end of the line.\n */\nalign: 'start' | 'end' = 'start';\n/**\n * Unique ID for the hint. Used for the aria-describedby on the form field control.\n */\nid: string = `mat-hint-${nextUniqueId++}`;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-hint, mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'align': [{ type: Input },],\n'id': [{ type: Input },],\n};\n}\n\nfunction MdHint_tsickle_Closure_declarations() {\n/** @type {?} */\nMdHint.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdHint.ctorParameters;\n/** @type {?} */\nMdHint.propDecorators;\n/**\n * Whether to align the hint label at the start or end of the line.\n * @type {?}\n */\nMdHint.prototype.align;\n/**\n * Unique ID for the hint. Used for the aria-describedby on the form field control.\n * @type {?}\n */\nMdHint.prototype.id;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMdFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n/**\n * \\@docs-private\n * @param {?} align\n * @return {?}\n */\nexport function getMdFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMdFormFieldMissingControlError(): Error {\n  return Error('md-form-field must contain a MdFormFieldControl. ' +\n      'Did you forget to add mdInput to the native input or textarea element?');\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Observable} from 'rxjs/Observable';\nimport {NgControl} from '@angular/forms';\n/**\n * An interface which allows a control to work inside of a `MdFormField`.\n * @abstract\n */\nexport abstract class MdFormFieldControl<T> {\n/**\n * The value of the control.\n */\nvalue: T;\n/**\n * Stream that emits whenever the state of the control changes such that the parent `MdFormField`\n * needs to run change detection.\n */\nreadonly stateChanges: Observable<void>;\n/**\n * The element ID for this control.\n */\nreadonly id: string;\n/**\n * The placeholder for this control.\n */\nreadonly placeholder: string;\n/**\n * Gets the NgControl for this control.\n */\nreadonly ngControl: NgControl | null;\n/**\n * Whether the control is focused.\n */\nreadonly focused: boolean;\n/**\n * Whether the control is empty.\n */\nreadonly empty: boolean;\n/**\n * Whether the control is required.\n */\nreadonly required: boolean;\n/**\n * Whether the control is disabled.\n */\nreadonly disabled: boolean;\n/**\n * Whether the control is in an error state.\n */\nreadonly errorState: boolean;\n/**\n * Sets the list of element IDs that currently describe this control.\n * @abstract\n * @param {?} ids\n * @return {?}\n */\nsetDescribedByIds(ids: string[]) {}\n/**\n * Focuses this control.\n * @abstract\n * @return {?}\n */\nfocus() {}\n}\n\nfunction MdFormFieldControl_tsickle_Closure_declarations() {\n/**\n * The value of the control.\n * @type {?}\n */\nMdFormFieldControl.prototype.value;\n/**\n * Stream that emits whenever the state of the control changes such that the parent `MdFormField`\n * needs to run change detection.\n * @type {?}\n */\nMdFormFieldControl.prototype.stateChanges;\n/**\n * The element ID for this control.\n * @type {?}\n */\nMdFormFieldControl.prototype.id;\n/**\n * The placeholder for this control.\n * @type {?}\n */\nMdFormFieldControl.prototype.placeholder;\n/**\n * Gets the NgControl for this control.\n * @type {?}\n */\nMdFormFieldControl.prototype.ngControl;\n/**\n * Whether the control is focused.\n * @type {?}\n */\nMdFormFieldControl.prototype.focused;\n/**\n * Whether the control is empty.\n * @type {?}\n */\nMdFormFieldControl.prototype.empty;\n/**\n * Whether the control is required.\n * @type {?}\n */\nMdFormFieldControl.prototype.required;\n/**\n * Whether the control is disabled.\n * @type {?}\n */\nMdFormFieldControl.prototype.disabled;\n/**\n * Whether the control is in an error state.\n * @type {?}\n */\nMdFormFieldControl.prototype.errorState;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Single error message to be shown underneath the form field.\n */\nexport class MdError {\n   id: string = `mat-error-${nextUniqueId++}`;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'md-error, mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n};\n}\n\nfunction MdError_tsickle_Closure_declarations() {\n/** @type {?} */\nMdError.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdError.ctorParameters;\n/** @type {?} */\nMdError.propDecorators;\n/** @type {?} */\nMdError.prototype.id;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {A11yModule} from '@angular/cdk/a11y';\n/**\n * @deprecated\n */\nexport class StyleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [A11yModule],\n  exports: [A11yModule],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StyleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nStyleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStyleModule.ctorParameters;\n}\n\n\nexport {\n  CdkMonitorFocus,\n  FocusMonitor,\n  FOCUS_MONITOR_PROVIDER,\n  FocusOrigin,\n} from '@angular/cdk/a11y';\nexport {applyCssTransform} from './apply-transform';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Applies a CSS transform to an element, including browser-prefixed properties.\n * @param {?} element\n * @param {?} transformValue\n * @return {?}\n */\nexport function applyCssTransform(element: HTMLElement, transformValue: string) {\n  // It's important to trim the result, because the browser will ignore the set operation\n  // if the string contains only whitespace.\n  let /** @type {?} */ value = transformValue.trim();\n\n  element.style.transform = value;\n  element.style.webkitTransform = value;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injector} from '@angular/core';\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * \\@docs-private\n */\nexport class PortalInjector implements Injector {\n/**\n * @param {?} _parentInjector\n * @param {?} _customTokens\n */\nconstructor(\nprivate _parentInjector: Injector,\nprivate _customTokens: WeakMap<any, any>) { }\n/**\n * @param {?} token\n * @param {?=} notFoundValue\n * @return {?}\n */\nget(token: any, notFoundValue?: any): any {\n    const /** @type {?} */ value = this._customTokens.get(token);\n\n    if (typeof value !== 'undefined') {\n      return value;\n    }\n\n    return this._parentInjector.get<any>(token, notFoundValue);\n  }\n}\n\nfunction PortalInjector_tsickle_Closure_declarations() {\n/** @type {?} */\nPortalInjector.prototype._parentInjector;\n/** @type {?} */\nPortalInjector.prototype._customTokens;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MdRippleModule} from '../ripple/index';\nimport {MdPseudoCheckboxModule} from '../selection/index';\nimport {MdOption} from './option';\nimport {MdOptgroup} from './optgroup';\nexport class MdOptionModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdRippleModule, CommonModule, MdPseudoCheckboxModule],\n  exports: [MdOption, MdOptgroup],\n  declarations: [MdOption, MdOptgroup]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdOptionModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptionModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOptionModule.ctorParameters;\n}\n\n\n\nexport {MdOptionSelectionChange,MdOption} from './option';\nexport {MdOptgroupBase,_MdOptgroupMixinBase,MdOptgroup} from './optgroup';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  Optional,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  QueryList,\n} from '@angular/core';\nimport {ENTER, SPACE} from '../keyboard/keycodes';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MATERIAL_COMPATIBILITY_MODE} from '../compatibility/compatibility';\nimport {MdOptgroup} from './optgroup';\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n/**\n * Event object emitted by MdOption when selected or deselected.\n */\nexport class MdOptionSelectionChange {\n/**\n * @param {?} source\n * @param {?=} isUserInput\n */\nconstructor(public source: MdOption,\npublic isUserInput = false) { }\n}\n\nfunction MdOptionSelectionChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptionSelectionChange.prototype.source;\n/** @type {?} */\nMdOptionSelectionChange.prototype.isUserInput;\n}\n\n/**\n * Single option inside of a `<md-select>` element.\n */\nexport class MdOption {\nprivate _selected: boolean = false;\nprivate _active: boolean = false;\nprivate _multiple: boolean = false;\nprivate _disableRipple: boolean = false;\n/**\n * Whether the option is disabled.\n */\nprivate _disabled: boolean = false;\nprivate _id: string = `md-option-${_uniqueIdCounter++}`;\n/**\n * Whether the wrapping component is in multiple selection mode.\n * @return {?}\n */\nget multiple() { return this._multiple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset multiple(value: boolean) {\n    if (value !== this._multiple) {\n      this._multiple = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * The unique ID of the option.\n * @return {?}\n */\nget id() { return this._id; }\n/**\n * Whether or not the option is currently selected.\n * @return {?}\n */\nget selected(): boolean { return this._selected; }\n/**\n * The form value of the option.\n */\nvalue: any;\n/**\n * Whether the option is disabled.\n * @return {?}\n */\nget disabled() { return (this.group && this.group.disabled) || this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Whether ripples for the option are disabled.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) {\n    this._disableRipple = value;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Event emitted when the option is selected or deselected.\n */\nonSelectionChange = new EventEmitter<MdOptionSelectionChange>();\n/**\n * @param {?} _element\n * @param {?} _changeDetectorRef\n * @param {?} group\n */\nconstructor(\nprivate _element: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\npublic readonly group: MdOptgroup) {}\n/**\n * Whether or not the option is currently active and ready to be selected.\n * An active option displays styles as if it is focused, but the\n * focus is actually retained somewhere else. This comes in handy\n * for components like autocomplete where focus must remain on the input.\n * @return {?}\n */\nget active(): boolean {\n    return this._active;\n  }\n/**\n * The displayed value of the option. It is necessary to show the selected option in the\n * select's trigger.\n * @return {?}\n */\nget viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n/**\n * Selects the option.\n * @return {?}\n */\nselect(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n/**\n * Deselects the option.\n * @return {?}\n */\ndeselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n/**\n * Sets focus onto this option.\n * @return {?}\n */\nfocus(): void {\n    const /** @type {?} */ element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n/**\n * This method sets display styles on the option to make it appear\n * active. This is used by the ActiveDescendantKeyManager so key\n * events will display the proper options as active on arrow key events.\n * @return {?}\n */\nsetActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * This method removes display styles on the option that made it appear\n * active. This is used by the ActiveDescendantKeyManager so key\n * events will display the proper options as active on arrow key events.\n * @return {?}\n */\nsetInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * Gets the label to be used when determining whether the option should be focused.\n * @return {?}\n */\ngetLabel(): string {\n    return this.viewValue;\n  }\n/**\n * Ensures the option is selected when activated from the keyboard.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n/**\n * Selects the option while indicating the selection came from the user. Used to\n * determine if the select's view -> model callback should be invoked.\n * @return {?}\n */\n_selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n/**\n * Returns the correct tabindex for the option depending on disabled state.\n * @return {?}\n */\n_getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n/**\n * Gets the host DOM element.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n/**\n * Emits the selection change event.\n * @param {?=} isUserInput\n * @return {?}\n */\nprivate _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MdOptionSelectionChange(this, isUserInput));\n  }\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param {?} optionIndex Index of the option at which to start counting.\n * @param {?} options Flat list of all of the options.\n * @param {?} optionGroups Flat list of all of the option groups.\n * @return {?}\n */\nstatic countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MdOption>,\n    optionGroups: QueryList<MdOptgroup>): number {\n\n    if (optionGroups.length) {\n      let /** @type {?} */ optionsArray = options.toArray();\n      let /** @type {?} */ groups = optionGroups.toArray();\n      let /** @type {?} */ groupCounter = 0;\n\n      for (let /** @type {?} */ i = 0; i < optionIndex + 1; i++) {\n        if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n          groupCounter++;\n        }\n      }\n\n      return groupCounter;\n    }\n\n    return 0;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-option, mat-option',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  viewProviders: [{provide: MATERIAL_COMPATIBILITY_MODE, useValue: true}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: MdOptgroup, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'value': [{ type: Input },],\n'disabled': [{ type: Input },],\n'onSelectionChange': [{ type: Output },],\n};\n}\n\nfunction MdOption_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOption.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOption.ctorParameters;\n/** @type {?} */\nMdOption.propDecorators;\n/** @type {?} */\nMdOption.prototype._selected;\n/** @type {?} */\nMdOption.prototype._active;\n/** @type {?} */\nMdOption.prototype._multiple;\n/** @type {?} */\nMdOption.prototype._disableRipple;\n/**\n * Whether the option is disabled.\n * @type {?}\n */\nMdOption.prototype._disabled;\n/** @type {?} */\nMdOption.prototype._id;\n/**\n * The form value of the option.\n * @type {?}\n */\nMdOption.prototype.value;\n/**\n * Event emitted when the option is selected or deselected.\n * @type {?}\n */\nMdOption.prototype.onSelectionChange;\n/** @type {?} */\nMdOption.prototype._element;\n/** @type {?} */\nMdOption.prototype._changeDetectorRef;\n/** @type {?} */\nMdOption.prototype.group;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n/**\n * \\@docs-private\n */\nexport class MdOptgroupBase { }\nexport const /** @type {?} */ _MdOptgroupMixinBase = mixinDisabled(MdOptgroupBase);\n\n// Counter for unique group ids.\nlet /** @type {?} */ _uniqueOptgroupIdCounter = 0;\n/**\n * Component that is used to group instances of `md-option`.\n */\nexport class MdOptgroup extends _MdOptgroupMixinBase implements CanDisable {\n/**\n * Label for the option group.\n */\nlabel: string;\n/**\n * Unique id for the underlying label.\n */\n_labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'md-optgroup, mat-optgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'label': [{ type: Input },],\n};\n}\n\nfunction MdOptgroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMdOptgroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdOptgroup.ctorParameters;\n/** @type {?} */\nMdOptgroup.propDecorators;\n/**\n * Label for the option group.\n * @type {?}\n */\nMdOptgroup.prototype.label;\n/**\n * Unique id for the underlying label.\n * @type {?}\n */\nMdOptgroup.prototype._labelId;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MdPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\nexport class MdPseudoCheckboxModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [MdPseudoCheckbox],\n  declarations: [MdPseudoCheckbox]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPseudoCheckboxModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPseudoCheckboxModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPseudoCheckboxModule.ctorParameters;\n}\n\n\n\nexport {MdPseudoCheckboxState,MdPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MdPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n * \n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with <md-checkbox> and should *not* be used if the user would directly interact\n * with the checkbox. The pseudo-checkbox should only be used as an implementation detail of\n * more complex components that appropriately handle selected / checked state.\n * \\@docs-private\n */\nexport class MdPseudoCheckbox {\n/**\n * Display state of the checkbox.\n */\nstate: MdPseudoCheckboxState = 'unchecked';\n/**\n * Whether the checkbox is disabled.\n */\ndisabled: boolean = false;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'md-pseudo-checkbox, mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'state': [{ type: Input },],\n'disabled': [{ type: Input },],\n};\n}\n\nfunction MdPseudoCheckbox_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPseudoCheckbox.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPseudoCheckbox.ctorParameters;\n/** @type {?} */\nMdPseudoCheckbox.propDecorators;\n/**\n * Display state of the checkbox.\n * @type {?}\n */\nMdPseudoCheckbox.prototype.state;\n/**\n * Whether the checkbox is disabled.\n * @type {?}\n */\nMdPseudoCheckbox.prototype.disabled;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MdCommonModule} from '../common-behaviors/common-module';\nimport {MdRipple} from './ripple';\n\nexport {MdRipple, RippleGlobalOptions, MD_RIPPLE_GLOBAL_OPTIONS} from './ripple';\nexport {RippleRef, RippleState} from './ripple-ref';\nexport {RippleConfig, RIPPLE_FADE_IN_DURATION, RIPPLE_FADE_OUT_DURATION} from './ripple-renderer';\nexport class MdRippleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule, PlatformModule, ScrollDispatchModule],\n  exports: [MdRipple, MdCommonModule],\n  declarations: [MdRipple],\n  providers: [VIEWPORT_RULER_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdRippleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRippleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRippleModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  Inject,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy,\n  InjectionToken,\n  Optional,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {Platform} from '@angular/cdk/platform';\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\nimport {RippleRef} from './ripple-ref';\n\nexport interface RippleGlobalOptions {\n  disabled?: boolean;\n  baseSpeedFactor?: number;\n}\n/**\n * Injection token that can be used to specify the global ripple options.\n */\nexport const MD_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('md-ripple-global-options');\nexport class MdRipple implements OnChanges, OnDestroy {\n\n  /**\n   * The element that triggers the ripple when click events are received. Defaults to the\n   * directive's host element.\n   */\n  // Prevent TS metadata emit from referencing HTMLElement in ripple.js\n  // Otherwise running this code in a Node environment (e.g Universal) will not work.\n   trigger: HTMLElement|HTMLElement;\n/**\n * Whether the ripple always originates from the center of the host element's bounds, rather\n * than originating from the location of the click event.\n */\ncentered: boolean;\n/**\n * Whether click events will not trigger the ripple. Ripples can be still launched manually\n * by using the `launch()` method.\n */\ndisabled: boolean;\n/**\n * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n * will be the distance from the center of the ripple to the furthest corner of the host element's\n * bounding rectangle.\n */\nradius: number = 0;\n/**\n * If set, the normal duration of ripple animations is divided by this value. For example,\n * setting it to 0.5 will cause the animations to take twice as long.\n * A changed speedFactor will not modify the fade-out duration of the ripples.\n */\nspeedFactor: number = 1;\n/**\n * Custom color for ripples.\n */\ncolor: string;\n/**\n * Whether foreground ripples should be visible outside the component's bounds.\n */\nunbounded: boolean;\n/**\n * @return {?}\n */\nget _matRippleTrigger() { return this.trigger; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleTrigger(v) { this.trigger = v; }\n/**\n * @return {?}\n */\nget _matRippleCentered() { return this.centered; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleCentered(v) { this.centered = v; }\n/**\n * @return {?}\n */\nget _matRippleDisabled() { return this.disabled; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleDisabled(v) { this.disabled = v; }\n/**\n * @return {?}\n */\nget _matRippleRadius() { return this.radius; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleRadius(v) { this.radius = v; }\n/**\n * @return {?}\n */\nget _matRippleSpeedFactor() { return this.speedFactor; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleSpeedFactor(v) { this.speedFactor = v; }\n/**\n * @return {?}\n */\nget _matRippleColor() { return this.color; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleColor(v) { this.color = v; }\n/**\n * @return {?}\n */\nget _matRippleUnbounded() { return this.unbounded; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _matRippleUnbounded(v) { this.unbounded = v; }\n/**\n * Renderer for the ripple DOM manipulations.\n */\nprivate _rippleRenderer: RippleRenderer;\n/**\n * Options that are set globally for all ripples.\n */\nprivate _globalOptions: RippleGlobalOptions;\n/**\n * @param {?} elementRef\n * @param {?} ngZone\n * @param {?} ruler\n * @param {?} platform\n * @param {?} globalOptions\n */\nconstructor(\n    elementRef: ElementRef,\n    ngZone: NgZone,\n    ruler: ViewportRuler,\n    platform: Platform,\n      globalOptions: RippleGlobalOptions\n  ) {\n    this._rippleRenderer = new RippleRenderer(elementRef, ngZone, ruler, platform);\n    this._globalOptions = globalOptions ? globalOptions : {};\n\n    this._updateRippleRenderer();\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    if ((changes['trigger'] || changes['_matRippleTrigger']) && this.trigger) {\n      this._rippleRenderer.setTriggerElement(this.trigger);\n    }\n\n    this._updateRippleRenderer();\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    // Set the trigger element to null to cleanup all listeners.\n    this._rippleRenderer.setTriggerElement(null);\n  }\n/**\n * Launches a manual ripple at the specified position.\n * @param {?} pageX\n * @param {?} pageY\n * @param {?=} config\n * @return {?}\n */\nlaunch(pageX: number, pageY: number, config = this.rippleConfig): RippleRef {\n    return this._rippleRenderer.fadeInRipple(pageX, pageY, config);\n  }\n/**\n * Fades out all currently showing ripple elements.\n * @return {?}\n */\nfadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n/**\n * Ripple configuration from the directive's input values.\n * @return {?}\n */\nget rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n      radius: this.radius,\n      color: this.color\n    };\n  }\n/**\n * Updates the ripple renderer with the latest ripple configuration.\n * @return {?}\n */\n_updateRippleRenderer() {\n    this._rippleRenderer.rippleDisabled = this._globalOptions.disabled || this.disabled;\n    this._rippleRenderer.rippleConfig = this.rippleConfig;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-ripple], [mat-ripple], [mdRipple], [matRipple]',\n  exportAs: 'mdRipple, matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: ViewportRuler, },\n{type: Platform, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MD_RIPPLE_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'trigger': [{ type: Input, args: ['mdRippleTrigger', ] },],\n'centered': [{ type: Input, args: ['mdRippleCentered', ] },],\n'disabled': [{ type: Input, args: ['mdRippleDisabled', ] },],\n'radius': [{ type: Input, args: ['mdRippleRadius', ] },],\n'speedFactor': [{ type: Input, args: ['mdRippleSpeedFactor', ] },],\n'color': [{ type: Input, args: ['mdRippleColor', ] },],\n'unbounded': [{ type: Input, args: ['mdRippleUnbounded', ] },],\n'_matRippleTrigger': [{ type: Input, args: ['matRippleTrigger', ] },],\n'_matRippleCentered': [{ type: Input, args: ['matRippleCentered', ] },],\n'_matRippleDisabled': [{ type: Input, args: ['matRippleDisabled', ] },],\n'_matRippleRadius': [{ type: Input, args: ['matRippleRadius', ] },],\n'_matRippleSpeedFactor': [{ type: Input, args: ['matRippleSpeedFactor', ] },],\n'_matRippleColor': [{ type: Input, args: ['matRippleColor', ] },],\n'_matRippleUnbounded': [{ type: Input, args: ['matRippleUnbounded', ] },],\n};\n}\n\nfunction MdRipple_tsickle_Closure_declarations() {\n/** @type {?} */\nMdRipple.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdRipple.ctorParameters;\n/** @type {?} */\nMdRipple.propDecorators;\n/** @type {?} */\nMdRipple.prototype.trigger;\n/**\n * Whether the ripple always originates from the center of the host element's bounds, rather\n * than originating from the location of the click event.\n * @type {?}\n */\nMdRipple.prototype.centered;\n/**\n * Whether click events will not trigger the ripple. Ripples can be still launched manually\n * by using the `launch()` method.\n * @type {?}\n */\nMdRipple.prototype.disabled;\n/**\n * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n * will be the distance from the center of the ripple to the furthest corner of the host element's\n * bounding rectangle.\n * @type {?}\n */\nMdRipple.prototype.radius;\n/**\n * If set, the normal duration of ripple animations is divided by this value. For example,\n * setting it to 0.5 will cause the animations to take twice as long.\n * A changed speedFactor will not modify the fade-out duration of the ripples.\n * @type {?}\n */\nMdRipple.prototype.speedFactor;\n/**\n * Custom color for ripples.\n * @type {?}\n */\nMdRipple.prototype.color;\n/**\n * Whether foreground ripples should be visible outside the component's bounds.\n * @type {?}\n */\nMdRipple.prototype.unbounded;\n/**\n * Renderer for the ripple DOM manipulations.\n * @type {?}\n */\nMdRipple.prototype._rippleRenderer;\n/**\n * Options that are set globally for all ripples.\n * @type {?}\n */\nMdRipple.prototype._globalOptions;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {RippleRef, RippleState} from './ripple-ref';\n/**\n * Fade-in duration for the ripples. Can be modified with the speedFactor option.\n */\nexport const RIPPLE_FADE_IN_DURATION = 450;\n/**\n * Fade-out duration for the ripples in milliseconds. This can't be modified by the speedFactor.\n */\nexport const RIPPLE_FADE_OUT_DURATION = 400;\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  speedFactor?: number;\n  persistent?: boolean;\n};\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * \\@docs-private\n */\nexport class RippleRenderer {\n/**\n * Element where the ripples are being added to.\n */\nprivate _containerElement: HTMLElement;\n/**\n * Element which triggers the ripple elements on mouse events.\n */\nprivate _triggerElement: HTMLElement | null;\n/**\n * Whether the mouse is currently down or not.\n */\nprivate _isMousedown: boolean = false;\n/**\n * Events to be registered on the trigger element.\n */\nprivate _triggerEvents = new Map<string, any>();\n/**\n * Set of currently active ripple references.\n */\nprivate _activeRipples = new Set<RippleRef>();\n/**\n * Ripple config for all ripples created by events.\n */\nrippleConfig: RippleConfig = {};\n/**\n * Whether mouse ripples should be created or not.\n */\nrippleDisabled: boolean = false;\n/**\n * @param {?} elementRef\n * @param {?} _ngZone\n * @param {?} _ruler\n * @param {?} platform\n */\nconstructor(\n      elementRef: ElementRef,\nprivate _ngZone: NgZone,\nprivate _ruler: ViewportRuler,\n      platform: Platform) {\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown.bind(this));\n      this._triggerEvents.set('mouseup', this.onMouseup.bind(this));\n      this._triggerEvents.set('mouseleave', this.onMouseLeave.bind(this));\n\n      // By default use the host element as trigger element.\n      this.setTriggerElement(this._containerElement);\n    }\n  }\n/**\n * Fades in a ripple at the given coordinates.\n * @param {?} pageX\n * @param {?} pageY\n * @param {?=} config\n * @return {?}\n */\nfadeInRipple(pageX: number, pageY: number, config: RippleConfig = {}): RippleRef {\n    let /** @type {?} */ containerRect = this._containerElement.getBoundingClientRect();\n\n    if (config.centered) {\n      pageX = containerRect.left + containerRect.width / 2;\n      pageY = containerRect.top + containerRect.height / 2;\n    } else {\n      // Subtract scroll values from the coordinates because calculations below\n      // are always relative to the viewport rectangle.\n      let /** @type {?} */ scrollPosition = this._ruler.getViewportScrollPosition();\n      pageX -= scrollPosition.left;\n      pageY -= scrollPosition.top;\n    }\n\n    let /** @type {?} */ radius = config.radius || distanceToFurthestCorner(pageX, pageY, containerRect);\n    let /** @type {?} */ duration = RIPPLE_FADE_IN_DURATION * (1 / (config.speedFactor || 1));\n    let /** @type {?} */ offsetX = pageX - containerRect.left;\n    let /** @type {?} */ offsetY = pageY - containerRect.top;\n\n    let /** @type {?} */ ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    let /** @type {?} */ rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isMousedown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n/**\n * Fades out a ripple reference.\n * @param {?} rippleRef\n * @return {?}\n */\nfadeOutRipple(rippleRef: RippleRef) {\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!this._activeRipples.delete(rippleRef)) {\n      return;\n    }\n\n    let /** @type {?} */ rippleEl = rippleRef.element;\n\n    rippleEl.style.transitionDuration = `${RIPPLE_FADE_OUT_DURATION}ms`;\n    rippleEl.style.opacity = '0';\n\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN; /** @type {?} */((\n      rippleEl.parentNode)).removeChild(rippleEl);\n    }, RIPPLE_FADE_OUT_DURATION);\n  }\n/**\n * Fades out all currently active ripples.\n * @return {?}\n */\nfadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n/**\n * Sets the trigger element and registers the mouse events.\n * @param {?} element\n * @return {?}\n */\nsetTriggerElement(element: HTMLElement | null) {\n    // Remove all previously register event listeners from the trigger element.\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => { /** @type {?} */((\n        this._triggerElement)).removeEventListener(type, fn);\n      });\n    }\n\n    if (element) {\n      // If the element is not null, register all event listeners on the trigger element.\n      this._ngZone.runOutsideAngular(() => {\n        this._triggerEvents.forEach((fn, type) => element.addEventListener(type, fn));\n      });\n    }\n\n    this._triggerElement = element;\n  }\n/**\n * Listener being called on mousedown event.\n * @param {?} event\n * @return {?}\n */\nprivate onMousedown(event: MouseEvent) {\n    if (!this.rippleDisabled) {\n      this._isMousedown = true;\n      this.fadeInRipple(event.pageX, event.pageY, this.rippleConfig);\n    }\n  }\n/**\n * Listener being called on mouseup event.\n * @return {?}\n */\nprivate onMouseup() {\n    this._isMousedown = false;\n\n    // Fade-out all ripples that are completely visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      if (!ripple.config.persistent && ripple.state === RippleState.VISIBLE) {\n        ripple.fadeOut();\n      }\n    });\n  }\n/**\n * Listener being called on mouseleave event.\n * @return {?}\n */\nprivate onMouseLeave() {\n    if (this._isMousedown) {\n      this.onMouseup();\n    }\n  }\n/**\n * Runs a timeout outside of the Angular zone to avoid triggering the change detection.\n * @param {?} fn\n * @param {?=} delay\n * @return {?}\n */\nprivate runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n}\n\nfunction RippleRenderer_tsickle_Closure_declarations() {\n/**\n * Element where the ripples are being added to.\n * @type {?}\n */\nRippleRenderer.prototype._containerElement;\n/**\n * Element which triggers the ripple elements on mouse events.\n * @type {?}\n */\nRippleRenderer.prototype._triggerElement;\n/**\n * Whether the mouse is currently down or not.\n * @type {?}\n */\nRippleRenderer.prototype._isMousedown;\n/**\n * Events to be registered on the trigger element.\n * @type {?}\n */\nRippleRenderer.prototype._triggerEvents;\n/**\n * Set of currently active ripple references.\n * @type {?}\n */\nRippleRenderer.prototype._activeRipples;\n/**\n * Ripple config for all ripples created by events.\n * @type {?}\n */\nRippleRenderer.prototype.rippleConfig;\n/**\n * Whether mouse ripples should be created or not.\n * @type {?}\n */\nRippleRenderer.prototype.rippleDisabled;\n/** @type {?} */\nRippleRenderer.prototype._ngZone;\n/** @type {?} */\nRippleRenderer.prototype._ruler;\n}\n\n/**\n * @param {?} element\n * @return {?}\n */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n * @param {?} x\n * @param {?} y\n * @param {?} rect\n * @return {?}\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const /** @type {?} */ distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const /** @type {?} */ distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\nexport type RippleState = number;\nexport let RippleState: any = {};\nRippleState.FADING_IN = 0;\nRippleState.VISIBLE = 1;\nRippleState.FADING_OUT = 2;\nRippleState.HIDDEN = 3;\nRippleState[RippleState.FADING_IN] = \"FADING_IN\";\nRippleState[RippleState.VISIBLE] = \"VISIBLE\";\nRippleState[RippleState.FADING_OUT] = \"FADING_OUT\";\nRippleState[RippleState.HIDDEN] = \"HIDDEN\";\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n/**\n * Current state of the ripple reference.\n */\nstate: RippleState = RippleState.HIDDEN;\n/**\n * @param {?} _renderer\n * @param {?} element\n * @param {?} config\n */\nconstructor(\nprivate _renderer: RippleRenderer,\npublic element: HTMLElement,\npublic config: RippleConfig) {\n  }\n/**\n * Fades out the ripple element.\n * @return {?}\n */\nfadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n\nfunction RippleRef_tsickle_Closure_declarations() {\n/**\n * Current state of the ripple reference.\n * @type {?}\n */\nRippleRef.prototype.state;\n/** @type {?} */\nRippleRef.prototype._renderer;\n/** @type {?} */\nRippleRef.prototype.element;\n/** @type {?} */\nRippleRef.prototype.config;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  NgModule,\n  Directive,\n  Renderer2,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MdCommonModule} from '../common-behaviors/common-module';\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a \\@ContentChildren(MdLine) query, then\n * counted by checking the query list's length.\n */\nexport class MdLine {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[md-line], [mat-line], [mdLine], [matLine]',\n  host: {'class': 'mat-line'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdLine_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLine.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdLine.ctorParameters;\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * \\@docs-private\n */\nexport class MdLineSetter {\n/**\n * @param {?} _lines\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _lines: QueryList<MdLine>,\nprivate _renderer: Renderer2,\nprivate _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n/**\n * @param {?} count\n * @return {?}\n */\nprivate _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n/**\n * @param {?} className\n * @param {?} isAdd\n * @return {?}\n */\nprivate _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._renderer.addClass(this._element.nativeElement, className);\n    } else {\n      this._renderer.removeClass(this._element.nativeElement, className);\n    }\n  }\n\n}\n\nfunction MdLineSetter_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLineSetter.prototype._lines;\n/** @type {?} */\nMdLineSetter.prototype._renderer;\n/** @type {?} */\nMdLineSetter.prototype._element;\n}\n\nexport class MdLineModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MdCommonModule],\n  exports: [MdLine, MdCommonModule],\n  declarations: [MdLine],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdLineModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdLineModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdLineModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, isDevMode} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {HammerStatic, HammerInstance, Recognizer, RecognizerStatic} from './gesture-annotations';\nexport class GestureConfig extends HammerGestureConfig {\nprivate _hammer: HammerStatic = typeof window !== 'undefined' ? ( /** @type {?} */((window as any))).Hammer : null;\n\n  /* List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\nconstructor() {\n    super();\n\n    if (!this._hammer && isDevMode()) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material ' +\n        'components may not work correctly.'\n      );\n    }\n  }\n/**\n * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n * \n * Our gesture names come from the Material Design gestures spec:\n * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n * \n * More information on default recognizers can be found in Hammer docs:\n * http://hammerjs.github.io/recognizer-pan/\n * http://hammerjs.github.io/recognizer-press/\n * \n * @param {?} element Element to which to assign the new HammerJS gestures.\n * @return {?} Newly-created HammerJS instance.\n */\nbuildHammer(element: HTMLElement): HammerInstance {\n    const /** @type {?} */ mc = new this._hammer(element);\n\n    // Default Hammer Recognizers.\n    let /** @type {?} */ pan = new this._hammer.Pan();\n    let /** @type {?} */ swipe = new this._hammer.Swipe();\n    let /** @type {?} */ press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    let /** @type {?} */ slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    let /** @type {?} */ longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return /** @type {?} */(( mc as HammerInstance));\n  }\n/**\n * Creates a new recognizer, without affecting the default recognizers of HammerJS\n * @param {?} base\n * @param {?} options\n * @param {...?} inheritances\n * @return {?}\n */\nprivate _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let /** @type {?} */ recognizer = new ( /** @type {?} */((base.constructor as RecognizerStatic)))(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction GestureConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nGestureConfig.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGestureConfig.ctorParameters;\n/** @type {?} */\nGestureConfig.prototype._hammer;\n/** @type {?} */\nGestureConfig.prototype.events;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {InjectionToken} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\n/**\n * Injection token that can be used to specify the global error options.\n */\nexport const MD_ERROR_GLOBAL_OPTIONS = new InjectionToken<ErrorOptions>('md-error-global-options');\n\nexport type ErrorStateMatcher =\n    (control: FormControl, form: FormGroupDirective | NgForm) => boolean;\n\nexport interface ErrorOptions {\n  errorStateMatcher?: ErrorStateMatcher;\n}\n/**\n * Returns whether control is invalid and is either touched or is a part of a submitted form.\n * @param {?} control\n * @param {?} form\n * @return {?}\n */\nexport function defaultErrorStateMatcher(control: FormControl, form: FormGroupDirective | NgForm) {\n  const /** @type {?} */ isSubmitted = form && form.submitted;\n  return !!(control.invalid && (control.touched || isSubmitted));\n}\n/**\n * Returns whether control is invalid and is either dirty or is a part of a submitted form.\n * @param {?} control\n * @param {?} form\n * @return {?}\n */\nexport function showOnDirtyErrorStateMatcher(control: FormControl,\n    form: FormGroupDirective | NgForm) {\n  const /** @type {?} */ isSubmitted = form && form.submitted;\n  return !!(control.invalid && (control.dirty || isSubmitted));\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE_PROVIDER} from './date-adapter';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MD_DATE_FORMATS} from './date-formats';\nimport {MD_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport {MAT_DATE_LOCALE,MAT_DATE_LOCALE_PROVIDER,DateAdapter} from './date-adapter';\nexport {MdDateFormats,MD_DATE_FORMATS} from './date-formats';\nexport {NativeDateAdapter} from './native-date-adapter';\nexport {MD_NATIVE_DATE_FORMATS} from './native-date-formats';\nexport class NativeDateModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n    MAT_DATE_LOCALE_PROVIDER\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NativeDateModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNativeDateModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNativeDateModule.ctorParameters;\n}\n\nexport class MdNativeDateModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [NativeDateModule],\n  providers: [{provide: MD_DATE_FORMATS, useValue: MD_NATIVE_DATE_FORMATS}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdNativeDateModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdNativeDateModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdNativeDateModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {MdDateFormats} from './date-formats';\n\n\nexport const /** @type {?} */ MD_NATIVE_DATE_FORMATS: MdDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\nimport {extendObject} from '../util/object-extend';\n/**\n * Whether the browser supports the Intl API.\n */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n/**\n * The default month names to use if Intl API is not available.\n */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n/**\n * The default date names to use if Intl API is not available.\n */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n/**\n * The default day of the week names to use if Intl API is not available.\n */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n/**\n * Creates an array and fills it with values.\n * @template T\n * @param {?} length\n * @param {?} valueFunction\n * @return {?}\n */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const /** @type {?} */ valuesArray = Array(length);\n  for (let /** @type {?} */ i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n/**\n * Adapts the native JS Date for use with cdk-based components that work with dates.\n */\nexport class NativeDateAdapter extends DateAdapter<Date> {\n/**\n * @param {?} matDateLocale\n */\nconstructor(  matDateLocale: string) {\n    super();\n    super.setLocale(matDateLocale);\n  }\n/**\n * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n * will produce `'8/13/1800'`.\n */\nuseUtcForDisplay = true;\n/**\n * @param {?} date\n * @return {?}\n */\ngetYear(date: Date): number {\n    return date.getFullYear();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetMonth(date: Date): number {\n    return date.getMonth();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetDate(date: Date): number {\n    return date.getDate();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n/**\n * @param {?} style\n * @return {?}\n */\ngetMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {month: style});\n      return range(12, i => this._stripDirectionalityCharacters(dtf.format(new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n/**\n * @return {?}\n */\ngetDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n/**\n * @param {?} style\n * @return {?}\n */\ngetDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {weekday: style});\n      return range(7, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric'});\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return String(this.getYear(date));\n  }\n/**\n * @return {?}\n */\ngetFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nclone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n/**\n * @param {?} year\n * @param {?} month\n * @param {?} date\n * @return {?}\n */\ncreateDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let /** @type {?} */ result = this._createDateWithOverflow(year, month, date);\n\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n/**\n * @return {?}\n */\ntoday(): Date {\n    return new Date();\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nparse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n/**\n * @param {?} date\n * @param {?} displayFormat\n * @return {?}\n */\nformat(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n    if (SUPPORTS_INTL_API) {\n      if (this.useUtcForDisplay) {\n        date = new Date(Date.UTC(\n            date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n            date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n        displayFormat = extendObject({}, displayFormat, {timeZone: 'utc'});\n      }\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n/**\n * @param {?} date\n * @param {?} years\n * @return {?}\n */\naddCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n/**\n * @param {?} date\n * @param {?} months\n * @return {?}\n */\naddCalendarMonths(date: Date, months: number): Date {\n    let /** @type {?} */ newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n/**\n * @param {?} date\n * @param {?} days\n * @return {?}\n */\naddCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ntoIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n/**\n * @param {?} iso8601String\n * @return {?}\n */\nfromIso8601(iso8601String: string): Date | null {\n    // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n    // string is the right format first.\n    if (ISO_8601_REGEX.test(iso8601String)) {\n      let /** @type {?} */ d = new Date(iso8601String);\n      if (this.isValid(d)) {\n        return d;\n      }\n    }\n    return null;\n  }\n/**\n * @param {?} obj\n * @return {?}\n */\nisDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nisValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n/**\n * Creates a date but allows the month and date to overflow.\n * @param {?} year\n * @param {?} month\n * @param {?} date\n * @return {?}\n */\nprivate _createDateWithOverflow(year: number, month: number, date: number) {\n    let /** @type {?} */ result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n/**\n * Pads a number to make it two digits.\n * @param {?} n The number to pad.\n * @return {?} The padded number.\n */\nprivate _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n/**\n * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n * other browsers do not. We remove them to make output consistent and because they interfere with\n * date parsing.\n * @param {?} str The string to strip direction characters from.\n * @return {?} The stripped string.\n */\nprivate _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_LOCALE, ] }, ]},\n];\n}\n\nfunction NativeDateAdapter_tsickle_Closure_declarations() {\n/** @type {?} */\nNativeDateAdapter.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNativeDateAdapter.ctorParameters;\n/**\n * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n * will produce `'8/13/1800'`.\n * @type {?}\n */\nNativeDateAdapter.prototype.useUtcForDisplay;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Extends an object with the *enumerable* and *own* properties of one or more source objects,\n * similar to Object.assign.\n * \n * @param {?} dest The object which will have properties copied to it.\n * @param {...?} sources The source objects from which properties will be copied.\n * @return {?}\n */\nexport function extendObject(dest: any, ...sources: any[]): any {\n  if (dest == null) {\n    throw TypeError('Cannot convert undefined or null to object');\n  }\n\n  for (let /** @type {?} */ source of sources) {\n    if (source != null) {\n      for (let /** @type {?} */ key in source) {\n        if (source.hasOwnProperty(key)) {\n          dest[key] = source[key];\n        }\n      }\n    }\n  }\n\n  return dest;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n/**\n * InjectionToken for datepicker that can be used to override default locale code.\n */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE');\n/**\n * Provider for MAT_DATE_LOCALE injection token.\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n/**\n * Adapts type `D` to be usable as a date by cdk-based components that work with dates.\n * @abstract\n */\nexport abstract class DateAdapter<D> {\n/**\n * The locale to use for all dates.\n */\nprotected locale: any;\n/**\n * A stream that emits when the locale changes.\n * @return {?}\n */\nget localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges= new Subject<void>();\n/**\n * Gets the year component of the given date.\n * @abstract\n * @param {?} date The date to extract the year from.\n * @return {?} The year component.\n */\ngetYear(date: D) {}\n/**\n * Gets the month component of the given date.\n * @abstract\n * @param {?} date The date to extract the month from.\n * @return {?} The month component (0-indexed, 0 = January).\n */\ngetMonth(date: D) {}\n/**\n * Gets the date of the month component of the given date.\n * @abstract\n * @param {?} date The date to extract the date of the month from.\n * @return {?} The month component (1-indexed, 1 = first of month).\n */\ngetDate(date: D) {}\n/**\n * Gets the day of the week component of the given date.\n * @abstract\n * @param {?} date The date to extract the day of the week from.\n * @return {?} The month component (0-indexed, 0 = Sunday).\n */\ngetDayOfWeek(date: D) {}\n/**\n * Gets a list of names for the months.\n * @abstract\n * @param {?} style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n * @return {?} An ordered list of all month names, starting with January.\n */\ngetMonthNames(style: 'long' | 'short' | 'narrow') {}\n/**\n * Gets a list of names for the dates of the month.\n * @abstract\n * @return {?} An ordered list of all date of the month names, starting with '1'.\n */\ngetDateNames() {}\n/**\n * Gets a list of names for the days of the week.\n * @abstract\n * @param {?} style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n * @return {?} An ordered list of all weekday names, starting with Sunday.\n */\ngetDayOfWeekNames(style: 'long' | 'short' | 'narrow') {}\n/**\n * Gets the name for the year of the given date.\n * @abstract\n * @param {?} date The date to get the year name for.\n * @return {?} The name of the given year (e.g. '2017').\n */\ngetYearName(date: D) {}\n/**\n * Gets the first day of the week.\n * @abstract\n * @return {?} The first day of the week (0-indexed, 0 = Sunday).\n */\ngetFirstDayOfWeek() {}\n/**\n * Gets the number of days in the month of the given date.\n * @abstract\n * @param {?} date The date whose month should be checked.\n * @return {?} The number of days in the month of the given date.\n */\ngetNumDaysInMonth(date: D) {}\n/**\n * Clones the given date.\n * @abstract\n * @param {?} date The date to clone\n * @return {?} A new date equal to the given date.\n */\nclone(date: D) {}\n/**\n * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n * month and date.\n * @abstract\n * @param {?} year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n * @param {?} month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n * @param {?} date The date of month of the date. Must be an integer 1 - length of the given month.\n * @return {?} The new date, or null if invalid.\n */\ncreateDate(year: number, month: number, date: number) {}\n/**\n * Gets today's date.\n * @abstract\n * @return {?} Today's date.\n */\ntoday() {}\n/**\n * Parses a date from a value.\n * @abstract\n * @param {?} value The value to parse.\n * @param {?} parseFormat The expected format of the value being parsed\n *     (type is implementation-dependent).\n * @return {?} The parsed date.\n */\nparse(value: any, parseFormat: any) {}\n/**\n * Formats a date as a string.\n * @abstract\n * @param {?} date The value to format.\n * @param {?} displayFormat The format to use to display the date as a string.\n * @return {?} The formatted date string.\n */\nformat(date: D, displayFormat: any) {}\n/**\n * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n * calendar for each year and then finding the closest date in the new month. For example when\n * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n * @abstract\n * @param {?} date The date to add years to.\n * @param {?} years The number of years to add (may be negative).\n * @return {?} A new date equal to the given one with the specified number of years added.\n */\naddCalendarYears(date: D, years: number) {}\n/**\n * Adds the given number of months to the date. Months are counted as if flipping a page on the\n * calendar for each month and then finding the closest date in the new month. For example when\n * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n * @abstract\n * @param {?} date The date to add months to.\n * @param {?} months The number of months to add (may be negative).\n * @return {?} A new date equal to the given one with the specified number of months added.\n */\naddCalendarMonths(date: D, months: number) {}\n/**\n * Adds the given number of days to the date. Days are counted as if moving one cell on the\n * calendar for each day.\n * @abstract\n * @param {?} date The date to add days to.\n * @param {?} days The number of days to add (may be negative).\n * @return {?} A new date equal to the given one with the specified number of days added.\n */\naddCalendarDays(date: D, days: number) {}\n/**\n * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n * @abstract\n * @param {?} date The date to get the ISO date string for.\n * @return {?} The ISO date string date string.\n */\ntoIso8601(date: D) {}\n/**\n * Creates a date from an RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339).\n * @abstract\n * @param {?} iso8601String The ISO date string to create a date from\n * @return {?} The date created from the ISO date string.\n */\nfromIso8601(iso8601String: string) {}\n/**\n * Checks whether the given object is considered a date instance by this DateAdapter.\n * @abstract\n * @param {?} obj The object to check\n * @return {?} Whether the object is a date instance.\n */\nisDateInstance(obj: any) {}\n/**\n * Checks whether the given date is valid.\n * @abstract\n * @param {?} date The date to check.\n * @return {?} Whether the date is valid.\n */\nisValid(date: D) {}\n/**\n * Sets the locale used for all dates.\n * @param {?} locale The new locale.\n * @return {?}\n */\nsetLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n/**\n * Compares two dates.\n * @param {?} first The first date to compare.\n * @param {?} second The second date to compare.\n * @return {?} 0 if the dates are equal, a number less than 0 if the first date is earlier,\n *     a number greater than 0 if the first date is later.\n */\ncompareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n/**\n * Checks if two dates are equal.\n * @param {?} first The first date to check.\n * @param {?} second The second date to check.\n *     Null dates are considered equal to other null dates.\n * @return {?}\n */\nsameDate(first: D | null, second: D | null): boolean {\n    return first && second ? !this.compareDate(first, second) : first == second;\n  }\n/**\n * Clamp the given date between min and max dates.\n * @param {?} date The date to clamp.\n * @param {?=} min The minimum value to allow. If null or omitted no min is enforced.\n * @param {?=} max The maximum value to allow. If null or omitted no max is enforced.\n * @return {?} `min` if `date` is less than `min`, `max` if date is greater than `max`,\n *     otherwise `date`.\n */\nclampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n\nfunction DateAdapter_tsickle_Closure_declarations() {\n/**\n * The locale to use for all dates.\n * @type {?}\n */\nDateAdapter.prototype.locale;\n/** @type {?} */\nDateAdapter.prototype._localeChanges;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\n\n\n// Users of the Dispatcher never need to see this type, but TypeScript requires it to be exported.\nexport type UniqueSelectionDispatcherListener = (id: string, name: string) => void;\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n * \n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nexport class UniqueSelectionDispatcher {\nprivate _listeners: UniqueSelectionDispatcherListener[] = [];\n/**\n * Notify other items that selection for the given name has been set.\n * @param {?} id ID of the item.\n * @param {?} name Name of the item.\n * @return {?}\n */\nnotify(id: string, name: string) {\n    for (let /** @type {?} */ listener of this._listeners) {\n      listener(id, name);\n    }\n  }\n/**\n * Listen for future changes to item selection.\n * @param {?} listener\n * @return {?} Function used to deregister listener\n * \n */\nlisten(listener: UniqueSelectionDispatcherListener): () => void {\n    this._listeners.push(listener);\n    return () => {\n      this._listeners = this._listeners.filter((registered: UniqueSelectionDispatcherListener) => {\n        return listener !== registered;\n      });\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction UniqueSelectionDispatcher_tsickle_Closure_declarations() {\n/** @type {?} */\nUniqueSelectionDispatcher.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUniqueSelectionDispatcher.ctorParameters;\n/** @type {?} */\nUniqueSelectionDispatcher.prototype._listeners;\n}\n\n/**\n * \\@docs-private\n * @param {?} parentDispatcher\n * @return {?}\n */\nexport function UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY(\n    parentDispatcher: UniqueSelectionDispatcher) {\n  return parentDispatcher || new UniqueSelectionDispatcher();\n}\n/**\n * \\@docs-private\n */\nexport const UNIQUE_SELECTION_DISPATCHER_PROVIDER = {\n  // If there is already a dispatcher available, use that. Otherwise, provide a new one.\n  provide: UniqueSelectionDispatcher,\n  deps: [[new Optional(), new SkipSelf(), UniqueSelectionDispatcher]],\n  useFactory: UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  tabIndex: number;\n}\n/**\n * Mixin to augment a directive with a `tabIndex` property.\n * @template T\n * @param {?} base\n * @param {?=} defaultTabIndex\n * @return {?}\n */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\nprivate _tabIndex: number = defaultTabIndex;\n/**\n * @return {?}\n */\nget tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  disableRipple: boolean;\n}\n/**\n * Mixin to augment a directive with a `disableRipple` property.\n * @template T\n * @param {?} base\n * @return {?}\n */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\nprivate _disableRipple: boolean = false;\n/**\n * Whether the ripple effect is disabled or not.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Constructor} from './constructor';\nimport {ElementRef, Renderer2} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasRenderer {\n  _renderer: Renderer2;\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values.  */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n/**\n * Mixin to augment a directive with a `color` property.\n * @template T\n * @param {?} base\n * @param {?=} defaultColor\n * @return {?}\n */\nexport function mixinColor<T extends Constructor<HasRenderer>>(base: T, defaultColor?: ThemePalette)\n    : Constructor<CanColor> & T {\n  return class extends base {\nprivate _color: ThemePalette;\n/**\n * @return {?}\n */\nget color(): ThemePalette { return this._color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: ThemePalette) {\n      const /** @type {?} */ colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._renderer.removeClass(this._elementRef.nativeElement, `mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._renderer.addClass(this._elementRef.nativeElement, `mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  disabled: boolean;\n}\n/**\n * Mixin to augment a directive with a `disabled` property.\n * @template T\n * @param {?} base\n * @return {?}\n */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\nprivate _disabled: boolean = false;\n/**\n * @return {?}\n */\nget disabled() { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {CompatibilityModule} from '../compatibility/compatibility';\n/**\n * Injection token that configures whether the Material sanity checks are enabled.\n */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('md-sanity-checks');\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, compatibility mode, etc.\n * \n * This module should be imported to each top-level component module (e.g., MdTabsModule).\n */\nexport class MdCommonModule {\n/**\n * Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n */\nprivate _hasDoneGlobalChecks = false;\n/**\n * @param {?} _document\n * @param {?} _sanityChecksEnabled\n */\nconstructor(\nprivate _document: any,\n      _sanityChecksEnabled: boolean) {\n\n    if (_sanityChecksEnabled && !this._hasDoneGlobalChecks && _document && isDevMode()) {\n      this._checkDoctype();\n      this._checkTheme();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n/**\n * @return {?}\n */\nprivate _checkDoctype(): void {\n    if (!this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n/**\n * @return {?}\n */\nprivate _checkTheme(): void {\n    if (typeof getComputedStyle === 'function') {\n      const /** @type {?} */ testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      if (getComputedStyle(testElement).display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CompatibilityModule, BidiModule],\n  exports: [CompatibilityModule, BidiModule],\n  providers: [{\n    provide: MATERIAL_SANITY_CHECKS, useValue: true,\n  }],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_SANITY_CHECKS, ] }, ]},\n];\n}\n\nfunction MdCommonModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMdCommonModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdCommonModule.ctorParameters;\n/**\n * Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n * @type {?}\n */\nMdCommonModule.prototype._hasDoneGlobalChecks;\n/** @type {?} */\nMdCommonModule.prototype._document;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule, Directive, Inject, Optional, ElementRef, InjectionToken} from '@angular/core';\n\nexport const /** @type {?} */ MATERIAL_COMPATIBILITY_MODE = new InjectionToken<boolean>('md-compatibility-mode');\n/**\n * Returns an exception to be thrown if the consumer has used\n * an invalid Material prefix on a component.\n * \\@docs-private\n * @param {?} prefix\n * @param {?} nodeName\n * @return {?}\n */\nexport function getMdCompatibilityInvalidPrefixError(prefix: string, nodeName: string) {\n  return Error(`The \"${prefix}-\" prefix cannot be used in ng-material v1 compatibility mode. ` +\n                   `It was used on an \"${nodeName.toLowerCase()}\" element.`);\n}\n/**\n * Selector that matches all elements that may have style collisions with AngularJS Material.\n */\nexport const MAT_ELEMENTS_SELECTOR = `\n  [mat-button],\n  [mat-fab],\n  [mat-icon-button],\n  [mat-mini-fab],\n  [mat-raised-button],\n  [matCardSubtitle],\n  [matCardTitle],\n  [matCellDef],\n  [matColumnDef],\n  [matDialogActions],\n  [matDialogClose],\n  [matDialogContent],\n  [matDialogTitle],\n  [matHeaderCellDef],\n  [matHeaderRowDef],\n  [matLine],\n  [matRowDef],\n  [matStepLabel],\n  [matStepperNext],\n  [matStepperPrevious],\n  [matTabLabel],\n  [matTabLink],\n  [matTabNav],\n  [matTooltip],\n  [matInput],\n  [matPrefix],\n  [matSuffix],\n  mat-autocomplete,\n  mat-button-toggle,\n  mat-button-toggle,\n  mat-button-toggle-group,\n  mat-card,\n  mat-card-actions,\n  mat-card-content,\n  mat-card-footer,\n  mat-card-header,\n  mat-card-subtitle,\n  mat-card-title,\n  mat-card-title-group,\n  mat-cell,\n  mat-checkbox,\n  mat-chip,\n  mat-dialog-actions,\n  mat-dialog-container,\n  mat-dialog-content,\n  mat-divider,\n  mat-error,\n  mat-grid-list,\n  mat-grid-tile,\n  mat-grid-tile-footer,\n  mat-grid-tile-header,\n  mat-header-cell,\n  mat-header-row,\n  mat-hint,\n  mat-horizontal-stepper,\n  mat-icon,\n  mat-input-container,\n  mat-form-field,\n  mat-list,\n  mat-list-item,\n  mat-menu,\n  mat-nav-list,\n  mat-option,\n  mat-placeholder,\n  mat-progress-bar,\n  mat-pseudo-checkbox,\n  mat-radio-button,\n  mat-radio-group,\n  mat-row,\n  mat-select,\n  mat-sidenav,\n  mat-sidenav-container,\n  mat-slider,\n  mat-spinner,\n  mat-step,\n  mat-tab,\n  mat-table,\n  mat-tab-group,\n  mat-toolbar,\n  mat-vertical-stepper`;\n/**\n * Selector that matches all elements that may have style collisions with AngularJS Material.\n */\nexport const MD_ELEMENTS_SELECTOR = `\n  [md-button],\n  [md-fab],\n  [md-icon-button],\n  [md-mini-fab],\n  [md-raised-button],\n  [mdCardSubtitle],\n  [mdCardTitle],\n  [mdCellDef],\n  [mdColumnDef],\n  [mdDialogActions],\n  [mdDialogClose],\n  [mdDialogContent],\n  [mdDialogTitle],\n  [mdHeaderCellDef],\n  [mdHeaderRowDef],\n  [mdLine],\n  [mdRowDef],\n  [mdStepLabel],\n  [mdStepperNext],\n  [mdStepperPrevious],\n  [mdTabLabel],\n  [mdTabLink],\n  [mdTabNav],\n  [mdTooltip],\n  [mdInput],\n  [mdPrefix],\n  [mdSuffix],\n  md-autocomplete,\n  md-button-toggle,\n  md-button-toggle,\n  md-button-toggle-group,\n  md-card,\n  md-card-actions,\n  md-card-content,\n  md-card-footer,\n  md-card-header,\n  md-card-subtitle,\n  md-card-title,\n  md-card-title-group,\n  md-cell,\n  md-checkbox,\n  md-chip,\n  md-dialog-actions,\n  md-dialog-container,\n  md-dialog-content,\n  md-divider,\n  md-error,\n  md-grid-list,\n  md-grid-tile,\n  md-grid-tile-footer,\n  md-grid-tile-header,\n  md-header-cell,\n  md-header-row,\n  md-hint,\n  md-horizontal-stepper,\n  md-icon,\n  md-input-container,\n  md-form-field,\n  md-list,\n  md-list-item,\n  md-menu,\n  md-nav-list,\n  md-option,\n  md-placeholder,\n  md-progress-bar,\n  md-pseudo-checkbox,\n  md-radio-button,\n  md-radio-group,\n  md-row,\n  md-select,\n  md-sidenav,\n  md-sidenav-container,\n  md-slider,\n  md-spinner,\n  md-step,\n  md-tab,\n  md-table,\n  md-tab-group,\n  md-toolbar,\n  md-vertical-stepper`;\n/**\n * Directive that enforces that the `mat-` prefix cannot be used.\n */\nexport class MatPrefixRejector {\n/**\n * @param {?} isCompatibilityMode\n * @param {?} elementRef\n */\nconstructor(\n      isCompatibilityMode: boolean,\n    elementRef: ElementRef) {\n\n    if (!isCompatibilityMode) {\n      throw getMdCompatibilityInvalidPrefixError('mat', elementRef.nativeElement.nodeName);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: MAT_ELEMENTS_SELECTOR}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n{type: ElementRef, },\n];\n}\n\nfunction MatPrefixRejector_tsickle_Closure_declarations() {\n/** @type {?} */\nMatPrefixRejector.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatPrefixRejector.ctorParameters;\n}\n\n/**\n * Directive that enforces that the `md-` prefix cannot be used.\n */\nexport class MdPrefixRejector {\n/**\n * @param {?} isCompatibilityMode\n * @param {?} elementRef\n */\nconstructor(\n      isCompatibilityMode: boolean,\n    elementRef: ElementRef) {\n\n    if (isCompatibilityMode) {\n      throw getMdCompatibilityInvalidPrefixError('md', elementRef.nativeElement.nodeName);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: MD_ELEMENTS_SELECTOR}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_COMPATIBILITY_MODE, ] }, ]},\n{type: ElementRef, },\n];\n}\n\nfunction MdPrefixRejector_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPrefixRejector.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPrefixRejector.ctorParameters;\n}\n\n/**\n * Module that enforces the default compatibility mode settings. When this module is loaded\n * without NoConflictStyleCompatibilityMode also being imported, it will throw an error if\n * there are any uses of the `mat-` prefix.\n */\nexport class CompatibilityModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [MatPrefixRejector, MdPrefixRejector],\n  exports: [MatPrefixRejector, MdPrefixRejector],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CompatibilityModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCompatibilityModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCompatibilityModule.ctorParameters;\n}\n\n/**\n * Module that enforces \"no-conflict\" compatibility mode settings. When this module is loaded,\n * it will throw an error if there are any uses of the `md-` prefix.\n */\nexport class NoConflictStyleCompatibilityMode {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [{\n    provide: MATERIAL_COMPATIBILITY_MODE, useValue: true,\n  }],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NoConflictStyleCompatibilityMode_tsickle_Closure_declarations() {\n/** @type {?} */\nNoConflictStyleCompatibilityMode.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNoConflictStyleCompatibilityMode.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * \\@docs-private\n */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\nfunction AnimationCurves_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationCurves.STANDARD_CURVE;\n/** @type {?} */\nAnimationCurves.DECELERATION_CURVE;\n/** @type {?} */\nAnimationCurves.ACCELERATION_CURVE;\n/** @type {?} */\nAnimationCurves.SHARP_CURVE;\n}\n\n/**\n * \\@docs-private\n */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n\nfunction AnimationDurations_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationDurations.COMPLEX;\n/** @type {?} */\nAnimationDurations.ENTERING;\n/** @type {?} */\nAnimationDurations.EXITING;\n}\n\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {OVERLAY_PROVIDERS,OverlayModule,Overlay,OverlayContainer,FullscreenOverlayContainer,OverlayRef,ConnectedOverlayDirective,OverlayOrigin,ViewportRuler,ComponentType,PositionStrategy,GlobalPositionStrategy,ConnectedPositionStrategy,VIEWPORT_RULER_PROVIDER,OverlayConfig,HorizontalConnectionPos,VerticalConnectionPos,OriginConnectionPosition,OverlayConnectionPosition,ConnectionPositionPair,ScrollingVisibility,ConnectedOverlayPositionChange,Scrollable,ScrollDispatcher,ScrollStrategy,ScrollStrategyOptions,RepositionScrollStrategy,CloseScrollStrategy,NoopScrollStrategy,BlockScrollStrategy} from './public_api';\n\nexport {OVERLAY_CONTAINER_PROVIDER as ɵb,OVERLAY_CONTAINER_PROVIDER_FACTORY as ɵa} from './overlay-container';\nexport {MD_CONNECTED_OVERLAY_SCROLL_STRATEGY as ɵc,MD_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER as ɵe,MD_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY as ɵd} from './overlay-directives';\nexport {OverlayPositionBuilder as ɵf} from './position/overlay-position-builder';","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, Provider} from '@angular/core';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {Overlay} from './overlay';\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\nimport {\n  ConnectedOverlayDirective,\n  MD_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n  OverlayOrigin,\n} from './overlay-directives';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\nimport {OVERLAY_CONTAINER_PROVIDER} from './overlay-container';\nimport {ScrollStrategyOptions} from './scroll/scroll-strategy-options';\n\n\nexport const /** @type {?} */ OVERLAY_PROVIDERS: Provider[] = [\n  Overlay,\n  OverlayPositionBuilder,\n  VIEWPORT_RULER_PROVIDER,\n  OVERLAY_CONTAINER_PROVIDER,\n  MD_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n];\nexport class OverlayModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [PortalModule, ScrollDispatchModule],\n  exports: [ConnectedOverlayDirective, OverlayOrigin, ScrollDispatchModule],\n  declarations: [ConnectedOverlayDirective, OverlayOrigin],\n  providers: [OVERLAY_PROVIDERS, ScrollStrategyOptions],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction OverlayModule_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlayModule.ctorParameters;\n}\n\n\n\nexport {OverlayConfig} from './overlay-config';\nexport {Overlay} from './overlay';\nexport {OverlayContainer} from './overlay-container';\nexport {FullscreenOverlayContainer} from './fullscreen-overlay-container';\nexport {OverlayRef} from './overlay-ref';\nexport {ConnectedOverlayDirective, OverlayOrigin} from './overlay-directives';\nexport {ViewportRuler} from '@angular/cdk/scrolling';\nexport {ComponentType} from '@angular/cdk/portal';\n\nexport {HorizontalConnectionPos,VerticalConnectionPos,OriginConnectionPosition,OverlayConnectionPosition,ConnectionPositionPair,ScrollingVisibility,ConnectedOverlayPositionChange} from './position/connected-position';\nexport {Scrollable,ScrollDispatcher,ScrollStrategy,ScrollStrategyOptions,RepositionScrollStrategy,CloseScrollStrategy,NoopScrollStrategy,BlockScrollStrategy} from './scroll/index';\n\n// Export pre-defined position strategies and interface to build custom ones.\nexport {PositionStrategy} from './position/position-strategy';\nexport {GlobalPositionStrategy} from './position/global-position-strategy';\nexport {ConnectedPositionStrategy} from './position/connected-position-strategy';\nexport {VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {OverlayContainer} from './overlay-container';\n/**\n * The FullscreenOverlayContainer is the alternative to OverlayContainer\n * that supports correct displaying of overlay elements in Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n * It should be provided in the root component that way:\n * providers: [\n *   {provide: OverlayContainer, useClass: FullscreenOverlayContainer}\n * ],\n */\nexport class FullscreenOverlayContainer extends OverlayContainer {\n/**\n * @return {?}\n */\nprotected _createContainer(): void {\n    super._createContainer();\n    this._adjustParentForFullscreenChange();\n    this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n  }\n/**\n * @return {?}\n */\nprivate _adjustParentForFullscreenChange(): void {\n    if (!this._containerElement) {\n      return;\n    }\n    let /** @type {?} */ fullscreenElement = this.getFullscreenElement();\n    let /** @type {?} */ parent = fullscreenElement || document.body;\n    parent.appendChild(this._containerElement);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nprivate _addFullscreenChangeListener(fn: () => void) {\n    if (document.fullscreenEnabled) {\n      document.addEventListener('fullscreenchange', fn);\n    } else if (document.webkitFullscreenEnabled) {\n      document.addEventListener('webkitfullscreenchange', fn);\n    } else if (( /** @type {?} */((document as any))).mozFullScreenEnabled) {\n      document.addEventListener('mozfullscreenchange', fn);\n    } else if (( /** @type {?} */((document as any))).msFullscreenEnabled) {\n      document.addEventListener('MSFullscreenChange', fn);\n    }\n  }\n/**\n * When the page is put into fullscreen mode, a specific element is specified.\n * Only that element and its children are visible when in fullscreen mode.\n * @return {?}\n */\ngetFullscreenElement(): Element {\n    return document.fullscreenElement ||\n        document.webkitFullscreenElement ||\n        ( /** @type {?} */((document as any))).mozFullScreenElement ||\n        ( /** @type {?} */((document as any))).msFullscreenElement ||\n        null;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction FullscreenOverlayContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nFullscreenOverlayContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFullscreenOverlayContainer.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  Renderer2,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {Overlay} from './overlay';\nimport {OverlayRef} from './overlay-ref';\nimport {OverlayConfig} from './overlay-config';\nimport {\n  // This import is only used to define a generic type. The current TypeScript version incorrectly\n  // considers such imports as unused (https://github.com/Microsoft/TypeScript/issues/14953)\n  // tslint:disable-next-line:no-unused-variable\n  ConnectedOverlayPositionChange,\n  ConnectionPositionPair,\n} from './position/connected-position';\nimport {ConnectedPositionStrategy} from './position/connected-position-strategy';\nimport {RepositionScrollStrategy, ScrollStrategy} from './scroll/index';\nimport {Subscription} from 'rxjs/Subscription';\n/**\n * Default set of positions for the overlay. Follows the behavior of a dropdown.\n */\nconst defaultPositionList = [\n  new ConnectionPositionPair(\n      {originX: 'start', originY: 'bottom'},\n      {overlayX: 'start', overlayY: 'top'}),\n  new ConnectionPositionPair(\n      {originX: 'start', originY: 'top'},\n      {overlayX: 'start', overlayY: 'bottom'}),\n];\n/**\n * Injection token that determines the scroll handling while the connected overlay is open.\n */\nexport const MD_CONNECTED_OVERLAY_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('md-connected-overlay-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MD_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n/**\n * \\@docs-private\n */\nexport const MD_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n  provide: MD_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MD_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nexport class OverlayOrigin {\n/**\n * @param {?} elementRef\n */\nconstructor(public elementRef: ElementRef) { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n  exportAs: 'cdkOverlayOrigin',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\n}\n\nfunction OverlayOrigin_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayOrigin.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlayOrigin.ctorParameters;\n/** @type {?} */\nOverlayOrigin.prototype.elementRef;\n}\n\n/**\n * Directive to facilitate declarative creation of an Overlay using a ConnectedPositionStrategy.\n */\nexport class ConnectedOverlayDirective implements OnDestroy, OnChanges {\nprivate _overlayRef: OverlayRef;\nprivate _templatePortal: TemplatePortal<any>;\nprivate _hasBackdrop = false;\nprivate _backdropSubscription = Subscription.EMPTY;\nprivate _positionSubscription = Subscription.EMPTY;\nprivate _offsetX: number = 0;\nprivate _offsetY: number = 0;\nprivate _position: ConnectedPositionStrategy;\nprivate _escapeListener = () => {};\n/**\n * Origin for the connected overlay.\n */\norigin: OverlayOrigin;\n/**\n * Registered connected position pairs.\n */\npositions: ConnectionPositionPair[];\n/**\n * The offset in pixels for the overlay connection point on the x-axis\n * @return {?}\n */\nget offsetX(): number { return this._offsetX; }\n/**\n * @param {?} offsetX\n * @return {?}\n */\nset offsetX(offsetX: number) {\n    this._offsetX = offsetX;\n    if (this._position) {\n      this._position.withOffsetX(offsetX);\n    }\n  }\n/**\n * The offset in pixels for the overlay connection point on the y-axis\n * @return {?}\n */\nget offsetY() { return this._offsetY; }\n/**\n * @param {?} offsetY\n * @return {?}\n */\nset offsetY(offsetY: number) {\n    this._offsetY = offsetY;\n    if (this._position) {\n      this._position.withOffsetY(offsetY);\n    }\n  }\n/**\n * The width of the overlay panel.\n */\nwidth: number | string;\n/**\n * The height of the overlay panel.\n */\nheight: number | string;\n/**\n * The min width of the overlay panel.\n */\nminWidth: number | string;\n/**\n * The min height of the overlay panel.\n */\nminHeight: number | string;\n/**\n * The custom class to be set on the backdrop element.\n */\nbackdropClass: string;\n/**\n * Strategy to be used when handling scroll events while the overlay is open.\n */\nscrollStrategy: ScrollStrategy =\n      this._scrollStrategy();\n/**\n * Whether the overlay is open.\n */\nopen: boolean = false;\n/**\n * Whether or not the overlay should attach a backdrop.\n * @return {?}\n */\nget hasBackdrop() { return this._hasBackdrop; }\n/**\n * @param {?} value\n * @return {?}\n */\nset hasBackdrop(value: any) { this._hasBackdrop = coerceBooleanProperty(value); }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedOrigin(): OverlayOrigin { return this.origin; }\n/**\n * @param {?} _origin\n * @return {?}\n */\nset _deprecatedOrigin(_origin: OverlayOrigin) { this.origin = _origin; }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedPositions(): ConnectionPositionPair[] { return this.positions; }\n/**\n * @param {?} _positions\n * @return {?}\n */\nset _deprecatedPositions(_positions: ConnectionPositionPair[]) { this.positions = _positions; }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedOffsetX(): number { return this.offsetX; }\n/**\n * @param {?} _offsetX\n * @return {?}\n */\nset _deprecatedOffsetX(_offsetX: number) { this.offsetX = _offsetX; }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedOffsetY(): number { return this.offsetY; }\n/**\n * @param {?} _offsetY\n * @return {?}\n */\nset _deprecatedOffsetY(_offsetY: number) { this.offsetY = _offsetY; }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedWidth(): number | string { return this.width; }\n/**\n * @param {?} _width\n * @return {?}\n */\nset _deprecatedWidth(_width: number | string) { this.width = _width; }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedHeight(): number | string { return this.height; }\n/**\n * @param {?} _height\n * @return {?}\n */\nset _deprecatedHeight(_height: number | string) { this.height = _height; }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedMinWidth(): number | string { return this.minWidth; }\n/**\n * @param {?} _minWidth\n * @return {?}\n */\nset _deprecatedMinWidth(_minWidth: number | string) { this.minWidth = _minWidth; }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedMinHeight(): number | string { return this.minHeight; }\n/**\n * @param {?} _minHeight\n * @return {?}\n */\nset _deprecatedMinHeight(_minHeight: number | string) { this.minHeight = _minHeight; }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedBackdropClass(): string { return this.backdropClass; }\n/**\n * @param {?} _backdropClass\n * @return {?}\n */\nset _deprecatedBackdropClass(_backdropClass: string) { this.backdropClass = _backdropClass; }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedScrollStrategy(): ScrollStrategy { return this.scrollStrategy; }\n/**\n * @param {?} _scrollStrategy\n * @return {?}\n */\nset _deprecatedScrollStrategy(_scrollStrategy: ScrollStrategy) {\n    this.scrollStrategy = _scrollStrategy;\n  }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedOpen(): boolean { return this.open; }\n/**\n * @param {?} _open\n * @return {?}\n */\nset _deprecatedOpen(_open: boolean) { this.open = _open; }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedHasBackdrop() { return this.hasBackdrop; }\n/**\n * @param {?} _hasBackdrop\n * @return {?}\n */\nset _deprecatedHasBackdrop(_hasBackdrop: any) { this.hasBackdrop = _hasBackdrop; }\n/**\n * Event emitted when the backdrop is clicked.\n */\nbackdropClick = new EventEmitter<void>();\n/**\n * Event emitted when the position has changed.\n */\npositionChange = new EventEmitter<ConnectedOverlayPositionChange>();\n/**\n * Event emitted when the overlay has been attached.\n */\nattach = new EventEmitter<void>();\n/**\n * Event emitted when the overlay has been detached.\n */\ndetach = new EventEmitter<void>();\n/**\n * @param {?} _overlay\n * @param {?} _renderer\n * @param {?} templateRef\n * @param {?} viewContainerRef\n * @param {?} _scrollStrategy\n * @param {?} _dir\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _renderer: Renderer2,\n      templateRef: TemplateRef<any>,\n      viewContainerRef: ViewContainerRef,\nprivate _scrollStrategy,\nprivate _dir: Directionality) {\n    this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n  }\n/**\n * The associated overlay reference.\n * @return {?}\n */\nget overlayRef(): OverlayRef {\n    return this._overlayRef;\n  }\n/**\n * The element's layout direction.\n * @return {?}\n */\nget dir(): Direction {\n    return this._dir ? this._dir.value : 'ltr';\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._destroyOverlay();\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    if (changes['open'] || changes['_deprecatedOpen']) {\n      this.open ? this._attachOverlay() : this._detachOverlay();\n    }\n  }\n/**\n * Creates an overlay\n * @return {?}\n */\nprivate _createOverlay() {\n    if (!this.positions || !this.positions.length) {\n      this.positions = defaultPositionList;\n    }\n\n    this._overlayRef = this._overlay.create(this._buildConfig());\n  }\n/**\n * Builds the overlay config based on the directive's inputs\n * @return {?}\n */\nprivate _buildConfig(): OverlayConfig {\n    const /** @type {?} */ positionStrategy = this._position = this._createPositionStrategy();\n    const /** @type {?} */ overlayConfig = new OverlayConfig({\n      positionStrategy,\n      scrollStrategy: this.scrollStrategy,\n      hasBackdrop: this.hasBackdrop\n    });\n\n    if (this.width || this.width === 0) {\n      overlayConfig.width = this.width;\n    }\n\n    if (this.height || this.height === 0) {\n      overlayConfig.height = this.height;\n    }\n\n    if (this.minWidth || this.minWidth === 0) {\n      overlayConfig.minWidth = this.minWidth;\n    }\n\n    if (this.minHeight || this.minHeight === 0) {\n      overlayConfig.minHeight = this.minHeight;\n    }\n\n    if (this.backdropClass) {\n      overlayConfig.backdropClass = this.backdropClass;\n    }\n\n    return overlayConfig;\n  }\n/**\n * Returns the position strategy of the overlay to be set on the overlay config\n * @return {?}\n */\nprivate _createPositionStrategy(): ConnectedPositionStrategy {\n    const /** @type {?} */ pos = this.positions[0];\n    const /** @type {?} */ originPoint = {originX: pos.originX, originY: pos.originY};\n    const /** @type {?} */ overlayPoint = {overlayX: pos.overlayX, overlayY: pos.overlayY};\n\n    const /** @type {?} */ strategy = this._overlay.position()\n      .connectedTo(this.origin.elementRef, originPoint, overlayPoint)\n      .withOffsetX(this.offsetX)\n      .withOffsetY(this.offsetY);\n\n    this._handlePositionChanges(strategy);\n\n    return strategy;\n  }\n/**\n * @param {?} strategy\n * @return {?}\n */\nprivate _handlePositionChanges(strategy: ConnectedPositionStrategy): void {\n    for (let /** @type {?} */ i = 1; i < this.positions.length; i++) {\n      strategy.withFallbackPosition(\n          {originX: this.positions[i].originX, originY: this.positions[i].originY},\n          {overlayX: this.positions[i].overlayX, overlayY: this.positions[i].overlayY}\n      );\n    }\n\n    this._positionSubscription =\n        strategy.onPositionChange.subscribe(pos => this.positionChange.emit(pos));\n  }\n/**\n * Attaches the overlay and subscribes to backdrop clicks if backdrop exists\n * @return {?}\n */\nprivate _attachOverlay() {\n    if (!this._overlayRef) {\n      this._createOverlay();\n    }\n\n    this._position.withDirection(this.dir);\n    this._overlayRef.getState().direction = this.dir;\n    this._initEscapeListener();\n\n    if (!this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._templatePortal);\n      this.attach.emit();\n    }\n\n    if (this.hasBackdrop) {\n      this._backdropSubscription = this._overlayRef.backdropClick().subscribe(() => {\n        this.backdropClick.emit();\n      });\n    }\n  }\n/**\n * Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists\n * @return {?}\n */\nprivate _detachOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.detach();\n      this.detach.emit();\n    }\n\n    this._backdropSubscription.unsubscribe();\n    this._escapeListener();\n  }\n/**\n * Destroys the overlay created by this directive.\n * @return {?}\n */\nprivate _destroyOverlay() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n    }\n\n    this._backdropSubscription.unsubscribe();\n    this._positionSubscription.unsubscribe();\n    this._escapeListener();\n  }\n/**\n * Sets the event listener that closes the overlay when pressing Escape.\n * @return {?}\n */\nprivate _initEscapeListener() {\n    this._escapeListener = this._renderer.listen('document', 'keydown', (event: KeyboardEvent) => {\n      if (event.keyCode === ESCAPE) {\n        this._detachOverlay();\n      }\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n  exportAs: 'cdkConnectedOverlay'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: Renderer2, },\n{type: TemplateRef, },\n{type: ViewContainerRef, },\n{type: undefined, decorators: [{ type: Inject, args: [MD_CONNECTED_OVERLAY_SCROLL_STRATEGY, ] }, ]},\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'origin': [{ type: Input, args: ['cdkConnectedOverlayOrigin', ] },],\n'positions': [{ type: Input, args: ['cdkConnectedOverlayPositions', ] },],\n'offsetX': [{ type: Input, args: ['cdkConnectedOverlayOffsetX', ] },],\n'offsetY': [{ type: Input, args: ['cdkConnectedOverlayOffsetY', ] },],\n'width': [{ type: Input, args: ['cdkConnectedOverlayWidth', ] },],\n'height': [{ type: Input, args: ['cdkConnectedOverlayHeight', ] },],\n'minWidth': [{ type: Input, args: ['cdkConnectedOverlayMinWidth', ] },],\n'minHeight': [{ type: Input, args: ['cdkConnectedOverlayMinHeight', ] },],\n'backdropClass': [{ type: Input, args: ['cdkConnectedOverlayBackdropClass', ] },],\n'scrollStrategy': [{ type: Input, args: ['cdkConnectedOverlayScrollStrategy', ] },],\n'open': [{ type: Input, args: ['cdkConnectedOverlayOpen', ] },],\n'hasBackdrop': [{ type: Input, args: ['cdkConnectedOverlayHasBackdrop', ] },],\n'_deprecatedOrigin': [{ type: Input, args: ['origin', ] },],\n'_deprecatedPositions': [{ type: Input, args: ['positions', ] },],\n'_deprecatedOffsetX': [{ type: Input, args: ['offsetX', ] },],\n'_deprecatedOffsetY': [{ type: Input, args: ['offsetY', ] },],\n'_deprecatedWidth': [{ type: Input, args: ['width', ] },],\n'_deprecatedHeight': [{ type: Input, args: ['height', ] },],\n'_deprecatedMinWidth': [{ type: Input, args: ['minWidth', ] },],\n'_deprecatedMinHeight': [{ type: Input, args: ['minHeight', ] },],\n'_deprecatedBackdropClass': [{ type: Input, args: ['backdropClass', ] },],\n'_deprecatedScrollStrategy': [{ type: Input, args: ['scrollStrategy', ] },],\n'_deprecatedOpen': [{ type: Input, args: ['open', ] },],\n'_deprecatedHasBackdrop': [{ type: Input, args: ['hasBackdrop', ] },],\n'backdropClick': [{ type: Output },],\n'positionChange': [{ type: Output },],\n'attach': [{ type: Output },],\n'detach': [{ type: Output },],\n};\n}\n\nfunction ConnectedOverlayDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nConnectedOverlayDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nConnectedOverlayDirective.ctorParameters;\n/** @type {?} */\nConnectedOverlayDirective.propDecorators;\n/** @type {?} */\nConnectedOverlayDirective.prototype._overlayRef;\n/** @type {?} */\nConnectedOverlayDirective.prototype._templatePortal;\n/** @type {?} */\nConnectedOverlayDirective.prototype._hasBackdrop;\n/** @type {?} */\nConnectedOverlayDirective.prototype._backdropSubscription;\n/** @type {?} */\nConnectedOverlayDirective.prototype._positionSubscription;\n/** @type {?} */\nConnectedOverlayDirective.prototype._offsetX;\n/** @type {?} */\nConnectedOverlayDirective.prototype._offsetY;\n/** @type {?} */\nConnectedOverlayDirective.prototype._position;\n/** @type {?} */\nConnectedOverlayDirective.prototype._escapeListener;\n/**\n * Origin for the connected overlay.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.origin;\n/**\n * Registered connected position pairs.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.positions;\n/**\n * The width of the overlay panel.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.width;\n/**\n * The height of the overlay panel.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.height;\n/**\n * The min width of the overlay panel.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.minWidth;\n/**\n * The min height of the overlay panel.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.minHeight;\n/**\n * The custom class to be set on the backdrop element.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.backdropClass;\n/**\n * Strategy to be used when handling scroll events while the overlay is open.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.scrollStrategy;\n/**\n * Whether the overlay is open.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.open;\n/**\n * Event emitted when the backdrop is clicked.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.backdropClick;\n/**\n * Event emitted when the position has changed.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.positionChange;\n/**\n * Event emitted when the overlay has been attached.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.attach;\n/**\n * Event emitted when the overlay has been detached.\n * @type {?}\n */\nConnectedOverlayDirective.prototype.detach;\n/** @type {?} */\nConnectedOverlayDirective.prototype._overlay;\n/** @type {?} */\nConnectedOverlayDirective.prototype._renderer;\n/** @type {?} */\nConnectedOverlayDirective.prototype._scrollStrategy;\n/** @type {?} */\nConnectedOverlayDirective.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ComponentFactoryResolver,\n  Injectable,\n  ApplicationRef,\n  Injector,\n  NgZone,\n} from '@angular/core';\nimport {DomPortalHost} from '@angular/cdk/portal';\nimport {OverlayConfig} from './overlay-config';\nimport {OverlayRef} from './overlay-ref';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\nimport {OverlayContainer} from './overlay-container';\nimport {ScrollStrategyOptions} from './scroll/index';\n/**\n * Next overlay unique ID.\n */\nlet nextUniqueId = 0;\n/**\n * The default state for newly created overlays.\n */\nlet defaultState = new OverlayConfig();\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n * \n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n */\nexport class Overlay {\n/**\n * @param {?} scrollStrategies\n * @param {?} _overlayContainer\n * @param {?} _componentFactoryResolver\n * @param {?} _positionBuilder\n * @param {?} _appRef\n * @param {?} _injector\n * @param {?} _ngZone\n */\nconstructor(public scrollStrategies: ScrollStrategyOptions,\nprivate _overlayContainer: OverlayContainer,\nprivate _componentFactoryResolver: ComponentFactoryResolver,\nprivate _positionBuilder: OverlayPositionBuilder,\nprivate _appRef: ApplicationRef,\nprivate _injector: Injector,\nprivate _ngZone: NgZone) { }\n/**\n * Creates an overlay.\n * @param {?=} state State to apply to the overlay.\n * @return {?} Reference to the created overlay.\n */\ncreate(state: OverlayConfig = defaultState): OverlayRef {\n    const /** @type {?} */ pane = this._createPaneElement();\n    const /** @type {?} */ portalHost = this._createPortalHost(pane);\n    return new OverlayRef(portalHost, pane, state, this._ngZone);\n  }\n/**\n * Returns a position builder that can be used, via fluent API,\n * to construct and configure a position strategy.\n * @return {?}\n */\nposition(): OverlayPositionBuilder {\n    return this._positionBuilder;\n  }\n/**\n * Creates the DOM element for an overlay and appends it to the overlay container.\n * @return {?} Newly-created pane element\n */\nprivate _createPaneElement(): HTMLElement {\n    let /** @type {?} */ pane = document.createElement('div');\n\n    pane.id = `cdk-overlay-${nextUniqueId++}`;\n    pane.classList.add('cdk-overlay-pane');\n    this._overlayContainer.getContainerElement().appendChild(pane);\n\n    return pane;\n  }\n/**\n * Create a DomPortalHost into which the overlay content can be loaded.\n * @param {?} pane The DOM element to turn into a portal host.\n * @return {?} A portal host for the given DOM element.\n */\nprivate _createPortalHost(pane: HTMLElement): DomPortalHost {\n    return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef, this._injector);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ScrollStrategyOptions, },\n{type: OverlayContainer, },\n{type: ComponentFactoryResolver, },\n{type: OverlayPositionBuilder, },\n{type: ApplicationRef, },\n{type: Injector, },\n{type: NgZone, },\n];\n}\n\nfunction Overlay_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlay.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlay.ctorParameters;\n/** @type {?} */\nOverlay.prototype.scrollStrategies;\n/** @type {?} */\nOverlay.prototype._overlayContainer;\n/** @type {?} */\nOverlay.prototype._componentFactoryResolver;\n/** @type {?} */\nOverlay.prototype._positionBuilder;\n/** @type {?} */\nOverlay.prototype._appRef;\n/** @type {?} */\nOverlay.prototype._injector;\n/** @type {?} */\nOverlay.prototype._ngZone;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {CloseScrollStrategy} from './close-scroll-strategy';\nimport {NoopScrollStrategy} from './noop-scroll-strategy';\nimport {BlockScrollStrategy} from './block-scroll-strategy';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  RepositionScrollStrategy,\n  RepositionScrollStrategyConfig,\n} from './reposition-scroll-strategy';\n/**\n * Options for how an overlay will handle scrolling.\n * \n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nexport class ScrollStrategyOptions {\n/**\n * @param {?} _scrollDispatcher\n * @param {?} _viewportRuler\n */\nconstructor(\nprivate _scrollDispatcher: ScrollDispatcher,\nprivate _viewportRuler: ViewportRuler) { }\n/**\n * Do nothing on scroll.\n */\nnoop = () => new NoopScrollStrategy();\n/**\n * Close the overlay as soon as the user scrolls.\n */\nclose = () => new CloseScrollStrategy(this._scrollDispatcher);\n/**\n * Block scrolling.\n */\nblock = () => new BlockScrollStrategy(this._viewportRuler);\n/**\n * Update the overlay's position on scroll.\n * @param config Configuration to be used inside the scroll strategy.\n * Allows debouncing the reposition calls.\n */\nreposition = (config?: RepositionScrollStrategyConfig) =>\n      new RepositionScrollStrategy(this._scrollDispatcher, config)\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ScrollDispatcher, },\n{type: ViewportRuler, },\n];\n}\n\nfunction ScrollStrategyOptions_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollStrategyOptions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollStrategyOptions.ctorParameters;\n/**\n * Do nothing on scroll.\n * @type {?}\n */\nScrollStrategyOptions.prototype.noop;\n/**\n * Close the overlay as soon as the user scrolls.\n * @type {?}\n */\nScrollStrategyOptions.prototype.close;\n/**\n * Block scrolling.\n * @type {?}\n */\nScrollStrategyOptions.prototype.block;\n/**\n * Update the overlay's position on scroll.\n * \\@param config Configuration to be used inside the scroll strategy.\n * Allows debouncing the reposition calls.\n * @type {?}\n */\nScrollStrategyOptions.prototype.reposition;\n/** @type {?} */\nScrollStrategyOptions.prototype._scrollDispatcher;\n/** @type {?} */\nScrollStrategyOptions.prototype._viewportRuler;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Subscription} from 'rxjs/Subscription';\nimport {ScrollStrategy, getMdScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {OverlayRef} from '../overlay-ref';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n/**\n * Config options for the RepositionScrollStrategy.\n */\nexport interface RepositionScrollStrategyConfig {\n  scrollThrottle?: number;\n}\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nexport class RepositionScrollStrategy implements ScrollStrategy {\nprivate _scrollSubscription: Subscription|null = null;\nprivate _overlayRef: OverlayRef;\n/**\n * @param {?} _scrollDispatcher\n * @param {?=} _config\n */\nconstructor(\nprivate _scrollDispatcher: ScrollDispatcher,\nprivate _config?: RepositionScrollStrategyConfig) { }\n/**\n * @param {?} overlayRef\n * @return {?}\n */\nattach(overlayRef: OverlayRef) {\n    if (this._overlayRef) {\n      throw getMdScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n/**\n * @return {?}\n */\nenable() {\n    if (!this._scrollSubscription) {\n      let /** @type {?} */ throttle = this._config ? this._config.scrollThrottle : 0;\n\n      this._scrollSubscription = this._scrollDispatcher.scrolled(throttle, () => {\n        this._overlayRef.updatePosition();\n      });\n    }\n  }\n/**\n * @return {?}\n */\ndisable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n}\n\nfunction RepositionScrollStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nRepositionScrollStrategy.prototype._scrollSubscription;\n/** @type {?} */\nRepositionScrollStrategy.prototype._overlayRef;\n/** @type {?} */\nRepositionScrollStrategy.prototype._scrollDispatcher;\n/** @type {?} */\nRepositionScrollStrategy.prototype._config;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ScrollStrategy} from './scroll-strategy';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nexport class BlockScrollStrategy implements ScrollStrategy {\nprivate _previousHTMLStyles = { top: '', left: '' };\nprivate _previousScrollPosition: { top: number, left: number };\nprivate _isEnabled = false;\n/**\n * @param {?} _viewportRuler\n */\nconstructor(private _viewportRuler: ViewportRuler) { }\n/**\n * @return {?}\n */\nattach() { }\n/**\n * @return {?}\n */\nenable() {\n    if (this._canBeEnabled()) {\n      const /** @type {?} */ root = document.documentElement;\n\n      this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n      // Cache the previous inline styles in case the user had set them.\n      this._previousHTMLStyles.left = root.style.left || '';\n      this._previousHTMLStyles.top = root.style.top || '';\n\n      // Note: we're using the `html` node, instead of the `body`, because the `body` may\n      // have the user agent margin, whereas the `html` is guaranteed not to have one.\n      root.style.left = `${-this._previousScrollPosition.left}px`;\n      root.style.top = `${-this._previousScrollPosition.top}px`;\n      root.classList.add('cdk-global-scrollblock');\n      this._isEnabled = true;\n    }\n  }\n/**\n * @return {?}\n */\ndisable() {\n    if (this._isEnabled) {\n      this._isEnabled = false;\n      document.documentElement.style.left = this._previousHTMLStyles.left;\n      document.documentElement.style.top = this._previousHTMLStyles.top;\n      document.documentElement.classList.remove('cdk-global-scrollblock');\n      window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _canBeEnabled(): boolean {\n    // Since the scroll strategies can't be singletons, we have to use a global CSS class\n    // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n    // scrolling multiple times.\n    if (document.documentElement.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n      return false;\n    }\n\n    const /** @type {?} */ body = document.body;\n    const /** @type {?} */ viewport = this._viewportRuler.getViewportRect();\n    return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n  }\n}\n\nfunction BlockScrollStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nBlockScrollStrategy.prototype._previousHTMLStyles;\n/** @type {?} */\nBlockScrollStrategy.prototype._previousScrollPosition;\n/** @type {?} */\nBlockScrollStrategy.prototype._isEnabled;\n/** @type {?} */\nBlockScrollStrategy.prototype._viewportRuler;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ScrollStrategy, getMdScrollStrategyAlreadyAttachedError} from './scroll-strategy';\nimport {OverlayRef} from '../overlay-ref';\nimport {Subscription} from 'rxjs/Subscription';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nexport class CloseScrollStrategy implements ScrollStrategy {\nprivate _scrollSubscription: Subscription|null = null;\nprivate _overlayRef: OverlayRef;\n/**\n * @param {?} _scrollDispatcher\n */\nconstructor(private _scrollDispatcher: ScrollDispatcher) { }\n/**\n * @param {?} overlayRef\n * @return {?}\n */\nattach(overlayRef: OverlayRef) {\n    if (this._overlayRef) {\n      throw getMdScrollStrategyAlreadyAttachedError();\n    }\n\n    this._overlayRef = overlayRef;\n  }\n/**\n * @return {?}\n */\nenable() {\n    if (!this._scrollSubscription) {\n      this._scrollSubscription = this._scrollDispatcher.scrolled(0, () => {\n        if (this._overlayRef.hasAttached()) {\n          this._overlayRef.detach();\n        }\n\n        this.disable();\n      });\n    }\n  }\n/**\n * @return {?}\n */\ndisable() {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n  }\n}\n\nfunction CloseScrollStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nCloseScrollStrategy.prototype._scrollSubscription;\n/** @type {?} */\nCloseScrollStrategy.prototype._overlayRef;\n/** @type {?} */\nCloseScrollStrategy.prototype._scrollDispatcher;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {OverlayRef} from '../overlay-ref';\n\n/**\n * Describes a strategy that will be used by an overlay\n * to handle scroll events while it is open.\n */\nexport interface ScrollStrategy {\n  enable: () => void;\n  disable: () => void;\n  attach: (overlayRef: OverlayRef) => void;\n}\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n * @return {?}\n */\nexport function getMdScrollStrategyAlreadyAttachedError(): Error {\n  return Error(`Scroll strategy has already been attached.`);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, Optional, SkipSelf, OnDestroy} from '@angular/core';\n/**\n * The OverlayContainer is the container in which all overlays will load.\n * It should be provided in the root component to ensure it is properly shared.\n */\nexport class OverlayContainer implements OnDestroy {\n  protected _containerElement: HTMLElement;\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._containerElement && this._containerElement.parentNode) {\n      this._containerElement.parentNode.removeChild(this._containerElement);\n    }\n  }\n/**\n * This method returns the overlay container element. It will lazily\n * create the element the first time  it is called to facilitate using\n * the container in non-browser environments.\n * @return {?} the container element\n */\ngetContainerElement(): HTMLElement {\n    if (!this._containerElement) { this._createContainer(); }\n    return this._containerElement;\n  }\n/**\n * Create the overlay container element, which is simply a div\n * with the 'cdk-overlay-container' class on the document body.\n * @return {?}\n */\nprotected _createContainer(): void {\n    let /** @type {?} */ container = document.createElement('div');\n    container.classList.add('cdk-overlay-container');\n\n    document.body.appendChild(container);\n    this._containerElement = container;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction OverlayContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlayContainer.ctorParameters;\n/** @type {?} */\nOverlayContainer.prototype._containerElement;\n}\n\n/**\n * \\@docs-private\n * @param {?} parentContainer\n * @return {?}\n */\nexport function OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer: OverlayContainer) {\n  return parentContainer || new OverlayContainer();\n}\n/**\n * \\@docs-private\n */\nexport const OVERLAY_CONTAINER_PROVIDER = {\n  // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n  provide: OverlayContainer,\n  deps: [[new Optional(), new SkipSelf(), OverlayContainer]],\n  useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ElementRef, Injectable} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ConnectedPositionStrategy} from './connected-position-strategy';\nimport {GlobalPositionStrategy} from './global-position-strategy';\nimport {OverlayConnectionPosition, OriginConnectionPosition} from './connected-position';\n/**\n * Builder for overlay position strategy.\n */\nexport class OverlayPositionBuilder {\n/**\n * @param {?} _viewportRuler\n */\nconstructor(private _viewportRuler: ViewportRuler) { }\n/**\n * Creates a global position strategy.\n * @return {?}\n */\nglobal(): GlobalPositionStrategy {\n    return new GlobalPositionStrategy();\n  }\n/**\n * Creates a relative position strategy.\n * @param {?} elementRef\n * @param {?} originPos\n * @param {?} overlayPos\n * @return {?}\n */\nconnectedTo(\n      elementRef: ElementRef,\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition): ConnectedPositionStrategy {\n    return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewportRuler, },\n];\n}\n\nfunction OverlayPositionBuilder_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayPositionBuilder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOverlayPositionBuilder.ctorParameters;\n/** @type {?} */\nOverlayPositionBuilder.prototype._viewportRuler;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {PositionStrategy} from './position-strategy';\nimport {OverlayRef} from '../overlay-ref';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nexport class GlobalPositionStrategy implements PositionStrategy {\n/**\n * The overlay to which this strategy is attached.\n */\nprivate _overlayRef: OverlayRef;\nprivate _cssPosition: string = 'static';\nprivate _topOffset: string = '';\nprivate _bottomOffset: string = '';\nprivate _leftOffset: string = '';\nprivate _rightOffset: string = '';\nprivate _alignItems: string = '';\nprivate _justifyContent: string = '';\nprivate _width: string = '';\nprivate _height: string = '';\nprivate _wrapper: HTMLElement | null = null;\n/**\n * @param {?} overlayRef\n * @return {?}\n */\nattach(overlayRef: OverlayRef): void {\n    this._overlayRef = overlayRef;\n  }\n/**\n * Sets the top position of the overlay. Clears any previously set vertical position.\n * @param {?=} value New top offset.\n * @return {?}\n */\ntop(value = ''): this {\n    this._bottomOffset = '';\n    this._topOffset = value;\n    this._alignItems = 'flex-start';\n    return this;\n  }\n/**\n * Sets the left position of the overlay. Clears any previously set horizontal position.\n * @param {?=} value New left offset.\n * @return {?}\n */\nleft(value = ''): this {\n    this._rightOffset = '';\n    this._leftOffset = value;\n    this._justifyContent = 'flex-start';\n    return this;\n  }\n/**\n * Sets the bottom position of the overlay. Clears any previously set vertical position.\n * @param {?=} value New bottom offset.\n * @return {?}\n */\nbottom(value = ''): this {\n    this._topOffset = '';\n    this._bottomOffset = value;\n    this._alignItems = 'flex-end';\n    return this;\n  }\n/**\n * Sets the right position of the overlay. Clears any previously set horizontal position.\n * @param {?=} value New right offset.\n * @return {?}\n */\nright(value = ''): this {\n    this._leftOffset = '';\n    this._rightOffset = value;\n    this._justifyContent = 'flex-end';\n    return this;\n  }\n/**\n * Sets the overlay width and clears any previously set width.\n * @param {?=} value New width for the overlay\n * @return {?}\n */\nwidth(value = ''): this {\n    this._width = value;\n\n    // When the width is 100%, we should reset the `left` and the offset,\n    // in order to ensure that the element is flush against the viewport edge.\n    if (value === '100%') {\n      this.left('0px');\n    }\n\n    return this;\n  }\n/**\n * Sets the overlay height and clears any previously set height.\n * @param {?=} value New height for the overlay\n * @return {?}\n */\nheight(value = ''): this {\n    this._height = value;\n\n    // When the height is 100%, we should reset the `top` and the offset,\n    // in order to ensure that the element is flush against the viewport edge.\n    if (value === '100%') {\n      this.top('0px');\n    }\n\n    return this;\n  }\n/**\n * Centers the overlay horizontally with an optional offset.\n * Clears any previously set horizontal position.\n * \n * @param {?=} offset Overlay offset from the horizontal center.\n * @return {?}\n */\ncenterHorizontally(offset = ''): this {\n    this.left(offset);\n    this._justifyContent = 'center';\n    return this;\n  }\n/**\n * Centers the overlay vertically with an optional offset.\n * Clears any previously set vertical position.\n * \n * @param {?=} offset Overlay offset from the vertical center.\n * @return {?}\n */\ncenterVertically(offset = ''): this {\n    this.top(offset);\n    this._alignItems = 'center';\n    return this;\n  }\n/**\n * Apply the position to the element.\n * \\@docs-private \n * \n * @return {?} Resolved when the styles have been applied.\n */\napply(): void {\n    const /** @type {?} */ element = this._overlayRef.overlayElement;\n\n    if (!this._wrapper && element.parentNode) {\n      this._wrapper = document.createElement('div');\n      this._wrapper.classList.add('cdk-global-overlay-wrapper');\n      element.parentNode.insertBefore(this._wrapper, element);\n      this._wrapper.appendChild(element);\n    }\n\n    let /** @type {?} */ styles = element.style;\n    let /** @type {?} */ parentStyles = ( /** @type {?} */((element.parentNode as HTMLElement))).style;\n\n    styles.position = this._cssPosition;\n    styles.marginTop = this._topOffset;\n    styles.marginLeft = this._leftOffset;\n    styles.marginBottom = this._bottomOffset;\n    styles.marginRight = this._rightOffset;\n    styles.width = this._width;\n    styles.height = this._height;\n\n    parentStyles.justifyContent = this._justifyContent;\n    parentStyles.alignItems = this._alignItems;\n  }\n/**\n * Removes the wrapper element from the DOM.\n * @return {?}\n */\ndispose(): void {\n    if (this._wrapper && this._wrapper.parentNode) {\n      this._wrapper.parentNode.removeChild(this._wrapper);\n      this._wrapper = null;\n    }\n  }\n}\n\nfunction GlobalPositionStrategy_tsickle_Closure_declarations() {\n/**\n * The overlay to which this strategy is attached.\n * @type {?}\n */\nGlobalPositionStrategy.prototype._overlayRef;\n/** @type {?} */\nGlobalPositionStrategy.prototype._cssPosition;\n/** @type {?} */\nGlobalPositionStrategy.prototype._topOffset;\n/** @type {?} */\nGlobalPositionStrategy.prototype._bottomOffset;\n/** @type {?} */\nGlobalPositionStrategy.prototype._leftOffset;\n/** @type {?} */\nGlobalPositionStrategy.prototype._rightOffset;\n/** @type {?} */\nGlobalPositionStrategy.prototype._alignItems;\n/** @type {?} */\nGlobalPositionStrategy.prototype._justifyContent;\n/** @type {?} */\nGlobalPositionStrategy.prototype._width;\n/** @type {?} */\nGlobalPositionStrategy.prototype._height;\n/** @type {?} */\nGlobalPositionStrategy.prototype._wrapper;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {PositionStrategy} from './position-strategy';\nimport {ElementRef} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  ConnectionPositionPair,\n  OriginConnectionPosition,\n  OverlayConnectionPosition,\n  ConnectedOverlayPositionChange,\n  ScrollingVisibility,\n} from './connected-position';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\nimport {Scrollable} from '@angular/cdk/scrolling';\nimport {isElementScrolledOutsideView, isElementClippedByScrolling} from './scroll-clip';\nimport {OverlayRef} from '../overlay-ref';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nexport class ConnectedPositionStrategy implements PositionStrategy {\n/**\n * The overlay to which this strategy is attached.\n */\nprivate _overlayRef: OverlayRef;\nprivate _dir = 'ltr';\n/**\n * The offset in pixels for the overlay connection point on the x-axis\n */\nprivate _offsetX: number = 0;\n/**\n * The offset in pixels for the overlay connection point on the y-axis\n */\nprivate _offsetY: number = 0;\n/**\n * The Scrollable containers used to check scrollable view properties on position change.\n */\nprivate scrollables: Scrollable[] = [];\n/**\n * Whether the we're dealing with an RTL context\n * @return {?}\n */\nget _isRtl() {\n    return this._dir === 'rtl';\n  }\n/**\n * Ordered list of preferred positions, from most to least desirable.\n */\n_preferredPositions: ConnectionPositionPair[] = [];\n/**\n * The origin element against which the overlay will be positioned.\n */\nprivate _origin: HTMLElement;\n/**\n * The overlay pane element.\n */\nprivate _pane: HTMLElement;\n/**\n * The last position to have been calculated as the best fit position.\n */\nprivate _lastConnectedPosition: ConnectionPositionPair;\n\n  _onPositionChange:\n      Subject<ConnectedOverlayPositionChange> = new Subject<ConnectedOverlayPositionChange>();\n/**\n * Emits an event when the connection point changes.\n * @return {?}\n */\nget onPositionChange(): Observable<ConnectedOverlayPositionChange> {\n    return this._onPositionChange.asObservable();\n  }\n/**\n * @param {?} originPos\n * @param {?} overlayPos\n * @param {?} _connectedTo\n * @param {?} _viewportRuler\n */\nconstructor(\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition,\nprivate _connectedTo: ElementRef,\nprivate _viewportRuler: ViewportRuler) {\n    this._origin = this._connectedTo.nativeElement;\n    this.withFallbackPosition(originPos, overlayPos);\n  }\n/**\n * Ordered list of preferred positions, from most to least desirable.\n * @return {?}\n */\nget positions() {\n    return this._preferredPositions;\n  }\n/**\n * @param {?} overlayRef\n * @return {?}\n */\nattach(overlayRef: OverlayRef): void {\n    this._overlayRef = overlayRef;\n    this._pane = overlayRef.overlayElement;\n  }\n/**\n * Performs any cleanup after the element is destroyed.\n * @return {?}\n */\ndispose() { }\n/**\n * Updates the position of the overlay element, using whichever preferred position relative\n * to the origin fits on-screen.\n * \\@docs-private \n * \n * @return {?} Resolves when the styles have been applied.\n */\napply(): void {\n    // We need the bounding rects for the origin and the overlay to determine how to position\n    // the overlay relative to the origin.\n    const /** @type {?} */ element = this._pane;\n    const /** @type {?} */ originRect = this._origin.getBoundingClientRect();\n    const /** @type {?} */ overlayRect = element.getBoundingClientRect();\n\n    // We use the viewport rect to determine whether a position would go off-screen.\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n\n    // Fallback point if none of the fallbacks fit into the viewport.\n    let /** @type {?} */ fallbackPoint: OverlayPoint | undefined;\n    let /** @type {?} */ fallbackPosition: ConnectionPositionPair | undefined;\n\n    // We want to place the overlay in the first of the preferred positions such that the\n    // overlay fits on-screen.\n    for (let /** @type {?} */ pos of this._preferredPositions) {\n      // Get the (x, y) point of connection on the origin, and then use that to get the\n      // (top, left) coordinate for the overlay at `pos`.\n      let /** @type {?} */ originPoint = this._getOriginConnectionPoint(originRect, pos);\n      let /** @type {?} */ overlayPoint = this._getOverlayPoint(originPoint, overlayRect, viewportRect, pos);\n\n      // If the overlay in the calculated position fits on-screen, put it there and we're done.\n      if (overlayPoint.fitsInViewport) {\n        this._setElementPosition(element, overlayRect, overlayPoint, pos);\n\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastConnectedPosition = pos;\n\n        return;\n      } else if (!fallbackPoint || fallbackPoint.visibleArea < overlayPoint.visibleArea) {\n        fallbackPoint = overlayPoint;\n        fallbackPosition = pos;\n      }\n    }\n\n    // If none of the preferred positions were in the viewport, take the one\n    // with the largest visible area.\n    this._setElementPosition(element, overlayRect, /** @type {?} */(( fallbackPoint)), /** @type {?} */(( fallbackPosition)));\n  }\n/**\n * This re-aligns the overlay element with the trigger in its last calculated position,\n * even if a position higher in the \"preferred positions\" list would now fit. This\n * allows one to re-align the panel without changing the orientation of the panel.\n * @return {?}\n */\nrecalculateLastPosition(): void {\n    const /** @type {?} */ originRect = this._origin.getBoundingClientRect();\n    const /** @type {?} */ overlayRect = this._pane.getBoundingClientRect();\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n    const /** @type {?} */ lastPosition = this._lastConnectedPosition || this._preferredPositions[0];\n\n    let /** @type {?} */ originPoint = this._getOriginConnectionPoint(originRect, lastPosition);\n    let /** @type {?} */ overlayPoint = this._getOverlayPoint(originPoint, overlayRect, viewportRect, lastPosition);\n    this._setElementPosition(this._pane, overlayRect, overlayPoint, lastPosition);\n  }\n/**\n * Sets the list of Scrollable containers that host the origin element so that\n * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n * Scrollable must be an ancestor element of the strategy's origin element.\n * @param {?} scrollables\n * @return {?}\n */\nwithScrollableContainers(scrollables: Scrollable[]) {\n    this.scrollables = scrollables;\n  }\n/**\n * Adds a new preferred fallback position.\n * @param {?} originPos\n * @param {?} overlayPos\n * @return {?}\n */\nwithFallbackPosition(\n      originPos: OriginConnectionPosition,\n      overlayPos: OverlayConnectionPosition): this {\n    this._preferredPositions.push(new ConnectionPositionPair(originPos, overlayPos));\n    return this;\n  }\n/**\n * Sets the layout direction so the overlay's position can be adjusted to match.\n * @param {?} dir New layout direction.\n * @return {?}\n */\nwithDirection(dir: 'ltr' | 'rtl'): this {\n    this._dir = dir;\n    return this;\n  }\n/**\n * Sets an offset for the overlay's connection point on the x-axis\n * @param {?} offset New offset in the X axis.\n * @return {?}\n */\nwithOffsetX(offset: number): this {\n    this._offsetX = offset;\n    return this;\n  }\n/**\n * Sets an offset for the overlay's connection point on the y-axis\n * @param {?} offset New offset in the Y axis.\n * @return {?}\n */\nwithOffsetY(offset: number): this {\n    this._offsetY = offset;\n    return this;\n  }\n/**\n * Gets the horizontal (x) \"start\" dimension based on whether the overlay is in an RTL context.\n * @param {?} rect\n * @return {?}\n */\nprivate _getStartX(rect: ClientRect): number {\n    return this._isRtl ? rect.right : rect.left;\n  }\n/**\n * Gets the horizontal (x) \"end\" dimension based on whether the overlay is in an RTL context.\n * @param {?} rect\n * @return {?}\n */\nprivate _getEndX(rect: ClientRect): number {\n    return this._isRtl ? rect.left : rect.right;\n  }\n/**\n * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n * @param {?} originRect\n * @param {?} pos\n * @return {?}\n */\nprivate _getOriginConnectionPoint(originRect: ClientRect, pos: ConnectionPositionPair): Point {\n    const /** @type {?} */ originStartX = this._getStartX(originRect);\n    const /** @type {?} */ originEndX = this._getEndX(originRect);\n\n    let /** @type {?} */ x: number;\n    if (pos.originX == 'center') {\n      x = originStartX + (originRect.width / 2);\n    } else {\n      x = pos.originX == 'start' ? originStartX : originEndX;\n    }\n\n    let /** @type {?} */ y: number;\n    if (pos.originY == 'center') {\n      y = originRect.top + (originRect.height / 2);\n    } else {\n      y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n    }\n\n    return {x, y};\n  }\n/**\n * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n * origin point to which the overlay should be connected, as well as how much of the element\n * would be inside the viewport at that position.\n * @param {?} originPoint\n * @param {?} overlayRect\n * @param {?} viewportRect\n * @param {?} pos\n * @return {?}\n */\nprivate _getOverlayPoint(\n      originPoint: Point,\n      overlayRect: ClientRect,\n      viewportRect: ClientRect,\n      pos: ConnectionPositionPair): OverlayPoint {\n    // Calculate the (overlayStartX, overlayStartY), the start of the potential overlay position\n    // relative to the origin point.\n    let /** @type {?} */ overlayStartX: number;\n    if (pos.overlayX == 'center') {\n      overlayStartX = -overlayRect.width / 2;\n    } else if (pos.overlayX === 'start') {\n      overlayStartX = this._isRtl ? -overlayRect.width : 0;\n    } else {\n      overlayStartX = this._isRtl ? 0 : -overlayRect.width;\n    }\n\n    let /** @type {?} */ overlayStartY: number;\n    if (pos.overlayY == 'center') {\n      overlayStartY = -overlayRect.height / 2;\n    } else {\n      overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n    }\n\n    // The (x, y) coordinates of the overlay.\n    let /** @type {?} */ x = originPoint.x + overlayStartX + this._offsetX;\n    let /** @type {?} */ y = originPoint.y + overlayStartY + this._offsetY;\n\n    // How much the overlay would overflow at this position, on each side.\n    let /** @type {?} */ leftOverflow = 0 - x;\n    let /** @type {?} */ rightOverflow = (x + overlayRect.width) - viewportRect.width;\n    let /** @type {?} */ topOverflow = 0 - y;\n    let /** @type {?} */ bottomOverflow = (y + overlayRect.height) - viewportRect.height;\n\n    // Visible parts of the element on each axis.\n    let /** @type {?} */ visibleWidth = this._subtractOverflows(overlayRect.width, leftOverflow, rightOverflow);\n    let /** @type {?} */ visibleHeight = this._subtractOverflows(overlayRect.height, topOverflow, bottomOverflow);\n\n    // The area of the element that's within the viewport.\n    let /** @type {?} */ visibleArea = visibleWidth * visibleHeight;\n    let /** @type {?} */ fitsInViewport = (overlayRect.width * overlayRect.height) === visibleArea;\n\n    return {x, y, fitsInViewport, visibleArea};\n  }\n/**\n * Gets the view properties of the trigger and overlay, including whether they are clipped\n * or completely outside the view of any of the strategy's scrollables.\n * @param {?} overlay\n * @return {?}\n */\nprivate _getScrollVisibility(overlay: HTMLElement): ScrollingVisibility {\n    const /** @type {?} */ originBounds = this._origin.getBoundingClientRect();\n    const /** @type {?} */ overlayBounds = overlay.getBoundingClientRect();\n    const /** @type {?} */ scrollContainerBounds =\n        this.scrollables.map(s => s.getElementRef().nativeElement.getBoundingClientRect());\n\n    return {\n      isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n      isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n      isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n      isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n    };\n  }\n/**\n * Physically positions the overlay element to the given coordinate.\n * @param {?} element\n * @param {?} overlayRect\n * @param {?} overlayPoint\n * @param {?} pos\n * @return {?}\n */\nprivate _setElementPosition(\n      element: HTMLElement,\n      overlayRect: ClientRect,\n      overlayPoint: Point,\n      pos: ConnectionPositionPair) {\n\n    // We want to set either `top` or `bottom` based on whether the overlay wants to appear above\n    // or below the origin and the direction in which the element will expand.\n    let /** @type {?} */ verticalStyleProperty = pos.overlayY === 'bottom' ? 'bottom' : 'top';\n\n    // When using `bottom`, we adjust the y position such that it is the distance\n    // from the bottom of the viewport rather than the top.\n    let /** @type {?} */ y = verticalStyleProperty === 'top' ?\n        overlayPoint.y :\n        document.documentElement.clientHeight - (overlayPoint.y + overlayRect.height);\n\n    // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n    // or \"after\" the origin, which determines the direction in which the element will expand.\n    // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n    // page is in RTL or LTR.\n    let /** @type {?} */ horizontalStyleProperty: string;\n    if (this._dir === 'rtl') {\n      horizontalStyleProperty = pos.overlayX === 'end' ? 'left' : 'right';\n    } else {\n      horizontalStyleProperty = pos.overlayX === 'end' ? 'right' : 'left';\n    }\n\n    // When we're setting `right`, we adjust the x position such that it is the distance\n    // from the right edge of the viewport rather than the left edge.\n    let /** @type {?} */ x = horizontalStyleProperty === 'left' ?\n      overlayPoint.x :\n      document.documentElement.clientWidth - (overlayPoint.x + overlayRect.width);\n\n\n    // Reset any existing styles. This is necessary in case the preferred position has\n    // changed since the last `apply`.\n    ['top', 'bottom', 'left', 'right'].forEach(p => element.style[p] = null);\n\n    element.style[verticalStyleProperty] = `${y}px`;\n    element.style[horizontalStyleProperty] = `${x}px`;\n\n    // Notify that the position has been changed along with its change properties.\n    const /** @type {?} */ scrollableViewProperties = this._getScrollVisibility(element);\n    const /** @type {?} */ positionChange = new ConnectedOverlayPositionChange(pos, scrollableViewProperties);\n    this._onPositionChange.next(positionChange);\n  }\n/**\n * Subtracts the amount that an element is overflowing on an axis from it's length.\n * @param {?} length\n * @param {...?} overflows\n * @return {?}\n */\nprivate _subtractOverflows(length: number, ...overflows: number[]): number {\n    return overflows.reduce((currentValue: number, currentOverflow: number) => {\n      return currentValue - Math.max(currentOverflow, 0);\n    }, length);\n  }\n}\n\nfunction ConnectedPositionStrategy_tsickle_Closure_declarations() {\n/**\n * The overlay to which this strategy is attached.\n * @type {?}\n */\nConnectedPositionStrategy.prototype._overlayRef;\n/** @type {?} */\nConnectedPositionStrategy.prototype._dir;\n/**\n * The offset in pixels for the overlay connection point on the x-axis\n * @type {?}\n */\nConnectedPositionStrategy.prototype._offsetX;\n/**\n * The offset in pixels for the overlay connection point on the y-axis\n * @type {?}\n */\nConnectedPositionStrategy.prototype._offsetY;\n/**\n * The Scrollable containers used to check scrollable view properties on position change.\n * @type {?}\n */\nConnectedPositionStrategy.prototype.scrollables;\n/**\n * Ordered list of preferred positions, from most to least desirable.\n * @type {?}\n */\nConnectedPositionStrategy.prototype._preferredPositions;\n/**\n * The origin element against which the overlay will be positioned.\n * @type {?}\n */\nConnectedPositionStrategy.prototype._origin;\n/**\n * The overlay pane element.\n * @type {?}\n */\nConnectedPositionStrategy.prototype._pane;\n/**\n * The last position to have been calculated as the best fit position.\n * @type {?}\n */\nConnectedPositionStrategy.prototype._lastConnectedPosition;\n/** @type {?} */\nConnectedPositionStrategy.prototype._onPositionChange;\n/** @type {?} */\nConnectedPositionStrategy.prototype._connectedTo;\n/** @type {?} */\nConnectedPositionStrategy.prototype._viewportRuler;\n}\n\n\n/** A simple (x, y) coordinate. */\ninterface Point {\n  x: number;\n  y: number;\n}\n\n/**\n * Expands the simple (x, y) coordinate by adding info about whether the\n * element would fit inside the viewport at that position, as well as\n * how much of the element would be visible.\n */\ninterface OverlayPoint extends Point {\n  visibleArea: number;\n  fitsInViewport: boolean;\n}\n","\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * \\@docs-private\n * @param {?} element Dimensions of the element (from getBoundingClientRect)\n * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @return {?} Whether the element is scrolled out of view\n */\nexport function isElementScrolledOutsideView(element: ClientRect, scrollContainers: ClientRect[]) {\n  return scrollContainers.some(containerBounds => {\n    const /** @type {?} */ outsideAbove = element.bottom < containerBounds.top;\n    const /** @type {?} */ outsideBelow = element.top > containerBounds.bottom;\n    const /** @type {?} */ outsideLeft = element.right < containerBounds.left;\n    const /** @type {?} */ outsideRight = element.left > containerBounds.right;\n\n    return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n  });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * \\@docs-private\n * @param {?} element Dimensions of the element (from getBoundingClientRect)\n * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @return {?} Whether the element is clipped\n */\nexport function isElementClippedByScrolling(element: ClientRect, scrollContainers: ClientRect[]) {\n  return scrollContainers.some(scrollContainerRect => {\n    const /** @type {?} */ clippedAbove = element.top < scrollContainerRect.top;\n    const /** @type {?} */ clippedBelow = element.bottom > scrollContainerRect.bottom;\n    const /** @type {?} */ clippedLeft = element.left < scrollContainerRect.left;\n    const /** @type {?} */ clippedRight = element.right > scrollContainerRect.right;\n\n    return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n  });\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Horizontal dimension of a connection point on the perimeter of the origin or overlay element. */\n\nimport {Optional} from '@angular/core';\nexport type HorizontalConnectionPos = 'start' | 'center' | 'end';\n\n/** Vertical dimension of a connection point on the perimeter of the origin or overlay element. */\nexport type VerticalConnectionPos = 'top' | 'center' | 'bottom';\n\n\n/** A connection point on the origin element. */\nexport interface OriginConnectionPosition {\n  originX: HorizontalConnectionPos;\n  originY: VerticalConnectionPos;\n}\n\n/** A connection point on the overlay element. */\nexport interface OverlayConnectionPosition {\n  overlayX: HorizontalConnectionPos;\n  overlayY: VerticalConnectionPos;\n}\n/**\n * The points of the origin element and the overlay element to connect.\n */\nexport class ConnectionPositionPair {\n  originX: HorizontalConnectionPos;\n  originY: VerticalConnectionPos;\n  overlayX: HorizontalConnectionPos;\n  overlayY: VerticalConnectionPos;\n/**\n * @param {?} origin\n * @param {?} overlay\n */\nconstructor(origin: OriginConnectionPosition, overlay: OverlayConnectionPosition) {\n    this.originX = origin.originX;\n    this.originY = origin.originY;\n    this.overlayX = overlay.overlayX;\n    this.overlayY = overlay.overlayY;\n  }\n}\n\nfunction ConnectionPositionPair_tsickle_Closure_declarations() {\n/** @type {?} */\nConnectionPositionPair.prototype.originX;\n/** @type {?} */\nConnectionPositionPair.prototype.originY;\n/** @type {?} */\nConnectionPositionPair.prototype.overlayX;\n/** @type {?} */\nConnectionPositionPair.prototype.overlayY;\n}\n\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n * \n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n * \n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n * \n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n */\nexport class ScrollingVisibility {\n  isOriginClipped: boolean;\n  isOriginOutsideView: boolean;\n  isOverlayClipped: boolean;\n  isOverlayOutsideView: boolean;\n}\n\nfunction ScrollingVisibility_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollingVisibility.prototype.isOriginClipped;\n/** @type {?} */\nScrollingVisibility.prototype.isOriginOutsideView;\n/** @type {?} */\nScrollingVisibility.prototype.isOverlayClipped;\n/** @type {?} */\nScrollingVisibility.prototype.isOverlayOutsideView;\n}\n\n/**\n * The change event emitted by the strategy when a fallback position is used.\n */\nexport class ConnectedOverlayPositionChange {\n/**\n * @param {?} connectionPair\n * @param {?} scrollableViewProperties\n */\nconstructor(public connectionPair: ConnectionPositionPair,\npublic scrollableViewProperties: ScrollingVisibility) {}\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ConnectionPositionPair, },\n{type: ScrollingVisibility, decorators: [{ type: Optional }, ]},\n];\n}\n\nfunction ConnectedOverlayPositionChange_tsickle_Closure_declarations() {\n/**\n * @nocollapse\n * @type {?}\n */\nConnectedOverlayPositionChange.ctorParameters;\n/** @type {?} */\nConnectedOverlayPositionChange.prototype.connectionPair;\n/** @type {?} */\nConnectedOverlayPositionChange.prototype.scrollableViewProperties;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgZone} from '@angular/core';\nimport {PortalHost, Portal} from '@angular/cdk/portal';\nimport {OverlayConfig} from './overlay-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nexport class OverlayRef implements PortalHost {\nprivate _backdropElement: HTMLElement | null = null;\nprivate _backdropClick: Subject<any> = new Subject();\nprivate _attachments = new Subject<void>();\nprivate _detachments = new Subject<void>();\n/**\n * @param {?} _portalHost\n * @param {?} _pane\n * @param {?} _state\n * @param {?} _ngZone\n */\nconstructor(\nprivate _portalHost: PortalHost,\nprivate _pane: HTMLElement,\nprivate _state: OverlayConfig,\nprivate _ngZone: NgZone) {\n\n    if (_state.scrollStrategy) {\n      _state.scrollStrategy.attach(this);\n    }\n  }\n/**\n * The overlay's HTML element\n * @return {?}\n */\nget overlayElement(): HTMLElement {\n    return this._pane;\n  }\n/**\n * Attaches the overlay to a portal instance and adds the backdrop.\n * @param {?} portal Portal instance to which to attach the overlay.\n * @return {?} The portal attachment result.\n */\nattach(portal: Portal<any>): any {\n    let /** @type {?} */ attachResult = this._portalHost.attach(portal);\n\n    if (this._state.positionStrategy) {\n      this._state.positionStrategy.attach(this);\n    }\n\n    // Update the pane element with the given state configuration.\n    this._updateStackingOrder();\n    this.updateSize();\n    this.updateDirection();\n    this.updatePosition();\n\n    if (this._state.scrollStrategy) {\n      this._state.scrollStrategy.enable();\n    }\n\n    // Enable pointer events for the overlay pane element.\n    this._togglePointerEvents(true);\n\n    if (this._state.hasBackdrop) {\n      this._attachBackdrop();\n    }\n\n    if (this._state.panelClass) {\n      // We can't do a spread here, because IE doesn't support setting multiple classes.\n      if (Array.isArray(this._state.panelClass)) {\n        this._state.panelClass.forEach(cls => this._pane.classList.add(cls));\n      } else {\n        this._pane.classList.add(this._state.panelClass);\n      }\n    }\n\n    // Only emit the `attachments` event once all other setup is done.\n    this._attachments.next();\n\n    return attachResult;\n  }\n/**\n * Detaches an overlay from a portal.\n * @return {?} Resolves when the overlay has been detached.\n */\ndetach(): Promise<any> {\n    this.detachBackdrop();\n\n    // When the overlay is detached, the pane element should disable pointer events.\n    // This is necessary because otherwise the pane element will cover the page and disable\n    // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n    this._togglePointerEvents(false);\n\n    if (this._state.scrollStrategy) {\n      this._state.scrollStrategy.disable();\n    }\n\n    let /** @type {?} */ detachmentResult = this._portalHost.detach();\n\n    // Only emit after everything is detached.\n    this._detachments.next();\n\n    return detachmentResult;\n  }\n/**\n * Cleans up the overlay from the DOM.\n * @return {?}\n */\ndispose(): void {\n    if (this._state.positionStrategy) {\n      this._state.positionStrategy.dispose();\n    }\n\n    if (this._state.scrollStrategy) {\n      this._state.scrollStrategy.disable();\n    }\n\n    this.detachBackdrop();\n    this._portalHost.dispose();\n    this._attachments.complete();\n    this._backdropClick.complete();\n    this._detachments.next();\n    this._detachments.complete();\n  }\n/**\n * Checks whether the overlay has been attached.\n * @return {?}\n */\nhasAttached(): boolean {\n    return this._portalHost.hasAttached();\n  }\n/**\n * Returns an observable that emits when the backdrop has been clicked.\n * @return {?}\n */\nbackdropClick(): Observable<void> {\n    return this._backdropClick.asObservable();\n  }\n/**\n * Returns an observable that emits when the overlay has been attached.\n * @return {?}\n */\nattachments(): Observable<void> {\n    return this._attachments.asObservable();\n  }\n/**\n * Returns an observable that emits when the overlay has been detached.\n * @return {?}\n */\ndetachments(): Observable<void> {\n    return this._detachments.asObservable();\n  }\n/**\n * Gets the current state config of the overlay.\n * @return {?}\n */\ngetState(): OverlayConfig {\n    return this._state;\n  }\n/**\n * Updates the position of the overlay based on the position strategy.\n * @return {?}\n */\nupdatePosition() {\n    if (this._state.positionStrategy) {\n      this._state.positionStrategy.apply();\n    }\n  }\n/**\n * Updates the text direction of the overlay panel.\n * @return {?}\n */\nprivate updateDirection() {\n    this._pane.setAttribute('dir', /** @type {?} */(( this._state.direction)));\n  }\n/**\n * Updates the size of the overlay based on the overlay config.\n * @return {?}\n */\nupdateSize() {\n    if (this._state.width || this._state.width === 0) {\n      this._pane.style.width = formatCssUnit(this._state.width);\n    }\n\n    if (this._state.height || this._state.height === 0) {\n      this._pane.style.height = formatCssUnit(this._state.height);\n    }\n\n    if (this._state.minWidth || this._state.minWidth === 0) {\n      this._pane.style.minWidth = formatCssUnit(this._state.minWidth);\n    }\n\n    if (this._state.minHeight || this._state.minHeight === 0) {\n      this._pane.style.minHeight = formatCssUnit(this._state.minHeight);\n    }\n\n    if (this._state.maxWidth || this._state.maxWidth === 0) {\n      this._pane.style.maxWidth = formatCssUnit(this._state.maxWidth);\n    }\n\n    if (this._state.maxHeight || this._state.maxHeight === 0) {\n      this._pane.style.maxHeight = formatCssUnit(this._state.maxHeight);\n    }\n  }\n/**\n * Toggles the pointer events for the overlay pane element.\n * @param {?} enablePointer\n * @return {?}\n */\nprivate _togglePointerEvents(enablePointer: boolean) {\n    this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n  }\n/**\n * Attaches a backdrop for this overlay.\n * @return {?}\n */\nprivate _attachBackdrop() {\n    this._backdropElement = document.createElement('div');\n    this._backdropElement.classList.add('cdk-overlay-backdrop');\n\n    if (this._state.backdropClass) {\n      this._backdropElement.classList.add(this._state.backdropClass);\n    } /** @type {?} */((\n\n    // Insert the backdrop before the pane in the DOM order,\n    // in order to handle stacked overlays properly.\n    this._pane.parentElement)).insertBefore(this._backdropElement, this._pane);\n\n    // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n    // action desired when such a click occurs (usually closing the overlay).\n    this._backdropElement.addEventListener('click', () => this._backdropClick.next(null));\n\n    // Add class to fade-in the backdrop after one frame.\n    requestAnimationFrame(() => {\n      if (this._backdropElement) {\n        this._backdropElement.classList.add('cdk-overlay-backdrop-showing');\n      }\n    });\n  }\n/**\n * Updates the stacking order of the element, moving it to the top if necessary.\n * This is required in cases where one overlay was detached, while another one,\n * that should be behind it, was destroyed. The next time both of them are opened,\n * the stacking will be wrong, because the detached element's pane will still be\n * in its original DOM position.\n * @return {?}\n */\nprivate _updateStackingOrder() {\n    if (this._pane.nextSibling) { /** @type {?} */((\n      this._pane.parentNode)).appendChild(this._pane);\n    }\n  }\n/**\n * Detaches the backdrop (if any) associated with the overlay.\n * @return {?}\n */\ndetachBackdrop(): void {\n    let /** @type {?} */ backdropToDetach = this._backdropElement;\n\n    if (backdropToDetach) {\n      let /** @type {?} */ finishDetach = () => {\n        // It may not be attached to anything in certain cases (e.g. unit tests).\n        if (backdropToDetach && backdropToDetach.parentNode) {\n          backdropToDetach.parentNode.removeChild(backdropToDetach);\n        }\n\n        // It is possible that a new portal has been attached to this overlay since we started\n        // removing the backdrop. If that is the case, only clear the backdrop reference if it\n        // is still the same instance that we started to remove.\n        if (this._backdropElement == backdropToDetach) {\n          this._backdropElement = null;\n        }\n      };\n\n      backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n\n      if (this._state.backdropClass) {\n        backdropToDetach.classList.remove(this._state.backdropClass);\n      }\n\n      backdropToDetach.addEventListener('transitionend', finishDetach);\n\n      // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n      // In this case we make it unclickable and we try to remove it after a delay.\n      backdropToDetach.style.pointerEvents = 'none';\n\n      // Run this outside the Angular zone because there's nothing that Angular cares about.\n      // If it were to run inside the Angular zone, every test that used Overlay would have to be\n      // either async or fakeAsync.\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(finishDetach, 500);\n      });\n    }\n  }\n}\n\nfunction OverlayRef_tsickle_Closure_declarations() {\n/** @type {?} */\nOverlayRef.prototype._backdropElement;\n/** @type {?} */\nOverlayRef.prototype._backdropClick;\n/** @type {?} */\nOverlayRef.prototype._attachments;\n/** @type {?} */\nOverlayRef.prototype._detachments;\n/** @type {?} */\nOverlayRef.prototype._portalHost;\n/** @type {?} */\nOverlayRef.prototype._pane;\n/** @type {?} */\nOverlayRef.prototype._state;\n/** @type {?} */\nOverlayRef.prototype._ngZone;\n}\n\n/**\n * @param {?} value\n * @return {?}\n */\nfunction formatCssUnit(value: number | string) {\n  return typeof value === 'string' ? /** @type {?} */(( value as string)) : `${value}px`;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {PositionStrategy} from './position/position-strategy';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from './scroll/scroll-strategy';\nimport {NoopScrollStrategy} from './scroll/noop-scroll-strategy';\n/**\n * OverlayConfig captures the initial configuration used when opening an overlay.\n */\nexport class OverlayConfig {\n/**\n * Strategy with which to position the overlay.\n */\npositionStrategy?: PositionStrategy;\n/**\n * Strategy to be used when handling scroll events while the overlay is open.\n */\nscrollStrategy?: ScrollStrategy = new NoopScrollStrategy();\n/**\n * Custom class to add to the overlay pane.\n */\npanelClass?: string | string[] = '';\n/**\n * Whether the overlay has a backdrop.\n */\nhasBackdrop?: boolean = false;\n/**\n * Custom class to add to the backdrop\n */\nbackdropClass?: string = 'cdk-overlay-dark-backdrop';\n/**\n * The width of the overlay panel. If a number is provided, pixel units are assumed.\n */\nwidth?: number | string;\n/**\n * The height of the overlay panel. If a number is provided, pixel units are assumed.\n */\nheight?: number | string;\n/**\n * The min-width of the overlay panel. If a number is provided, pixel units are assumed.\n */\nminWidth?: number | string;\n/**\n * The min-height of the overlay panel. If a number is provided, pixel units are assumed.\n */\nminHeight?: number | string;\n/**\n * The max-width of the overlay panel. If a number is provided, pixel units are assumed.\n */\nmaxWidth?: number | string;\n/**\n * The max-height of the overlay panel. If a number is provided, pixel units are assumed.\n */\nmaxHeight?: number | string;\n/**\n * The direction of the text in the overlay panel.\n */\ndirection?: Direction = 'ltr';\n/**\n * @param {?=} state\n */\nconstructor(state?: OverlayConfig) {\n    if (state) {\n      Object.keys(state).forEach(key => this[key] = state[key]);\n    }\n  }\n}\n\nfunction OverlayConfig_tsickle_Closure_declarations() {\n/**\n * Strategy with which to position the overlay.\n * @type {?}\n */\nOverlayConfig.prototype.positionStrategy;\n/**\n * Strategy to be used when handling scroll events while the overlay is open.\n * @type {?}\n */\nOverlayConfig.prototype.scrollStrategy;\n/**\n * Custom class to add to the overlay pane.\n * @type {?}\n */\nOverlayConfig.prototype.panelClass;\n/**\n * Whether the overlay has a backdrop.\n * @type {?}\n */\nOverlayConfig.prototype.hasBackdrop;\n/**\n * Custom class to add to the backdrop\n * @type {?}\n */\nOverlayConfig.prototype.backdropClass;\n/**\n * The width of the overlay panel. If a number is provided, pixel units are assumed.\n * @type {?}\n */\nOverlayConfig.prototype.width;\n/**\n * The height of the overlay panel. If a number is provided, pixel units are assumed.\n * @type {?}\n */\nOverlayConfig.prototype.height;\n/**\n * The min-width of the overlay panel. If a number is provided, pixel units are assumed.\n * @type {?}\n */\nOverlayConfig.prototype.minWidth;\n/**\n * The min-height of the overlay panel. If a number is provided, pixel units are assumed.\n * @type {?}\n */\nOverlayConfig.prototype.minHeight;\n/**\n * The max-width of the overlay panel. If a number is provided, pixel units are assumed.\n * @type {?}\n */\nOverlayConfig.prototype.maxWidth;\n/**\n * The max-height of the overlay panel. If a number is provided, pixel units are assumed.\n * @type {?}\n */\nOverlayConfig.prototype.maxHeight;\n/**\n * The direction of the text in the overlay panel.\n * @type {?}\n */\nOverlayConfig.prototype.direction;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ScrollStrategy} from './scroll-strategy';\n/**\n * Scroll strategy that doesn't do anything.\n */\nexport class NoopScrollStrategy implements ScrollStrategy {\n/**\n * @return {?}\n */\nenable() { }\n/**\n * @return {?}\n */\ndisable() { }\n/**\n * @return {?}\n */\nattach() { }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {ComponentType,Portal,ComponentPortal,TemplatePortal,PortalHost,BasePortalHost,DomPortalHost,TemplatePortalDirective,PortalHostDirective,PortalModule} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n    NgModule,\n    ComponentRef,\n    Directive,\n    EmbeddedViewRef,\n    TemplateRef,\n    ComponentFactoryResolver,\n    ViewContainerRef,\n    OnDestroy,\n    Input,\n} from '@angular/core';\nimport {Portal, TemplatePortal, ComponentPortal, BasePortalHost} from './portal';\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n * \n * Usage:\n * <ng-template portal #greeting>\n *   <p> Hello {{name}} </p>\n * </ng-template>\n */\nexport class TemplatePortalDirective extends TemplatePortal<any> {\n/**\n * @param {?} templateRef\n * @param {?} viewContainerRef\n */\nconstructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdk-portal], [cdkPortal], [portal]',\n  exportAs: 'cdkPortal',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n{type: ViewContainerRef, },\n];\n}\n\nfunction TemplatePortalDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nTemplatePortalDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTemplatePortalDirective.ctorParameters;\n}\n\n/**\n * Directive version of a PortalHost. Because the directive *is* a PortalHost, portals can be\n * directly attached to it, enabling declarative use.\n * \n * Usage:\n * <ng-template [cdkPortalHost]=\"greeting\"></ng-template>\n */\nexport class PortalHostDirective extends BasePortalHost implements OnDestroy {\n/**\n * The attached portal.\n */\nprivate _portal: Portal<any> | null = null;\n/**\n * @param {?} _componentFactoryResolver\n * @param {?} _viewContainerRef\n */\nconstructor(\nprivate _componentFactoryResolver: ComponentFactoryResolver,\nprivate _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedPortal() { return this.portal; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedPortal(v) { this.portal = v; }\n/**\n * Portal associated with the Portal host.\n * @return {?}\n */\nget portal(): Portal<any> | null {\n    return this._portal;\n  }\n/**\n * @param {?} portal\n * @return {?}\n */\nset portal(portal: Portal<any> | null) {\n    if (this.hasAttached()) {\n      super.detach();\n    }\n\n    if (portal) {\n      super.attach(portal);\n    }\n\n    this._portal = portal;\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    super.dispose();\n    this._portal = null;\n  }\n/**\n * Attach the given ComponentPortal to this PortalHost using the ComponentFactoryResolver.\n * \n * @template T\n * @param {?} portal Portal to be attached to the portal host.\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    portal.setAttachedHost(this);\n\n    // If the portal specifies an origin, use that as the logical location of the component\n    // in the application tree. Otherwise use the location of this PortalHost.\n    let /** @type {?} */ viewContainerRef = portal.viewContainerRef != null ?\n        portal.viewContainerRef :\n        this._viewContainerRef;\n\n    let /** @type {?} */ componentFactory =\n        this._componentFactoryResolver.resolveComponentFactory(portal.component);\n    let /** @type {?} */ ref = viewContainerRef.createComponent(\n        componentFactory, viewContainerRef.length,\n        portal.injector || viewContainerRef.parentInjector);\n\n    super.setDisposeFn(() => ref.destroy());\n    this._portal = portal;\n\n    return ref;\n  }\n/**\n * Attach the given TemplatePortal to this PortlHost as an embedded View.\n * @template C\n * @param {?} portal Portal to be attached.\n * @return {?}\n */\nattachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    portal.setAttachedHost(this);\n    const /** @type {?} */ viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);\n    super.setDisposeFn(() => this._viewContainerRef.clear());\n\n    this._portal = portal;\n\n    return viewRef;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkPortalHost], [portalHost]',\n  inputs: ['portal: cdkPortalHost']\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ComponentFactoryResolver, },\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_deprecatedPortal': [{ type: Input, args: ['portalHost', ] },],\n};\n}\n\nfunction PortalHostDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nPortalHostDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPortalHostDirective.ctorParameters;\n/** @type {?} */\nPortalHostDirective.propDecorators;\n/**\n * The attached portal.\n * @type {?}\n */\nPortalHostDirective.prototype._portal;\n/** @type {?} */\nPortalHostDirective.prototype._componentFactoryResolver;\n/** @type {?} */\nPortalHostDirective.prototype._viewContainerRef;\n}\n\nexport class PortalModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [TemplatePortalDirective, PortalHostDirective],\n  declarations: [TemplatePortalDirective, PortalHostDirective],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction PortalModule_tsickle_Closure_declarations() {\n/** @type {?} */\nPortalModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPortalModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ComponentFactoryResolver,\n  ComponentRef,\n  EmbeddedViewRef,\n  ApplicationRef,\n  Injector,\n} from '@angular/core';\nimport {BasePortalHost, ComponentPortal, TemplatePortal} from './portal';\n/**\n * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n * \n * This is the only part of the portal core that directly touches the DOM.\n */\nexport class DomPortalHost extends BasePortalHost {\n/**\n * @param {?} _hostDomElement\n * @param {?} _componentFactoryResolver\n * @param {?} _appRef\n * @param {?} _defaultInjector\n */\nconstructor(\nprivate _hostDomElement: Element,\nprivate _componentFactoryResolver: ComponentFactoryResolver,\nprivate _appRef: ApplicationRef,\nprivate _defaultInjector: Injector) {\n    super();\n  }\n/**\n * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n * @template T\n * @param {?} portal Portal to be attached\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    let /** @type {?} */ componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n    let /** @type {?} */ componentRef: ComponentRef<T>;\n\n    // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n    // for the component (in terms of Angular's component tree, not rendering).\n    // When the ViewContainerRef is missing, we use the factory to create the component directly\n    // and then manually attach the view to the application.\n    if (portal.viewContainerRef) {\n      componentRef = portal.viewContainerRef.createComponent(\n          componentFactory,\n          portal.viewContainerRef.length,\n          portal.injector || portal.viewContainerRef.parentInjector);\n\n      this.setDisposeFn(() => componentRef.destroy());\n    } else {\n      componentRef = componentFactory.create(portal.injector || this._defaultInjector);\n      this._appRef.attachView(componentRef.hostView);\n      this.setDisposeFn(() => {\n        this._appRef.detachView(componentRef.hostView);\n        componentRef.destroy();\n      });\n    }\n    // At this point the component has been instantiated, so we move it to the location in the DOM\n    // where we want it to be rendered.\n    this._hostDomElement.appendChild(this._getComponentRootNode(componentRef));\n\n    return componentRef;\n  }\n/**\n * Attaches a template portal to the DOM as an embedded view.\n * @template C\n * @param {?} portal Portal to be attached.\n * @return {?}\n */\nattachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    let /** @type {?} */ viewContainer = portal.viewContainerRef;\n    let /** @type {?} */ viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context);\n    viewRef.detectChanges();\n\n    // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n    // But for the DomPortalHost the view can be added everywhere in the DOM (e.g Overlay Container)\n    // To move the view to the specified host element. We just re-append the existing root nodes.\n    viewRef.rootNodes.forEach(rootNode => this._hostDomElement.appendChild(rootNode));\n\n    this.setDisposeFn((() => {\n      let /** @type {?} */ index = viewContainer.indexOf(viewRef);\n      if (index !== -1) {\n        viewContainer.remove(index);\n      }\n    }));\n\n    // TODO(jelbourn): Return locals from view.\n    return viewRef;\n  }\n/**\n * Clears out a portal from the DOM.\n * @return {?}\n */\ndispose(): void {\n    super.dispose();\n    if (this._hostDomElement.parentNode != null) {\n      this._hostDomElement.parentNode.removeChild(this._hostDomElement);\n    }\n  }\n/**\n * Gets the root HTMLElement for an instantiated component.\n * @param {?} componentRef\n * @return {?}\n */\nprivate _getComponentRootNode(componentRef: ComponentRef<any>): HTMLElement {\n    return /** @type {?} */(( ( /** @type {?} */((componentRef.hostView as EmbeddedViewRef<any>))).rootNodes[0] as HTMLElement));\n  }\n}\n\nfunction DomPortalHost_tsickle_Closure_declarations() {\n/** @type {?} */\nDomPortalHost.prototype._hostDomElement;\n/** @type {?} */\nDomPortalHost.prototype._componentFactoryResolver;\n/** @type {?} */\nDomPortalHost.prototype._appRef;\n/** @type {?} */\nDomPortalHost.prototype._defaultInjector;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n    TemplateRef,\n    ViewContainerRef,\n    ElementRef,\n    ComponentRef,\n    EmbeddedViewRef,\n    Injector\n} from '@angular/core';\nimport {\n    throwNullPortalHostError,\n    throwPortalAlreadyAttachedError,\n    throwNoPortalAttachedError,\n    throwNullPortalError,\n    throwPortalHostAlreadyDisposedError,\n    throwUnknownPortalTypeError\n} from './portal-errors';\n\n\nexport interface ComponentType<T> {\n  new (...args: any[]): T;\n}\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalHost`.\n * @abstract\n */\nexport abstract class Portal<T> {\nprivate _attachedHost: PortalHost | null;\n/**\n * Attach this portal to a host.\n * @param {?} host\n * @return {?}\n */\nattach(host: PortalHost): T {\n    if (host == null) {\n      throwNullPortalHostError();\n    }\n\n    if (host.hasAttached()) {\n      throwPortalAlreadyAttachedError();\n    }\n\n    this._attachedHost = host;\n    return /** @type {?} */(( <T> host.attach(this)));\n  }\n/**\n * Detach this portal from its host\n * @return {?}\n */\ndetach(): void {\n    let /** @type {?} */ host = this._attachedHost;\n\n    if (host == null) {\n      throwNoPortalAttachedError();\n    } else {\n      this._attachedHost = null;\n      host.detach();\n    }\n  }\n/**\n * Whether this portal is attached to a host.\n * @return {?}\n */\nget isAttached(): boolean {\n    return this._attachedHost != null;\n  }\n/**\n * Sets the PortalHost reference without performing `attach()`. This is used directly by\n * the PortalHost when it is performing an `attach()` or `detach()`.\n * @param {?} host\n * @return {?}\n */\nsetAttachedHost(host: PortalHost | null) {\n    this._attachedHost = host;\n  }\n}\n\nfunction Portal_tsickle_Closure_declarations() {\n/** @type {?} */\nPortal.prototype._attachedHost;\n}\n\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nexport class ComponentPortal<T> extends Portal<ComponentRef<T>> {\n/**\n * The type of the component that will be instantiated for attachment.\n */\ncomponent: ComponentType<T>;\n/**\n * [Optional] Where the attached component should live in Angular's *logical* component tree.\n * This is different from where the component *renders*, which is determined by the PortalHost.\n * The origin is necessary when the host is outside of the Angular application context.\n */\nviewContainerRef?: ViewContainerRef | null;\n/**\n * [Optional] Injector used for the instantiation of the component.\n */\ninjector?: Injector | null;\n/**\n * @param {?} component\n * @param {?=} viewContainerRef\n * @param {?=} injector\n */\nconstructor(\n      component: ComponentType<T>,\n      viewContainerRef?: ViewContainerRef | null,\n      injector?: Injector | null) {\n    super();\n    this.component = component;\n    this.viewContainerRef = viewContainerRef;\n    this.injector = injector;\n  }\n}\n\nfunction ComponentPortal_tsickle_Closure_declarations() {\n/**\n * The type of the component that will be instantiated for attachment.\n * @type {?}\n */\nComponentPortal.prototype.component;\n/**\n * [Optional] Where the attached component should live in Angular's *logical* component tree.\n * This is different from where the component *renders*, which is determined by the PortalHost.\n * The origin is necessary when the host is outside of the Angular application context.\n * @type {?}\n */\nComponentPortal.prototype.viewContainerRef;\n/**\n * [Optional] Injector used for the instantiation of the component.\n * @type {?}\n */\nComponentPortal.prototype.injector;\n}\n\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n */\nexport class TemplatePortal<C> extends Portal<C> {\n/**\n * The embedded template that will be used to instantiate an embedded View in the host.\n */\ntemplateRef: TemplateRef<C>;\n/**\n * Reference to the ViewContainer into which the template will be stamped out.\n */\nviewContainerRef: ViewContainerRef;\n\n  context: C | undefined;\n/**\n * @param {?} template\n * @param {?} viewContainerRef\n * @param {?=} context\n */\nconstructor(template: TemplateRef<any>, viewContainerRef: ViewContainerRef, context?: C) {\n    super();\n    this.templateRef = template;\n    this.viewContainerRef = viewContainerRef;\n    if (context) {\n      this.context = context;\n    }\n  }\n/**\n * @return {?}\n */\nget origin(): ElementRef {\n    return this.templateRef.elementRef;\n  }\n/**\n * Attach the the portal to the provided `PortalHost`.\n * When a context is provided it will override the `context` property of the `TemplatePortal`\n * instance.\n * @param {?} host\n * @param {?=} context\n * @return {?}\n */\nattach(host: PortalHost, context: C | undefined = this.context): C {\n    this.context = context;\n    return super.attach(host);\n  }\n/**\n * @return {?}\n */\ndetach(): void {\n    this.context = undefined;\n    return super.detach();\n  }\n}\n\nfunction TemplatePortal_tsickle_Closure_declarations() {\n/**\n * The embedded template that will be used to instantiate an embedded View in the host.\n * @type {?}\n */\nTemplatePortal.prototype.templateRef;\n/**\n * Reference to the ViewContainer into which the template will be stamped out.\n * @type {?}\n */\nTemplatePortal.prototype.viewContainerRef;\n/** @type {?} */\nTemplatePortal.prototype.context;\n}\n\n\n\n/**\n * A `PortalHost` is an space that can contain a single `Portal`.\n */\nexport interface PortalHost {\n  attach(portal: Portal<any>): any;\n\n  detach(): any;\n\n  dispose(): void;\n\n  hasAttached(): boolean;\n}\n/**\n * Partial implementation of PortalHost that only deals with attaching either a\n * ComponentPortal or a TemplatePortal.\n * @abstract\n */\nexport abstract class BasePortalHost implements PortalHost {\n/**\n * The portal currently attached to the host.\n */\nprivate _attachedPortal: Portal<any> | null;\n/**\n * A function that will permanently dispose this host.\n */\nprivate _disposeFn: (() => void) | null;\n/**\n * Whether this host has already been permanently disposed.\n */\nprivate _isDisposed: boolean = false;\n/**\n * Whether this host has an attached portal.\n * @return {?}\n */\nhasAttached(): boolean {\n    return !!this._attachedPortal;\n  }\n/**\n * @param {?} portal\n * @return {?}\n */\nattach(portal: Portal<any>): any {\n    if (!portal) {\n      throwNullPortalError();\n    }\n\n    if (this.hasAttached()) {\n      throwPortalAlreadyAttachedError();\n    }\n\n    if (this._isDisposed) {\n      throwPortalHostAlreadyDisposedError();\n    }\n\n    if (portal instanceof ComponentPortal) {\n      this._attachedPortal = portal;\n      return this.attachComponentPortal(portal);\n    } else if (portal instanceof TemplatePortal) {\n      this._attachedPortal = portal;\n      return this.attachTemplatePortal(portal);\n    }\n\n    throwUnknownPortalTypeError();\n  }\n/**\n * @abstract\n * @template T\n * @param {?} portal\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>) {}\n/**\n * @abstract\n * @template C\n * @param {?} portal\n * @return {?}\n */\nattachTemplatePortal<C>(portal: TemplatePortal<C>) {}\n/**\n * @return {?}\n */\ndetach(): void {\n    if (this._attachedPortal) {\n      this._attachedPortal.setAttachedHost(null);\n      this._attachedPortal = null;\n    }\n\n    this._invokeDisposeFn();\n  }\n/**\n * @return {?}\n */\ndispose() {\n    if (this.hasAttached()) {\n      this.detach();\n    }\n\n    this._invokeDisposeFn();\n    this._isDisposed = true;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nsetDisposeFn(fn: () => void) {\n    this._disposeFn = fn;\n  }\n/**\n * @return {?}\n */\nprivate _invokeDisposeFn() {\n    if (this._disposeFn) {\n      this._disposeFn();\n      this._disposeFn = null;\n    }\n  }\n}\n\nfunction BasePortalHost_tsickle_Closure_declarations() {\n/**\n * The portal currently attached to the host.\n * @type {?}\n */\nBasePortalHost.prototype._attachedPortal;\n/**\n * A function that will permanently dispose this host.\n * @type {?}\n */\nBasePortalHost.prototype._disposeFn;\n/**\n * Whether this host has already been permanently disposed.\n * @type {?}\n */\nBasePortalHost.prototype._isDisposed;\n}\n\n","\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * \\@docs-private\n * @return {?}\n */\nexport function throwNullPortalError() {\n  throw Error('Must provide a portal to attach');\n}\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * \\@docs-private\n * @return {?}\n */\nexport function throwPortalAlreadyAttachedError() {\n  throw Error('Host already has a portal attached');\n}\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * \\@docs-private\n * @return {?}\n */\nexport function throwPortalHostAlreadyDisposedError() {\n  throw Error('This PortalHost has already been disposed');\n}\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * \\@docs-private\n * @return {?}\n */\nexport function throwUnknownPortalTypeError() {\n  throw Error('Attempting to attach an unknown Portal type. BasePortalHost accepts either ' +\n                  'a ComponentPortal or a TemplatePortal.');\n}\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * \\@docs-private\n * @return {?}\n */\nexport function throwNullPortalHostError() {\n  throw Error('Attempting to attach a portal to a null PortalHost');\n}\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * \\@docs-privatew\n * @return {?}\n */\nexport function throwNoPortalAttachedError() {\n  throw Error('Attempting to detach a portal that is not attached to a host');\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {ScrollDispatchModule,DEFAULT_SCROLL_TIME,ScrollDispatcher,SCROLL_DISPATCHER_PROVIDER_FACTORY,SCROLL_DISPATCHER_PROVIDER,Scrollable,ViewportRuler,VIEWPORT_RULER_PROVIDER_FACTORY,VIEWPORT_RULER_PROVIDER} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {SCROLL_DISPATCHER_PROVIDER} from './scroll-dispatcher';\nimport {Scrollable} from './scrollable';\nimport {PlatformModule} from '@angular/cdk/platform';\nexport class ScrollDispatchModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [PlatformModule],\n  exports: [Scrollable],\n  declarations: [Scrollable],\n  providers: [SCROLL_DISPATCHER_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ScrollDispatchModule_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollDispatchModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollDispatchModule.ctorParameters;\n}\n\n\nexport {DEFAULT_SCROLL_TIME,ScrollDispatcher,SCROLL_DISPATCHER_PROVIDER_FACTORY,SCROLL_DISPATCHER_PROVIDER} from './scroll-dispatcher';\nexport {Scrollable} from './scrollable';\nexport {ViewportRuler,VIEWPORT_RULER_PROVIDER_FACTORY,VIEWPORT_RULER_PROVIDER} from './viewport-ruler';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {ScrollDispatcher} from './scroll-dispatcher';\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * \\@docs-private\n */\nexport class ViewportRuler {\n/**\n * Cached document client rectangle.\n */\nprivate _documentRect?: ClientRect;\n/**\n * @param {?} scrollDispatcher\n */\nconstructor(scrollDispatcher: ScrollDispatcher) {\n    // Subscribe to scroll and resize events and update the document rectangle on changes.\n    scrollDispatcher.scrolled(0, () => this._cacheViewportGeometry());\n  }\n/**\n * Gets a ClientRect for the viewport's bounds.\n * @param {?=} documentRect\n * @return {?}\n */\ngetViewportRect(documentRect = this._documentRect): ClientRect {\n    // Cache the document bounding rect so that we don't recompute it for multiple calls.\n    if (!documentRect) {\n      this._cacheViewportGeometry();\n      documentRect = this._documentRect;\n    }\n\n    // Use the document element's bounding rect rather than the window scroll properties\n    // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n    // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n    // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n    // can disagree when the page is pinch-zoomed (on devices that support touch).\n    // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n    // We use the documentElement instead of the body because, by default (without a css reset)\n    // browsers typically give the document body an 8px margin, which is not included in\n    // getBoundingClientRect().\n    const /** @type {?} */ scrollPosition = this.getViewportScrollPosition(documentRect);\n    const /** @type {?} */ height = window.innerHeight;\n    const /** @type {?} */ width = window.innerWidth;\n\n    return {\n      top: scrollPosition.top,\n      left: scrollPosition.left,\n      bottom: scrollPosition.top + height,\n      right: scrollPosition.left + width,\n      height,\n      width,\n    };\n  }\n/**\n * Gets the (top, left) scroll position of the viewport.\n * @param {?=} documentRect\n * @return {?}\n */\ngetViewportScrollPosition(documentRect = this._documentRect) {\n    // Cache the document bounding rect so that we don't recompute it for multiple calls.\n    if (!documentRect) {\n      this._cacheViewportGeometry();\n      documentRect = this._documentRect;\n    }\n\n    // The top-left-corner of the viewport is determined by the scroll position of the document\n    // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n    // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n    // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n    // `document.documentElement` works consistently, where the `top` and `left` values will\n    // equal negative the scroll position.\n    const /** @type {?} */ top = - /** @type {?} */((documentRect)).top || document.body.scrollTop || window.scrollY ||\n                  document.documentElement.scrollTop || 0;\n\n    const /** @type {?} */ left = - /** @type {?} */((documentRect)).left || document.body.scrollLeft || window.scrollX ||\n                  document.documentElement.scrollLeft || 0;\n\n    return {top, left};\n  }\n/**\n * Caches the latest client rectangle of the document element.\n * @return {?}\n */\n_cacheViewportGeometry() {\n    this._documentRect = document.documentElement.getBoundingClientRect();\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ScrollDispatcher, },\n];\n}\n\nfunction ViewportRuler_tsickle_Closure_declarations() {\n/** @type {?} */\nViewportRuler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nViewportRuler.ctorParameters;\n/**\n * Cached document client rectangle.\n * @type {?}\n */\nViewportRuler.prototype._documentRect;\n}\n\n/**\n * \\@docs-private\n * @param {?} parentRuler\n * @param {?} scrollDispatcher\n * @return {?}\n */\nexport function VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler: ViewportRuler,\n                                                scrollDispatcher: ScrollDispatcher) {\n  return parentRuler || new ViewportRuler(scrollDispatcher);\n}\n/**\n * \\@docs-private\n */\nexport const VIEWPORT_RULER_PROVIDER = {\n  // If there is already a ViewportRuler available, use that. Otherwise, provide a new one.\n  provide: ViewportRuler,\n  deps: [[new Optional(), new SkipSelf(), ViewportRuler], ScrollDispatcher],\n  useFactory: VIEWPORT_RULER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, ElementRef, OnInit, OnDestroy, NgZone, Renderer2} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {ScrollDispatcher} from './scroll-dispatcher';\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nexport class Scrollable implements OnInit, OnDestroy {\nprivate _elementScrolled: Subject<Event> = new Subject();\nprivate _scrollListener: Function | null;\n/**\n * @param {?} _elementRef\n * @param {?} _scroll\n * @param {?} _ngZone\n * @param {?} _renderer\n */\nconstructor(private _elementRef: ElementRef,\nprivate _scroll: ScrollDispatcher,\nprivate _ngZone: NgZone,\nprivate _renderer: Renderer2) {}\n/**\n * @return {?}\n */\nngOnInit() {\n    this._scrollListener = this._ngZone.runOutsideAngular(() => {\n      return this._renderer.listen(this.getElementRef().nativeElement, 'scroll', (event: Event) => {\n        this._elementScrolled.next(event);\n      });\n    });\n\n    this._scroll.register(this);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._scroll.deregister(this);\n\n    if (this._scrollListener) {\n      this._scrollListener();\n      this._scrollListener = null;\n    }\n  }\n/**\n * Returns observable that emits when a scroll event is fired on the host element.\n * @return {?}\n */\nelementScrolled(): Observable<any> {\n    return this._elementScrolled.asObservable();\n  }\n/**\n * @return {?}\n */\ngetElementRef(): ElementRef {\n    return this._elementRef;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdk-scrollable], [cdkScrollable]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: ScrollDispatcher, },\n{type: NgZone, },\n{type: Renderer2, },\n];\n}\n\nfunction Scrollable_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollable.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollable.ctorParameters;\n/** @type {?} */\nScrollable.prototype._elementScrolled;\n/** @type {?} */\nScrollable.prototype._scrollListener;\n/** @type {?} */\nScrollable.prototype._elementRef;\n/** @type {?} */\nScrollable.prototype._scroll;\n/** @type {?} */\nScrollable.prototype._ngZone;\n/** @type {?} */\nScrollable.prototype._renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ElementRef, Injectable, NgZone, Optional, SkipSelf} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {merge} from 'rxjs/observable/merge';\nimport {auditTime} from 'rxjs/operator/auditTime';\nimport {Scrollable} from './scrollable';\n/**\n * Time in ms to throttle the scrolling events by default.\n */\nexport const DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nexport class ScrollDispatcher {\n/**\n * @param {?} _ngZone\n * @param {?} _platform\n */\nconstructor(private _ngZone: NgZone,\nprivate _platform: Platform) { }\n/**\n * Subject for notifying that a registered scrollable reference element has been scrolled.\n */\n_scrolled: Subject<void> = new Subject<void>();\n/**\n * Keeps track of the global `scroll` and `resize` subscriptions.\n */\n_globalSubscription: Subscription | null = null;\n/**\n * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n */\nprivate _scrolledCount = 0;\n/**\n * Map of all the scrollable references that are registered with the service and their\n * scroll event subscriptions.\n */\nscrollableReferences: Map<Scrollable, Subscription> = new Map();\n/**\n * Registers a Scrollable with the service and listens for its scrolled events. When the\n * scrollable is scrolled, the service emits the event in its scrolled observable.\n * @param {?} scrollable Scrollable instance to be registered.\n * @return {?}\n */\nregister(scrollable: Scrollable): void {\n    const /** @type {?} */ scrollSubscription = scrollable.elementScrolled().subscribe(() => this._notify());\n\n    this.scrollableReferences.set(scrollable, scrollSubscription);\n  }\n/**\n * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n * @param {?} scrollable Scrollable instance to be deregistered.\n * @return {?}\n */\nderegister(scrollable: Scrollable): void {\n    const /** @type {?} */ scrollableReference = this.scrollableReferences.get(scrollable);\n\n    if (scrollableReference) {\n      scrollableReference.unsubscribe();\n      this.scrollableReferences.delete(scrollable);\n    }\n  }\n/**\n * Subscribes to an observable that emits an event whenever any of the registered Scrollable\n * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n * to override the default \"throttle\" time.\n * @param {?=} auditTimeInMs\n * @param {?=} callback\n * @return {?}\n */\nscrolled(auditTimeInMs: number = DEFAULT_SCROLL_TIME, callback: () => any): Subscription {\n    // Scroll events can only happen on the browser, so do nothing if we're not on the browser.\n    if (!this._platform.isBrowser) {\n      return Subscription.EMPTY;\n    }\n\n    // In the case of a 0ms delay, use an observable without auditTime\n    // since it does add a perceptible delay in processing overhead.\n    let /** @type {?} */ observable = auditTimeInMs > 0 ?\n      auditTime.call(this._scrolled.asObservable(), auditTimeInMs) :\n      this._scrolled.asObservable();\n\n    this._scrolledCount++;\n\n    if (!this._globalSubscription) {\n      this._globalSubscription = this._ngZone.runOutsideAngular(() => {\n        return merge(\n          fromEvent(window.document, 'scroll'),\n          fromEvent(window, 'resize')\n        ).subscribe(() => this._notify());\n      });\n    }\n\n    // Note that we need to do the subscribing from here, in order to be able to remove\n    // the global event listeners once there are no more subscriptions.\n    let /** @type {?} */ subscription = observable.subscribe(callback);\n\n    subscription.add(() => {\n      this._scrolledCount--;\n\n      if (this._globalSubscription && !this.scrollableReferences.size && !this._scrolledCount) {\n        this._globalSubscription.unsubscribe();\n        this._globalSubscription = null;\n      }\n    });\n\n    return subscription;\n  }\n/**\n * Returns all registered Scrollables that contain the provided element.\n * @param {?} elementRef\n * @return {?}\n */\ngetScrollContainers(elementRef: ElementRef): Scrollable[] {\n    const /** @type {?} */ scrollingContainers: Scrollable[] = [];\n\n    this.scrollableReferences.forEach((_subscription: Subscription, scrollable: Scrollable) => {\n      if (this.scrollableContainsElement(scrollable, elementRef)) {\n        scrollingContainers.push(scrollable);\n      }\n    });\n\n    return scrollingContainers;\n  }\n/**\n * Returns true if the element is contained within the provided Scrollable.\n * @param {?} scrollable\n * @param {?} elementRef\n * @return {?}\n */\nscrollableContainsElement(scrollable: Scrollable, elementRef: ElementRef): boolean {\n    let /** @type {?} */ element = elementRef.nativeElement;\n    let /** @type {?} */ scrollableElement = scrollable.getElementRef().nativeElement;\n\n    // Traverse through the element parents until we reach null, checking if any of the elements\n    // are the scrollable's element.\n    do {\n      if (element == scrollableElement) { return true; }\n    } while (element = element.parentElement);\n\n    return false;\n  }\n/**\n * Sends a notification that a scroll event has been fired.\n * @return {?}\n */\n_notify() {\n    this._scrolled.next();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: Platform, },\n];\n}\n\nfunction ScrollDispatcher_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollDispatcher.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollDispatcher.ctorParameters;\n/**\n * Subject for notifying that a registered scrollable reference element has been scrolled.\n * @type {?}\n */\nScrollDispatcher.prototype._scrolled;\n/**\n * Keeps track of the global `scroll` and `resize` subscriptions.\n * @type {?}\n */\nScrollDispatcher.prototype._globalSubscription;\n/**\n * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n * @type {?}\n */\nScrollDispatcher.prototype._scrolledCount;\n/**\n * Map of all the scrollable references that are registered with the service and their\n * scroll event subscriptions.\n * @type {?}\n */\nScrollDispatcher.prototype.scrollableReferences;\n/** @type {?} */\nScrollDispatcher.prototype._ngZone;\n/** @type {?} */\nScrollDispatcher.prototype._platform;\n}\n\n/**\n * \\@docs-private\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @param {?} platform\n * @return {?}\n */\nexport function SCROLL_DISPATCHER_PROVIDER_FACTORY(\n    parentDispatcher: ScrollDispatcher, ngZone: NgZone, platform: Platform) {\n  return parentDispatcher || new ScrollDispatcher(ngZone, platform);\n}\n/**\n * \\@docs-private\n */\nexport const SCROLL_DISPATCHER_PROVIDER = {\n  // If there is already a ScrollDispatcher available, use that. Otherwise, provide a new one.\n  provide: ScrollDispatcher,\n  deps: [[new Optional(), new SkipSelf(), ScrollDispatcher], NgZone, Platform],\n  useFactory: SCROLL_DISPATCHER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {Directionality,DIRECTIONALITY_PROVIDER_FACTORY,DIRECTIONALITY_PROVIDER,DIR_DOCUMENT,Direction,Dir,BidiModule} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {Dir} from './dir';\nimport {DIR_DOCUMENT, Directionality} from './directionality';\n\nexport {\n  Directionality,\n  DIRECTIONALITY_PROVIDER_FACTORY,\n  DIRECTIONALITY_PROVIDER,\n  DIR_DOCUMENT,\n  Direction,\n} from './directionality';\nexport {Dir} from './dir';\nexport class BidiModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [Dir],\n  declarations: [Dir],\n  providers: [\n    {provide: DIR_DOCUMENT, useExisting: DOCUMENT},\n    Directionality,\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction BidiModule_tsickle_Closure_declarations() {\n/** @type {?} */\nBidiModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBidiModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  Output,\n  Input,\n  EventEmitter\n} from '@angular/core';\n\nimport {Direction, Directionality} from './directionality';\n/**\n * Directive to listen for changes of direction of part of the DOM.\n * \n * Would provide itself in case a component looks for the Directionality service\n */\nexport class Dir implements Directionality {\n/**\n * Layout direction of the element.\n */\n_dir: Direction = 'ltr';\n/**\n * Whether the `value` has been set to its initial value.\n */\nprivate _isInitialized: boolean = false;\n/**\n * Event emitted when the direction changes.\n */\nchange = new EventEmitter<void>();\n/**\n * \\@docs-private\n * @return {?}\n */\nget dir(): Direction {\n    return this._dir;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset dir(v: Direction) {\n    let /** @type {?} */ old = this._dir;\n    this._dir = v;\n    if (old !== this._dir && this._isInitialized) {\n      this.change.emit();\n    }\n  }\n/**\n * Current layout direction of the element.\n * @return {?}\n */\nget value(): Direction { return this.dir; }\n/**\n * Initialize once default value has been set.\n * @return {?}\n */\nngAfterContentInit() {\n    this._isInitialized = true;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[dir]',\n  providers: [{provide: Directionality, useExisting: Dir}],\n  host: {'[dir]': 'dir'},\n  exportAs: 'dir',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'change': [{ type: Output, args: ['dirChange', ] },],\n'dir': [{ type: Input, args: ['dir', ] },],\n};\n}\n\nfunction Dir_tsickle_Closure_declarations() {\n/** @type {?} */\nDir.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDir.ctorParameters;\n/** @type {?} */\nDir.propDecorators;\n/**\n * Layout direction of the element.\n * @type {?}\n */\nDir.prototype._dir;\n/**\n * Whether the `value` has been set to its initial value.\n * @type {?}\n */\nDir.prototype._isInitialized;\n/**\n * Event emitted when the direction changes.\n * @type {?}\n */\nDir.prototype.change;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  EventEmitter,\n  Injectable,\n  Optional,\n  SkipSelf,\n  Inject,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/platform-browser';\n\n\nexport type Direction = 'ltr' | 'rtl';\n/**\n * Injection token used to inject the document into Directionality.\n * This is used so that the value can be faked in tests.\n * \n * We can't use the real document in tests because changing the real `dir` causes geometry-based\n * tests in Safari to fail.\n * \n * We also can't re-provide the DOCUMENT token from platform-brower because the unit tests\n * themselves use things like `querySelector` in test code.\n */\nexport const DIR_DOCUMENT = new InjectionToken<Document>('md-dir-doc');\n/**\n * The directionality (LTR / RTL) context for the application (or a subtree of it).\n * Exposes the current direction and a stream of direction changes.\n */\nexport class Directionality {\n  readonly value: Direction = 'ltr';\n  readonly change = new EventEmitter<void>();\n/**\n * @param {?=} _document\n */\nconstructor(  _document?: any) {\n    if (_document) {\n      // TODO: handle 'auto' value -\n      // We still need to account for dir=\"auto\".\n      // It looks like HTMLElemenet.dir is also \"auto\" when that's set to the attribute,\n      // but getComputedStyle return either \"ltr\" or \"rtl\". avoiding getComputedStyle for now\n      const bodyDir = _document.body ? _document.body.dir : null;\n      const htmlDir = _document.documentElement ? _document.documentElement.dir : null;\n      this.value = (bodyDir || htmlDir || 'ltr') as Direction;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DIR_DOCUMENT, ] }, ]},\n];\n}\n\nfunction Directionality_tsickle_Closure_declarations() {\n/** @type {?} */\nDirectionality.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDirectionality.ctorParameters;\n/** @type {?} */\nDirectionality.prototype.value;\n/** @type {?} */\nDirectionality.prototype.change;\n}\n\n/**\n * \\@docs-private\n * @param {?} parentDirectionality\n * @param {?} _document\n * @return {?}\n */\nexport function DIRECTIONALITY_PROVIDER_FACTORY(parentDirectionality, _document) {\n  return parentDirectionality || new Directionality(_document);\n}\n/**\n * \\@docs-private\n */\nexport const DIRECTIONALITY_PROVIDER = {\n  // If there is already a Directionality available, use that. Otherwise, provide a new one.\n  provide: Directionality,\n  deps: [[new Optional(), new SkipSelf(), Directionality], [new Optional(), DOCUMENT]],\n  useFactory: DIRECTIONALITY_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {FocusTrapDeprecatedDirective, FocusTrapDirective, FocusTrapFactory} from './focus-trap';\nimport {LIVE_ANNOUNCER_PROVIDER} from './live-announcer';\nimport {InteractivityChecker} from './interactivity-checker';\nimport {CommonModule} from '@angular/common';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {AriaDescriber, ARIA_DESCRIBER_PROVIDER} from './aria-describer';\nimport {CdkMonitorFocus, FOCUS_MONITOR_PROVIDER} from './focus-monitor';\nexport class A11yModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, PlatformModule],\n  declarations: [FocusTrapDirective, FocusTrapDeprecatedDirective, CdkMonitorFocus],\n  exports: [FocusTrapDirective, FocusTrapDeprecatedDirective, CdkMonitorFocus],\n  providers: [\n    InteractivityChecker,\n    FocusTrapFactory,\n    AriaDescriber,\n    LIVE_ANNOUNCER_PROVIDER,\n    ARIA_DESCRIBER_PROVIDER,\n    FOCUS_MONITOR_PROVIDER,\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction A11yModule_tsickle_Closure_declarations() {\n/** @type {?} */\nA11yModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nA11yModule.ctorParameters;\n}\n\n\nexport {Highlightable,ActiveDescendantKeyManager} from './activedescendant-key-manager';\nexport {RegisteredMessage,MESSAGES_CONTAINER_ID,CDK_DESCRIBEDBY_ID_PREFIX,CDK_DESCRIBEDBY_HOST_ATTRIBUTE,AriaDescriber,ARIA_DESCRIBER_PROVIDER_FACTORY,ARIA_DESCRIBER_PROVIDER} from './aria-describer';\nexport {isFakeMousedownFromScreenReader} from './fake-mousedown';\nexport {FocusableOption,FocusKeyManager} from './focus-key-manager';\nexport {FocusTrap,FocusTrapFactory,FocusTrapDeprecatedDirective,FocusTrapDirective} from './focus-trap';\nexport {InteractivityChecker} from './interactivity-checker';\nexport {ListKeyManagerOption,ListKeyManager} from './list-key-manager';\nexport {LIVE_ANNOUNCER_ELEMENT_TOKEN,AriaLivePoliteness,LiveAnnouncer,LIVE_ANNOUNCER_PROVIDER_FACTORY,LIVE_ANNOUNCER_PROVIDER} from './live-announcer';\nexport {TOUCH_BUFFER_MS,FocusOrigin,FocusMonitor,CdkMonitorFocus,FOCUS_MONITOR_PROVIDER_FACTORY,FOCUS_MONITOR_PROVIDER} from './focus-monitor';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ListKeyManager, ListKeyManagerOption} from './list-key-manager';\n\n/**\n * This is the interface for focusable items (used by the FocusKeyManager).\n * Each item must know how to focus itself, whether or not it is currently disabled\n * and be able to supply it's label.\n */\nexport interface FocusableOption extends ListKeyManagerOption {\n  focus(): void;\n}\nexport class FocusKeyManager<T> extends ListKeyManager<FocusableOption & T> {\n/**\n * This method sets the active item to the item at the specified index.\n * It also adds focuses the newly active item.\n * @param {?} index\n * @return {?}\n */\nsetActiveItem(index: number): void {\n    super.setActiveItem(index);\n\n    if (this.activeItem) {\n      this.activeItem.focus();\n    }\n  }\n}\n","\n/**\n * Screenreaders will often fire fake mousedown events when a focusable element\n * is activated using the keyboard. We can typically distinguish between these faked\n * mousedown events and real mousedown events using the \"buttons\" property. While\n * real mousedowns will indicate the mouse button that was pressed (e.g. \"1\" for\n * the left mouse button), faked mousedowns will usually set the property value to 0.\n * @param {?} event\n * @return {?}\n */\nexport function isFakeMousedownFromScreenReader(event: MouseEvent): boolean {\n  return event.buttons === 0;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ListKeyManager, ListKeyManagerOption} from './list-key-manager';\n\n/**\n * This is the interface for highlightable items (used by the ActiveDescendantKeyManager).\n * Each item must know how to style itself as active or inactive and whether or not it is\n * currently disabled.\n */\nexport interface Highlightable extends ListKeyManagerOption {\n  setActiveStyles(): void;\n  setInactiveStyles(): void;\n}\nexport class ActiveDescendantKeyManager<T> extends ListKeyManager<Highlightable & T> {\n/**\n * This method sets the active item to the item at the specified index.\n * It also adds active styles to the newly active item and removes active\n * styles from the previously active item.\n * @param {?} index\n * @return {?}\n */\nsetActiveItem(index: number): void {\n    Promise.resolve().then(() => {\n      if (this.activeItem) {\n        this.activeItem.setInactiveStyles();\n      }\n      super.setActiveItem(index);\n      if (this.activeItem) {\n        this.activeItem.setActiveStyles();\n      }\n    });\n  }\n\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {QueryList} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {UP_ARROW, DOWN_ARROW, TAB, A, Z, ZERO, NINE} from '@angular/cdk/keycodes';\nimport {RxChain, debounceTime, filter, map, doOperator} from '@angular/cdk/rxjs';\n\n/**\n * This interface is for items that can be passed to a ListKeyManager.\n */\nexport interface ListKeyManagerOption {\n  disabled?: boolean;\n  getLabel?(): string;\n}\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n */\nexport class ListKeyManager<T extends ListKeyManagerOption> {\nprivate _activeItemIndex = -1;\nprivate _activeItem: T;\nprivate _wrap = false;\nprivate _letterKeyStream = new Subject<string>();\nprivate _typeaheadSubscription = Subscription.EMPTY;\nprivate _pressedLetters: string[] = [];\n/**\n * @param {?} _items\n */\nconstructor(private _items: QueryList<T>) { }\n/**\n * Stream that emits any time the TAB key is pressed, so components can react\n * when focus is shifted off of the list.\n */\ntabOut: Subject<void> = new Subject<void>();\n/**\n * Turns on wrapping mode, which ensures that the active item will wrap to\n * the other end of list when there are no more items in the given direction.\n * @return {?}\n */\nwithWrap(): this {\n    this._wrap = true;\n    return this;\n  }\n/**\n * Turns on typeahead mode which allows users to set the active item by typing.\n * @param {?=} debounceInterval Time to wait after the last keystroke before setting the active item.\n * @return {?}\n */\nwithTypeAhead(debounceInterval = 200): this {\n    if (this._items.length && this._items.some(item => typeof item.getLabel !== 'function')) {\n      throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n    }\n\n    this._typeaheadSubscription.unsubscribe();\n\n    // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n    // and convert those letters back into a string. Afterwards find the first item that starts\n    // with that string and select it.\n    this._typeaheadSubscription = RxChain.from(this._letterKeyStream)\n      .call(doOperator, keyCode => this._pressedLetters.push(keyCode))\n      .call(debounceTime, debounceInterval)\n      .call(filter, () => this._pressedLetters.length > 0)\n      .call(map, () => this._pressedLetters.join(''))\n      .subscribe(inputString => {\n        const /** @type {?} */ items = this._items.toArray();\n\n        for (let /** @type {?} */ i = 0; i < items.length; i++) {\n          if ( /** @type {?} */((items[i].getLabel))().toUpperCase().trim().indexOf(inputString) === 0) {\n            this.setActiveItem(i);\n            break;\n          }\n        }\n\n        this._pressedLetters = [];\n      });\n\n    return this;\n  }\n/**\n * Sets the active item to the item at the index specified.\n * @param {?} index The index of the item to be set as active.\n * @return {?}\n */\nsetActiveItem(index: number): void {\n    this._activeItemIndex = index;\n    this._activeItem = this._items.toArray()[index];\n  }\n/**\n * Sets the active item depending on the key event passed in.\n * @param {?} event Keyboard event to be used for determining which element should be active.\n * @return {?}\n */\nonKeydown(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case DOWN_ARROW: this.setNextItemActive(); break;\n      case UP_ARROW: this.setPreviousItemActive(); break;\n      case TAB: this.tabOut.next(); return;\n      default:\n        const /** @type {?} */ keyCode = event.keyCode;\n\n        // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n        // otherwise fall back to resolving alphanumeric characters via the keyCode.\n        if (event.key && event.key.length === 1) {\n          this._letterKeyStream.next(event.key.toLocaleUpperCase());\n        } else if ((keyCode >= A && keyCode <= Z) || (keyCode >= ZERO && keyCode <= NINE)) {\n          this._letterKeyStream.next(String.fromCharCode(keyCode));\n        }\n\n        // Note that we return here, in order to avoid preventing\n        // the default action of non-navigational keys.\n        return;\n    }\n\n    this._pressedLetters = [];\n    event.preventDefault();\n  }\n/**\n * Index of the currently active item.\n * @return {?}\n */\nget activeItemIndex(): number | null {\n    return this._activeItemIndex;\n  }\n/**\n * The active item.\n * @return {?}\n */\nget activeItem(): T | null {\n    return this._activeItem;\n  }\n/**\n * Sets the active item to the first enabled item in the list.\n * @return {?}\n */\nsetFirstItemActive(): void {\n    this._setActiveItemByIndex(0, 1);\n  }\n/**\n * Sets the active item to the last enabled item in the list.\n * @return {?}\n */\nsetLastItemActive(): void {\n    this._setActiveItemByIndex(this._items.length - 1, -1);\n  }\n/**\n * Sets the active item to the next enabled item in the list.\n * @return {?}\n */\nsetNextItemActive(): void {\n    this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n  }\n/**\n * Sets the active item to a previous enabled item in the list.\n * @return {?}\n */\nsetPreviousItemActive(): void {\n    this._activeItemIndex < 0 && this._wrap ? this.setLastItemActive()\n                                            : this._setActiveItemByDelta(-1);\n  }\n/**\n * Allows setting of the activeItemIndex without any other effects.\n * @param {?} index The new activeItemIndex.\n * @return {?}\n */\nupdateActiveItemIndex(index: number) {\n    this._activeItemIndex = index;\n  }\n/**\n * This method sets the active item, given a list of items and the delta between the\n * currently active item and the new active item. It will calculate differently\n * depending on whether wrap mode is turned on.\n * @param {?} delta\n * @param {?=} items\n * @return {?}\n */\nprivate _setActiveItemByDelta(delta: number, items = this._items.toArray()): void {\n    this._wrap ? this._setActiveInWrapMode(delta, items)\n               : this._setActiveInDefaultMode(delta, items);\n  }\n/**\n * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n * down the list until it finds an item that is not disabled, and it will wrap if it\n * encounters either end of the list.\n * @param {?} delta\n * @param {?} items\n * @return {?}\n */\nprivate _setActiveInWrapMode(delta: number, items: T[]): void {\n    // when active item would leave menu, wrap to beginning or end\n    this._activeItemIndex =\n      (this._activeItemIndex + delta + items.length) % items.length;\n\n    // skip all disabled menu items recursively until an enabled one is reached\n    if (items[this._activeItemIndex].disabled) {\n      this._setActiveInWrapMode(delta, items);\n    } else {\n      this.setActiveItem(this._activeItemIndex);\n    }\n  }\n/**\n * Sets the active item properly given the default mode. In other words, it will\n * continue to move down the list until it finds an item that is not disabled. If\n * it encounters either end of the list, it will stop and not wrap.\n * @param {?} delta\n * @param {?} items\n * @return {?}\n */\nprivate _setActiveInDefaultMode(delta: number, items: T[]): void {\n    this._setActiveItemByIndex(this._activeItemIndex + delta, delta, items);\n  }\n/**\n * Sets the active item to the first enabled item starting at the index specified. If the\n * item is disabled, it will move in the fallbackDelta direction until it either\n * finds an enabled item or encounters the end of the list.\n * @param {?} index\n * @param {?} fallbackDelta\n * @param {?=} items\n * @return {?}\n */\nprivate _setActiveItemByIndex(index: number, fallbackDelta: number,\n                                  items = this._items.toArray()): void {\n    if (!items[index]) { return; }\n    while (items[index].disabled) {\n      index += fallbackDelta;\n      if (!items[index]) { return; }\n    }\n    this.setActiveItem(index);\n  }\n}\n\nfunction ListKeyManager_tsickle_Closure_declarations() {\n/** @type {?} */\nListKeyManager.prototype._activeItemIndex;\n/** @type {?} */\nListKeyManager.prototype._activeItem;\n/** @type {?} */\nListKeyManager.prototype._wrap;\n/** @type {?} */\nListKeyManager.prototype._letterKeyStream;\n/** @type {?} */\nListKeyManager.prototype._typeaheadSubscription;\n/** @type {?} */\nListKeyManager.prototype._pressedLetters;\n/**\n * Stream that emits any time the TAB key is pressed, so components can react\n * when focus is shifted off of the list.\n * @type {?}\n */\nListKeyManager.prototype.tabOut;\n/** @type {?} */\nListKeyManager.prototype._items;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injectable,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  Renderer2,\n  SkipSelf,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {of as observableOf} from 'rxjs/observable/of';\n\n\n// This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\n// that a value of around 650ms seems appropriate.\nexport const /** @type {?} */ TOUCH_BUFFER_MS = 650;\n\n\nexport type FocusOrigin = 'touch' | 'mouse' | 'keyboard' | 'program' | null;\n\n\ntype MonitoredElementInfo = {\n  unlisten: Function,\n  checkChildren: boolean,\n  renderer: Renderer2,\n  subject: Subject<FocusOrigin>\n};\n/**\n * Monitors mouse and keyboard events to determine the cause of focus events.\n */\nexport class FocusMonitor {\n/**\n * The focus origin that the next focus event is a result of.\n */\nprivate _origin: FocusOrigin = null;\n/**\n * The FocusOrigin of the last focus event tracked by the FocusMonitor.\n */\nprivate _lastFocusOrigin: FocusOrigin;\n/**\n * Whether the window has just been focused.\n */\nprivate _windowFocused = false;\n/**\n * The target of the last touch event.\n */\nprivate _lastTouchTarget: EventTarget | null;\n/**\n * The timeout id of the touch timeout, used to cancel timeout later.\n */\nprivate _touchTimeout: number;\n/**\n * Weak map of elements being monitored to their info.\n */\nprivate _elementInfo = new WeakMap<Element, MonitoredElementInfo>();\n/**\n * @param {?} _ngZone\n * @param {?} _platform\n */\nconstructor(private _ngZone: NgZone,\nprivate _platform: Platform) {\n    this._ngZone.runOutsideAngular(() => this._registerDocumentEvents());\n  }\n/**\n * Monitors focus on an element and applies appropriate CSS classes.\n * @param {?} element The element to monitor\n * @param {?} renderer The renderer to use to apply CSS classes to the element.\n * @param {?} checkChildren Whether to count the element as focused when its children are focused.\n * @return {?} An observable that emits when the focus state of the element changes.\n *     When the element is blurred, null will be emitted.\n */\nmonitor(\n      element: HTMLElement,\n      renderer: Renderer2,\n      checkChildren: boolean): Observable<FocusOrigin> {\n    // Do nothing if we're not on the browser platform.\n    if (!this._platform.isBrowser) {\n      return observableOf(null);\n    }\n    // Check if we're already monitoring this element.\n    if (this._elementInfo.has(element)) {\n      let /** @type {?} */ cachedInfo = this._elementInfo.get(element); /** @type {?} */((\n      cachedInfo)).checkChildren = checkChildren;\n      return /** @type {?} */(( cachedInfo)).subject.asObservable();\n    }\n\n    // Create monitored element info.\n    let /** @type {?} */ info: MonitoredElementInfo = {\n      unlisten: () => {},\n      checkChildren: checkChildren,\n      renderer: renderer,\n      subject: new Subject<FocusOrigin>()\n    };\n    this._elementInfo.set(element, info);\n\n    // Start listening. We need to listen in capture phase since focus events don't bubble.\n    let /** @type {?} */ focusListener = (event: FocusEvent) => this._onFocus(event, element);\n    let /** @type {?} */ blurListener = (event: FocusEvent) => this._onBlur(event, element);\n    this._ngZone.runOutsideAngular(() => {\n      element.addEventListener('focus', focusListener, true);\n      element.addEventListener('blur', blurListener, true);\n    });\n\n    // Create an unlisten function for later.\n    info.unlisten = () => {\n      element.removeEventListener('focus', focusListener, true);\n      element.removeEventListener('blur', blurListener, true);\n    };\n\n    return info.subject.asObservable();\n  }\n/**\n * Stops monitoring an element and removes all focus classes.\n * @param {?} element The element to stop monitoring.\n * @return {?}\n */\nstopMonitoring(element: HTMLElement): void {\n    let /** @type {?} */ elementInfo = this._elementInfo.get(element);\n\n    if (elementInfo) {\n      elementInfo.unlisten();\n      elementInfo.subject.complete();\n\n      this._setClasses(element);\n      this._elementInfo.delete(element);\n    }\n  }\n/**\n * Focuses the element via the specified focus origin.\n * @param {?} element The element to focus.\n * @param {?} origin The focus origin.\n * @return {?}\n */\nfocusVia(element: HTMLElement, origin: FocusOrigin): void {\n    this._setOriginForCurrentEventQueue(origin);\n    element.focus();\n  }\n/**\n * Register necessary event listeners on the document and window.\n * @return {?}\n */\nprivate _registerDocumentEvents() {\n    // Do nothing if we're not on the browser platform.\n    if (!this._platform.isBrowser) {\n      return;\n    }\n\n    // Note: we listen to events in the capture phase so we can detect them even if the user stops\n    // propagation.\n\n    // On keydown record the origin and clear any touch event that may be in progress.\n    document.addEventListener('keydown', () => {\n      this._lastTouchTarget = null;\n      this._setOriginForCurrentEventQueue('keyboard');\n    }, true);\n\n    // On mousedown record the origin only if there is not touch target, since a mousedown can\n    // happen as a result of a touch event.\n    document.addEventListener('mousedown', () => {\n      if (!this._lastTouchTarget) {\n        this._setOriginForCurrentEventQueue('mouse');\n      }\n    }, true);\n\n    // When the touchstart event fires the focus event is not yet in the event queue. This means\n    // we can't rely on the trick used above (setting timeout of 0ms). Instead we wait 650ms to\n    // see if a focus happens.\n    document.addEventListener('touchstart', (event: Event) => {\n      if (this._touchTimeout != null) {\n        clearTimeout(this._touchTimeout);\n      }\n      this._lastTouchTarget = event.target;\n      this._touchTimeout = setTimeout(() => this._lastTouchTarget = null, TOUCH_BUFFER_MS);\n    }, true);\n\n    // Make a note of when the window regains focus, so we can restore the origin info for the\n    // focused element.\n    window.addEventListener('focus', () => {\n      this._windowFocused = true;\n      setTimeout(() => this._windowFocused = false, 0);\n    });\n  }\n/**\n * Sets the focus classes on the element based on the given focus origin.\n * @param {?} element The element to update the classes on.\n * @param {?=} origin The focus origin.\n * @return {?}\n */\nprivate _setClasses(element: HTMLElement, origin?: FocusOrigin): void {\n    const /** @type {?} */ elementInfo = this._elementInfo.get(element);\n\n    if (elementInfo) {\n      const /** @type {?} */ toggleClass = (className: string, shouldSet: boolean) => {\n        shouldSet ? elementInfo.renderer.addClass(element, className) :\n                    elementInfo.renderer.removeClass(element, className);\n      };\n\n      toggleClass('cdk-focused', !!origin);\n      toggleClass('cdk-touch-focused', origin === 'touch');\n      toggleClass('cdk-keyboard-focused', origin === 'keyboard');\n      toggleClass('cdk-mouse-focused', origin === 'mouse');\n      toggleClass('cdk-program-focused', origin === 'program');\n    }\n  }\n/**\n * Sets the origin and schedules an async function to clear it at the end of the event queue.\n * @param {?} origin The origin to set.\n * @return {?}\n */\nprivate _setOriginForCurrentEventQueue(origin: FocusOrigin): void {\n    this._origin = origin;\n    setTimeout(() => this._origin = null, 0);\n  }\n/**\n * Checks whether the given focus event was caused by a touchstart event.\n * @param {?} event The focus event to check.\n * @return {?} Whether the event was caused by a touch.\n */\nprivate _wasCausedByTouch(event: FocusEvent): boolean {\n    // Note(mmalerba): This implementation is not quite perfect, there is a small edge case.\n    // Consider the following dom structure:\n    //\n    // <div #parent tabindex=\"0\" cdkFocusClasses>\n    //   <div #child (click)=\"#parent.focus()\"></div>\n    // </div>\n    //\n    // If the user touches the #child element and the #parent is programmatically focused as a\n    // result, this code will still consider it to have been caused by the touch event and will\n    // apply the cdk-touch-focused class rather than the cdk-program-focused class. This is a\n    // relatively small edge-case that can be worked around by using\n    // focusVia(parentEl, renderer,  'program') to focus the parent element.\n    //\n    // If we decide that we absolutely must handle this case correctly, we can do so by listening\n    // for the first focus event after the touchstart, and then the first blur event after that\n    // focus event. When that blur event fires we know that whatever follows is not a result of the\n    // touchstart.\n    let /** @type {?} */ focusTarget = event.target;\n    return this._lastTouchTarget instanceof Node && focusTarget instanceof Node &&\n        (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));\n  }\n/**\n * Handles focus events on a registered element.\n * @param {?} event The focus event.\n * @param {?} element The monitored element.\n * @return {?}\n */\nprivate _onFocus(event: FocusEvent, element: HTMLElement) {\n    // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n    // focus event affecting the monitored element. If we want to use the origin of the first event\n    // instead we should check for the cdk-focused class here and return if the element already has\n    // it. (This only matters for elements that have includesChildren = true).\n\n    // If we are not counting child-element-focus as focused, make sure that the event target is the\n    // monitored element itself.\n    const /** @type {?} */ elementInfo = this._elementInfo.get(element);\n    if (!elementInfo || (!elementInfo.checkChildren && element !== event.target)) {\n      return;\n    }\n\n    // If we couldn't detect a cause for the focus event, it's due to one of three reasons:\n    // 1) The window has just regained focus, in which case we want to restore the focused state of\n    //    the element from before the window blurred.\n    // 2) It was caused by a touch event, in which case we mark the origin as 'touch'.\n    // 3) The element was programmatically focused, in which case we should mark the origin as\n    //    'program'.\n    if (!this._origin) {\n      if (this._windowFocused && this._lastFocusOrigin) {\n        this._origin = this._lastFocusOrigin;\n      } else if (this._wasCausedByTouch(event)) {\n        this._origin = 'touch';\n      } else {\n        this._origin = 'program';\n      }\n    }\n\n    this._setClasses(element, this._origin);\n    elementInfo.subject.next(this._origin);\n    this._lastFocusOrigin = this._origin;\n    this._origin = null;\n  }\n/**\n * Handles blur events on a registered element.\n * @param {?} event The blur event.\n * @param {?} element The monitored element.\n * @return {?}\n */\n_onBlur(event: FocusEvent, element: HTMLElement) {\n    // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n    // order to focus another child of the monitored element.\n    const /** @type {?} */ elementInfo = this._elementInfo.get(element);\n\n    if (!elementInfo || (elementInfo.checkChildren && event.relatedTarget instanceof Node &&\n        element.contains(event.relatedTarget))) {\n      return;\n    }\n\n    this._setClasses(element);\n    elementInfo.subject.next(null);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: Platform, },\n];\n}\n\nfunction FocusMonitor_tsickle_Closure_declarations() {\n/** @type {?} */\nFocusMonitor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFocusMonitor.ctorParameters;\n/**\n * The focus origin that the next focus event is a result of.\n * @type {?}\n */\nFocusMonitor.prototype._origin;\n/**\n * The FocusOrigin of the last focus event tracked by the FocusMonitor.\n * @type {?}\n */\nFocusMonitor.prototype._lastFocusOrigin;\n/**\n * Whether the window has just been focused.\n * @type {?}\n */\nFocusMonitor.prototype._windowFocused;\n/**\n * The target of the last touch event.\n * @type {?}\n */\nFocusMonitor.prototype._lastTouchTarget;\n/**\n * The timeout id of the touch timeout, used to cancel timeout later.\n * @type {?}\n */\nFocusMonitor.prototype._touchTimeout;\n/**\n * Weak map of elements being monitored to their info.\n * @type {?}\n */\nFocusMonitor.prototype._elementInfo;\n/** @type {?} */\nFocusMonitor.prototype._ngZone;\n/** @type {?} */\nFocusMonitor.prototype._platform;\n}\n\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n * \n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\nexport class CdkMonitorFocus implements OnDestroy {\nprivate _monitorSubscription: Subscription;\n   cdkFocusChange = new EventEmitter<FocusOrigin>();\n/**\n * @param {?} _elementRef\n * @param {?} _focusMonitor\n * @param {?} renderer\n */\nconstructor(private _elementRef: ElementRef,\nprivate _focusMonitor: FocusMonitor,\n              renderer: Renderer2) {\n    this._monitorSubscription = this._focusMonitor.monitor(\n        this._elementRef.nativeElement, renderer,\n        this._elementRef.nativeElement.hasAttribute('cdkMonitorSubtreeFocus'))\n        .subscribe(origin => this.cdkFocusChange.emit(origin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._monitorSubscription.unsubscribe();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: FocusMonitor, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'cdkFocusChange': [{ type: Output },],\n};\n}\n\nfunction CdkMonitorFocus_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkMonitorFocus.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkMonitorFocus.ctorParameters;\n/** @type {?} */\nCdkMonitorFocus.propDecorators;\n/** @type {?} */\nCdkMonitorFocus.prototype._monitorSubscription;\n/** @type {?} */\nCdkMonitorFocus.prototype.cdkFocusChange;\n/** @type {?} */\nCdkMonitorFocus.prototype._elementRef;\n/** @type {?} */\nCdkMonitorFocus.prototype._focusMonitor;\n}\n\n/**\n * \\@docs-private\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @param {?} platform\n * @return {?}\n */\nexport function FOCUS_MONITOR_PROVIDER_FACTORY(\n    parentDispatcher: FocusMonitor, ngZone: NgZone, platform: Platform) {\n  return parentDispatcher || new FocusMonitor(ngZone, platform);\n}\n/**\n * \\@docs-private\n */\nexport const FOCUS_MONITOR_PROVIDER = {\n  // If there is already a FocusMonitor available, use that. Otherwise, provide a new one.\n  provide: FocusMonitor,\n  deps: [[new Optional(), new SkipSelf(), FocusMonitor], NgZone, Platform],\n  useFactory: FOCUS_MONITOR_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {addAriaReferencedId, getAriaReferenceIds, removeAriaReferencedId} from './aria-reference';\n\n/**\n * Interface used to register message elements and keep a count of how many registrations have\n * the same message and the reference to the message element used for the aria-describedby.\n */\nexport interface RegisteredMessage {\n  messageElement: Element;\n  referenceCount: number;\n}\n/**\n * ID used for the body container where all messages are appended.\n */\nexport const MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\n/**\n * ID prefix used for each created message element.\n */\nexport const CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\n/**\n * Attribute given to each host element that is described by a message element.\n */\nexport const CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\n/**\n * Global incremental identifier for each registered message element.\n */\nlet nextId = 0;\n/**\n * Global map of all registered message elements that have been placed into the document.\n */\nconst messageRegistry = new Map<string, RegisteredMessage>();\n/**\n * Container for all registered messages.\n */\nlet messagesContainer: HTMLElement | null = null;\n/**\n * Utility that creates visually hidden elements with a message content. Useful for elements that\n * want to use aria-describedby to further describe themselves without adding additional visual\n * content.\n * \\@docs-private\n */\nexport class AriaDescriber {\n/**\n * @param {?} _platform\n */\nconstructor(private _platform: Platform) { }\n/**\n * Adds to the host element an aria-describedby reference to a hidden element that contains\n * the message. If the same message has already been registered, then it will reuse the created\n * message element.\n * @param {?} hostElement\n * @param {?} message\n * @return {?}\n */\ndescribe(hostElement: Element, message: string) {\n    if (!this._platform.isBrowser || !message.trim()) { return; }\n\n    if (!messageRegistry.has(message)) {\n      createMessageElement(message);\n    }\n\n    if (!isElementDescribedByMessage(hostElement, message)) {\n      addMessageReference(hostElement, message);\n    }\n  }\n/**\n * Removes the host element's aria-describedby reference to the message element.\n * @param {?} hostElement\n * @param {?} message\n * @return {?}\n */\nremoveDescription(hostElement: Element, message: string) {\n    if (!this._platform.isBrowser || !message.trim()) {\n      return;\n    }\n\n    if (isElementDescribedByMessage(hostElement, message)) {\n      removeMessageReference(hostElement, message);\n    }\n\n    const /** @type {?} */ registeredMessage = messageRegistry.get(message);\n    if (registeredMessage && registeredMessage.referenceCount === 0) {\n      deleteMessageElement(message);\n    }\n\n    if (messagesContainer && messagesContainer.childNodes.length === 0) {\n      deleteMessagesContainer();\n    }\n  }\n/**\n * Unregisters all created message elements and removes the message container.\n * @return {?}\n */\nngOnDestroy() {\n    if (!this._platform.isBrowser) { return; }\n\n    const /** @type {?} */ describedElements = document.querySelectorAll(`[${CDK_DESCRIBEDBY_HOST_ATTRIBUTE}]`);\n    for (let /** @type {?} */ i = 0; i < describedElements.length; i++) {\n      removeCdkDescribedByReferenceIds(describedElements[i]);\n      describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n    }\n\n    if (messagesContainer) {\n      deleteMessagesContainer();\n    }\n\n    messageRegistry.clear();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Platform, },\n];\n}\n\nfunction AriaDescriber_tsickle_Closure_declarations() {\n/** @type {?} */\nAriaDescriber.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAriaDescriber.ctorParameters;\n/** @type {?} */\nAriaDescriber.prototype._platform;\n}\n\n/**\n * Creates a new element in the visually hidden message container element with the message\n * as its content and adds it to the message registry.\n * @param {?} message\n * @return {?}\n */\nfunction createMessageElement(message: string) {\n  const /** @type {?} */ messageElement = document.createElement('div');\n  messageElement.setAttribute('id', `${CDK_DESCRIBEDBY_ID_PREFIX}-${nextId++}`);\n  messageElement.appendChild( /** @type {?} */((document.createTextNode(message))));\n\n  if (!messagesContainer) { createMessagesContainer(); } /** @type {?} */((\n  messagesContainer)).appendChild(messageElement);\n\n  messageRegistry.set(message, {messageElement, referenceCount: 0});\n}\n/**\n * Deletes the message element from the global messages container.\n * @param {?} message\n * @return {?}\n */\nfunction deleteMessageElement(message: string) {\n  const /** @type {?} */ registeredMessage = messageRegistry.get(message);\n  const /** @type {?} */ messageElement = registeredMessage && registeredMessage.messageElement;\n  if (messagesContainer && messageElement) {\n    messagesContainer.removeChild(messageElement);\n  }\n  messageRegistry.delete(message);\n}\n/**\n * Creates the global container for all aria-describedby messages.\n * @return {?}\n */\nfunction createMessagesContainer() {\n  messagesContainer = document.createElement('div');\n\n  messagesContainer.setAttribute('id', MESSAGES_CONTAINER_ID);\n  messagesContainer.setAttribute('aria-hidden', 'true');\n  messagesContainer.style.display = 'none';\n  document.body.appendChild(messagesContainer);\n}\n/**\n * Deletes the global messages container.\n * @return {?}\n */\nfunction deleteMessagesContainer() {\n  document.body.removeChild( /** @type {?} */((messagesContainer)));\n  messagesContainer = null;\n}\n/**\n * Removes all cdk-describedby messages that are hosted through the element.\n * @param {?} element\n * @return {?}\n */\nfunction removeCdkDescribedByReferenceIds(element: Element) {\n  // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX\n  const /** @type {?} */ originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby')\n      .filter(id => id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0);\n  element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\n}\n/**\n * Adds a message reference to the element using aria-describedby and increments the registered\n * message's reference count.\n * @param {?} element\n * @param {?} message\n * @return {?}\n */\nfunction addMessageReference(element: Element, message: string) {\n  const /** @type {?} */ registeredMessage = /** @type {?} */(( messageRegistry.get(message)));\n\n  // Add the aria-describedby reference and set the describedby_host attribute to mark the element.\n  addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n  element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, '');\n\n  registeredMessage.referenceCount++;\n}\n/**\n * Removes a message reference from the element using aria-describedby and decrements the registered\n * message's reference count.\n * @param {?} element\n * @param {?} message\n * @return {?}\n */\nfunction removeMessageReference(element: Element, message: string) {\n  const /** @type {?} */ registeredMessage = /** @type {?} */(( messageRegistry.get(message)));\n  registeredMessage.referenceCount--;\n\n  removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n  element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n}\n/**\n * Returns true if the element has been described by the provided message ID.\n * @param {?} element\n * @param {?} message\n * @return {?}\n */\nfunction isElementDescribedByMessage(element: Element, message: string): boolean {\n  const /** @type {?} */ referenceIds = getAriaReferenceIds(element, 'aria-describedby');\n  const /** @type {?} */ registeredMessage = messageRegistry.get(message);\n  const /** @type {?} */ messageId = registeredMessage && registeredMessage.messageElement.id;\n\n  return !!messageId && referenceIds.indexOf(messageId) != -1;\n}\n/**\n * \\@docs-private\n * @param {?} parentDispatcher\n * @param {?} platform\n * @return {?}\n */\nexport function ARIA_DESCRIBER_PROVIDER_FACTORY(\n    parentDispatcher: AriaDescriber, platform: Platform) {\n  return parentDispatcher || new AriaDescriber(platform);\n}\n/**\n * \\@docs-private\n */\nexport const ARIA_DESCRIBER_PROVIDER = {\n  // If there is already an AriaDescriber available, use that. Otherwise, provide a new one.\n  provide: AriaDescriber,\n  deps: [\n    [new Optional(), new SkipSelf(), AriaDescriber],\n    Platform\n  ],\n  useFactory: ARIA_DESCRIBER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * IDs are deliminated by an empty space, as per the spec.\n */\nconst ID_DELIMINATOR = ' ';\n/**\n * Adds the given ID to the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n * @param {?} el\n * @param {?} attr\n * @param {?} id\n * @return {?}\n */\nexport function addAriaReferencedId(el: Element, attr: string, id: string) {\n  const /** @type {?} */ ids = getAriaReferenceIds(el, attr);\n  if (ids.some(existingId => existingId.trim() == id.trim())) { return; }\n  ids.push(id.trim());\n\n  el.setAttribute(attr, ids.join(ID_DELIMINATOR));\n}\n/**\n * Removes the given ID from the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n * @param {?} el\n * @param {?} attr\n * @param {?} id\n * @return {?}\n */\nexport function removeAriaReferencedId(el: Element, attr: string, id: string) {\n  const /** @type {?} */ ids = getAriaReferenceIds(el, attr);\n  const /** @type {?} */ filteredIds = ids.filter(val => val != id.trim());\n\n  el.setAttribute(attr, filteredIds.join(ID_DELIMINATOR));\n}\n/**\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n * @param {?} el\n * @param {?} attr\n * @return {?}\n */\nexport function getAriaReferenceIds(el: Element, attr: string): string[] {\n  // Get string array of all individual ids (whitespace deliminated) in the attribute value\n  return (el.getAttribute(attr) || '').match(/\\S+/g) || [];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Injectable,\n  InjectionToken,\n  Optional,\n  Inject,\n  SkipSelf,\n  OnDestroy,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\n\n\nexport const /** @type {?} */ LIVE_ANNOUNCER_ELEMENT_TOKEN = new InjectionToken<HTMLElement>('liveAnnouncerElement');\n\n/** Possible politeness levels. */\nexport type AriaLivePoliteness = 'off' | 'polite' | 'assertive';\nexport class LiveAnnouncer implements OnDestroy {\nprivate _liveElement: Element;\n/**\n * @param {?} elementToken\n * @param {?} platform\n */\nconstructor(\n        elementToken: any,\n      platform: Platform) {\n    // Only do anything if we're on the browser platform.\n    if (platform.isBrowser) {\n      // We inject the live element as `any` because the constructor signature cannot reference\n      // browser globals (HTMLElement) on non-browser environments, since having a class decorator\n      // causes TypeScript to preserve the constructor signature types.\n      this._liveElement = elementToken || this._createLiveElement();\n    }\n  }\n/**\n * Announces a message to screenreaders.\n * @param {?} message Message to be announced to the screenreader\n * @param {?=} politeness The politeness of the announcer element\n * @return {?}\n */\nannounce(message: string, politeness: AriaLivePoliteness = 'polite'): void {\n    this._liveElement.textContent = '';\n\n    // TODO: ensure changing the politeness works on all environments we support.\n    this._liveElement.setAttribute('aria-live', politeness);\n\n    // This 100ms timeout is necessary for some browser + screen-reader combinations:\n    // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n    // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n    //   second time without clearing and then using a non-zero delay.\n    // (using JAWS 17 at time of this writing).\n    setTimeout(() => this._liveElement.textContent = message, 100);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._liveElement && this._liveElement.parentNode) {\n      this._liveElement.parentNode.removeChild(this._liveElement);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _createLiveElement(): Element {\n    let /** @type {?} */ liveEl = document.createElement('div');\n\n    liveEl.classList.add('cdk-visually-hidden');\n    liveEl.setAttribute('aria-atomic', 'true');\n    liveEl.setAttribute('aria-live', 'polite');\n\n    document.body.appendChild(liveEl);\n\n    return liveEl;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LIVE_ANNOUNCER_ELEMENT_TOKEN, ] }, ]},\n{type: Platform, },\n];\n}\n\nfunction LiveAnnouncer_tsickle_Closure_declarations() {\n/** @type {?} */\nLiveAnnouncer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLiveAnnouncer.ctorParameters;\n/** @type {?} */\nLiveAnnouncer.prototype._liveElement;\n}\n\n/**\n * \\@docs-private\n * @param {?} parentDispatcher\n * @param {?} liveElement\n * @param {?} platform\n * @return {?}\n */\nexport function LIVE_ANNOUNCER_PROVIDER_FACTORY(\n    parentDispatcher: LiveAnnouncer, liveElement: any, platform: Platform) {\n  return parentDispatcher || new LiveAnnouncer(liveElement, platform);\n}\n/**\n * \\@docs-private\n */\nexport const LIVE_ANNOUNCER_PROVIDER = {\n  // If there is already a LiveAnnouncer available, use that. Otherwise, provide a new one.\n  provide: LiveAnnouncer,\n  deps: [\n    [new Optional(), new SkipSelf(), LiveAnnouncer],\n    [new Optional(), new Inject(LIVE_ANNOUNCER_ELEMENT_TOKEN)],\n    Platform,\n  ],\n  useFactory: LIVE_ANNOUNCER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  NgZone,\n  OnDestroy,\n  AfterContentInit,\n  Injectable,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {first} from '@angular/cdk/rxjs';\nimport {InteractivityChecker} from './interactivity-checker';\n/**\n * Class that allows for trapping focus within a DOM element.\n * \n * NOTE: This class currently uses a very simple (naive) approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like tabIndex > 0, flex `order`, and shadow roots can cause to two to misalign.\n * This will be replaced with a more intelligent solution before the library is considered stable.\n */\nexport class FocusTrap {\nprivate _startAnchor: HTMLElement | null;\nprivate _endAnchor: HTMLElement | null;\n/**\n * Whether the focus trap is active.\n * @return {?}\n */\nget enabled(): boolean { return this._enabled; }\n/**\n * @param {?} val\n * @return {?}\n */\nset enabled(val: boolean) {\n    this._enabled = val;\n\n    if (this._startAnchor && this._endAnchor) {\n      this._startAnchor.tabIndex = this._endAnchor.tabIndex = this._enabled ? 0 : -1;\n    }\n  }\nprivate _enabled: boolean = true;\n/**\n * @param {?} _element\n * @param {?} _platform\n * @param {?} _checker\n * @param {?} _ngZone\n * @param {?=} deferAnchors\n */\nconstructor(\nprivate _element: HTMLElement,\nprivate _platform: Platform,\nprivate _checker: InteractivityChecker,\nprivate _ngZone: NgZone,\n    deferAnchors = false) {\n\n    if (!deferAnchors) {\n      this.attachAnchors();\n    }\n  }\n/**\n * Destroys the focus trap by cleaning up the anchors.\n * @return {?}\n */\ndestroy() {\n    if (this._startAnchor && this._startAnchor.parentNode) {\n      this._startAnchor.parentNode.removeChild(this._startAnchor);\n    }\n\n    if (this._endAnchor && this._endAnchor.parentNode) {\n      this._endAnchor.parentNode.removeChild(this._endAnchor);\n    }\n\n    this._startAnchor = this._endAnchor = null;\n  }\n/**\n * Inserts the anchors into the DOM. This is usually done automatically\n * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n * @return {?}\n */\nattachAnchors(): void {\n    // If we're not on the browser, there can be no focus to trap.\n    if (!this._platform.isBrowser) {\n      return;\n    }\n\n    if (!this._startAnchor) {\n      this._startAnchor = this._createAnchor();\n    }\n\n    if (!this._endAnchor) {\n      this._endAnchor = this._createAnchor();\n    }\n\n    this._ngZone.runOutsideAngular(() => { /** @type {?} */((\n      this._startAnchor)).addEventListener('focus', () => {\n        this.focusLastTabbableElement();\n      }); /** @type {?} */((\n\n      this._endAnchor)).addEventListener('focus', () => {\n        this.focusFirstTabbableElement();\n      });\n\n      if (this._element.parentNode) {\n        this._element.parentNode.insertBefore( /** @type {?} */((this._startAnchor)), this._element);\n        this._element.parentNode.insertBefore( /** @type {?} */((this._endAnchor)), this._element.nextSibling);\n      }\n    });\n  }\n/**\n * Waits for the zone to stabilize, then either focuses the first element that the\n * user specified, or the first tabbable element.\n * @return {?} Returns a promise that resolves with a boolean, depending\n * on whether focus was moved successfuly.\n */\nfocusInitialElementWhenReady(): Promise<boolean> {\n    return new Promise<boolean>(resolve => {\n      this._executeOnStable(() => resolve(this.focusInitialElement()));\n    });\n  }\n/**\n * Waits for the zone to stabilize, then focuses\n * the first tabbable element within the focus trap region.\n * @return {?} Returns a promise that resolves with a boolean, depending\n * on whether focus was moved successfuly.\n */\nfocusFirstTabbableElementWhenReady(): Promise<boolean> {\n    return new Promise<boolean>(resolve => {\n      this._executeOnStable(() => resolve(this.focusFirstTabbableElement()));\n    });\n  }\n/**\n * Waits for the zone to stabilize, then focuses\n * the last tabbable element within the focus trap region.\n * @return {?} Returns a promise that resolves with a boolean, depending\n * on whether focus was moved successfuly.\n */\nfocusLastTabbableElementWhenReady(): Promise<boolean> {\n    return new Promise<boolean>(resolve => {\n      this._executeOnStable(() => resolve(this.focusLastTabbableElement()));\n    });\n  }\n/**\n * Get the specified boundary element of the trapped region.\n * @param {?} bound The boundary to get (start or end of trapped region).\n * @return {?} The boundary element.\n */\nprivate _getRegionBoundary(bound: 'start' | 'end'): HTMLElement | null {\n    // Contains the deprecated version of selector, for temporary backwards comparability.\n    let /** @type {?} */ markers = /** @type {?} */(( this._element.querySelectorAll(`[cdk-focus-region-${bound}], ` +\n                                                 `[cdk-focus-${bound}]`) as NodeListOf<HTMLElement>));\n\n    for (let /** @type {?} */ i = 0; i < markers.length; i++) {\n      if (markers[i].hasAttribute(`cdk-focus-${bound}`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-${bound}',` +\n                     ` use 'cdk-focus-region-${bound}' instead.`, markers[i]);\n      }\n    }\n\n    if (bound == 'start') {\n      return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\n    }\n    return markers.length ?\n        markers[markers.length - 1] : this._getLastTabbableElement(this._element);\n  }\n/**\n * Focuses the element that should be focused when the focus trap is initialized.\n * @return {?} Returns whether focus was moved successfuly.\n */\nfocusInitialElement(): boolean {\n    const /** @type {?} */ redirectToElement = /** @type {?} */(( this._element.querySelector('[cdk-focus-initial]') as HTMLElement));\n\n    if (redirectToElement) {\n      redirectToElement.focus();\n      return true;\n    }\n\n    return this.focusFirstTabbableElement();\n  }\n/**\n * Focuses the first tabbable element within the focus trap region.\n * @return {?} Returns whether focus was moved successfuly.\n */\nfocusFirstTabbableElement(): boolean {\n    const /** @type {?} */ redirectToElement = this._getRegionBoundary('start');\n\n    if (redirectToElement) {\n      redirectToElement.focus();\n    }\n\n    return !!redirectToElement;\n  }\n/**\n * Focuses the last tabbable element within the focus trap region.\n * @return {?} Returns whether focus was moved successfuly.\n */\nfocusLastTabbableElement(): boolean {\n    const /** @type {?} */ redirectToElement = this._getRegionBoundary('end');\n\n    if (redirectToElement) {\n      redirectToElement.focus();\n    }\n\n    return !!redirectToElement;\n  }\n/**\n * Get the first tabbable element from a DOM subtree (inclusive).\n * @param {?} root\n * @return {?}\n */\nprivate _getFirstTabbableElement(root: HTMLElement): HTMLElement | null {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n\n    // Iterate in DOM order. Note that IE doesn't have `children` for SVG so we fall\n    // back to `childNodes` which includes text nodes, comments etc.\n    let /** @type {?} */ children = root.children || root.childNodes;\n\n    for (let /** @type {?} */ i = 0; i < children.length; i++) {\n      let /** @type {?} */ tabbableChild = children[i].nodeType === Node.ELEMENT_NODE ?\n        this._getFirstTabbableElement( /** @type {?} */((children[i] as HTMLElement))) :\n        null;\n\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n/**\n * Get the last tabbable element from a DOM subtree (inclusive).\n * @param {?} root\n * @return {?}\n */\nprivate _getLastTabbableElement(root: HTMLElement): HTMLElement | null {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n\n    // Iterate in reverse DOM order.\n    let /** @type {?} */ children = root.children || root.childNodes;\n\n    for (let /** @type {?} */ i = children.length - 1; i >= 0; i--) {\n      let /** @type {?} */ tabbableChild = children[i].nodeType === Node.ELEMENT_NODE ?\n        this._getLastTabbableElement( /** @type {?} */((children[i] as HTMLElement))) :\n        null;\n\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n/**\n * Creates an anchor element.\n * @return {?}\n */\nprivate _createAnchor(): HTMLElement {\n    let /** @type {?} */ anchor = document.createElement('div');\n    anchor.tabIndex = this._enabled ? 0 : -1;\n    anchor.classList.add('cdk-visually-hidden');\n    anchor.classList.add('cdk-focus-trap-anchor');\n    return anchor;\n  }\n/**\n * Executes a function when the zone is stable.\n * @param {?} fn\n * @return {?}\n */\nprivate _executeOnStable(fn: () => any): void {\n    if (this._ngZone.isStable) {\n      fn();\n    } else {\n      first.call(this._ngZone.onStable.asObservable()).subscribe(fn);\n    }\n  }\n}\n\nfunction FocusTrap_tsickle_Closure_declarations() {\n/** @type {?} */\nFocusTrap.prototype._startAnchor;\n/** @type {?} */\nFocusTrap.prototype._endAnchor;\n/** @type {?} */\nFocusTrap.prototype._enabled;\n/** @type {?} */\nFocusTrap.prototype._element;\n/** @type {?} */\nFocusTrap.prototype._platform;\n/** @type {?} */\nFocusTrap.prototype._checker;\n/** @type {?} */\nFocusTrap.prototype._ngZone;\n}\n\n/**\n * Factory that allows easy instantiation of focus traps.\n */\nexport class FocusTrapFactory {\n/**\n * @param {?} _checker\n * @param {?} _platform\n * @param {?} _ngZone\n */\nconstructor(\nprivate _checker: InteractivityChecker,\nprivate _platform: Platform,\nprivate _ngZone: NgZone) { }\n/**\n * @param {?} element\n * @param {?=} deferAnchors\n * @return {?}\n */\ncreate(element: HTMLElement, deferAnchors = false): FocusTrap {\n    return new FocusTrap(element, this._platform, this._checker, this._ngZone, deferAnchors);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: InteractivityChecker, },\n{type: Platform, },\n{type: NgZone, },\n];\n}\n\nfunction FocusTrapFactory_tsickle_Closure_declarations() {\n/** @type {?} */\nFocusTrapFactory.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFocusTrapFactory.ctorParameters;\n/** @type {?} */\nFocusTrapFactory.prototype._checker;\n/** @type {?} */\nFocusTrapFactory.prototype._platform;\n/** @type {?} */\nFocusTrapFactory.prototype._ngZone;\n}\n\n/**\n * Directive for trapping focus within a region.\n * @deprecated\n */\nexport class FocusTrapDeprecatedDirective implements OnDestroy, AfterContentInit {\n  focusTrap: FocusTrap;\n/**\n * Whether the focus trap is active.\n * @return {?}\n */\nget disabled(): boolean { return !this.focusTrap.enabled; }\n/**\n * @param {?} val\n * @return {?}\n */\nset disabled(val: boolean) {\n    this.focusTrap.enabled = !coerceBooleanProperty(val);\n  }\n/**\n * @param {?} _elementRef\n * @param {?} _focusTrapFactory\n */\nconstructor(private _elementRef: ElementRef,\nprivate _focusTrapFactory: FocusTrapFactory) {\n    this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.focusTrap.destroy();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this.focusTrap.attachAnchors();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'cdk-focus-trap',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: FocusTrapFactory, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n};\n}\n\nfunction FocusTrapDeprecatedDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nFocusTrapDeprecatedDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFocusTrapDeprecatedDirective.ctorParameters;\n/** @type {?} */\nFocusTrapDeprecatedDirective.propDecorators;\n/** @type {?} */\nFocusTrapDeprecatedDirective.prototype.focusTrap;\n/** @type {?} */\nFocusTrapDeprecatedDirective.prototype._elementRef;\n/** @type {?} */\nFocusTrapDeprecatedDirective.prototype._focusTrapFactory;\n}\n\n/**\n * Directive for trapping focus within a region.\n */\nexport class FocusTrapDirective implements OnDestroy, AfterContentInit {\n  focusTrap: FocusTrap;\n/**\n * Whether the focus trap is active.\n * @return {?}\n */\nget enabled(): boolean { return this.focusTrap.enabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset enabled(value: boolean) { this.focusTrap.enabled = coerceBooleanProperty(value); }\n/**\n * @param {?} _elementRef\n * @param {?} _focusTrapFactory\n */\nconstructor(private _elementRef: ElementRef,\nprivate _focusTrapFactory: FocusTrapFactory) {\n    this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.focusTrap.destroy();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this.focusTrap.attachAnchors();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[cdkTrapFocus]',\n  exportAs: 'cdkTrapFocus',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: FocusTrapFactory, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'enabled': [{ type: Input, args: ['cdkTrapFocus', ] },],\n};\n}\n\nfunction FocusTrapDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nFocusTrapDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFocusTrapDirective.ctorParameters;\n/** @type {?} */\nFocusTrapDirective.propDecorators;\n/** @type {?} */\nFocusTrapDirective.prototype.focusTrap;\n/** @type {?} */\nFocusTrapDirective.prototype._elementRef;\n/** @type {?} */\nFocusTrapDirective.prototype._focusTrapFactory;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\n/**\n * Utility for checking the interactivity of an element, such as whether is is focusable or\n * tabbable.\n */\nexport class InteractivityChecker {\n/**\n * @param {?} _platform\n */\nconstructor(private _platform: Platform) {}\n/**\n * Gets whether an element is disabled.\n * \n * @param {?} element Element to be checked.\n * @return {?} Whether the element is disabled.\n */\nisDisabled(element: HTMLElement): boolean {\n    // This does not capture some cases, such as a non-form control with a disabled attribute or\n    // a form control inside of a disabled form, but should capture the most common cases.\n    return element.hasAttribute('disabled');\n  }\n/**\n * Gets whether an element is visible for the purposes of interactivity.\n * \n * This will capture states like `display: none` and `visibility: hidden`, but not things like\n * being clipped by an `overflow: hidden` parent or being outside the viewport.\n * \n * @param {?} element\n * @return {?} Whether the element is visible.\n */\nisVisible(element: HTMLElement): boolean {\n    return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n  }\n/**\n * Gets whether an element can be reached via Tab key.\n * Assumes that the element has already been checked with isFocusable.\n * \n * @param {?} element Element to be checked.\n * @return {?} Whether the element is tabbable.\n */\nisTabbable(element: HTMLElement): boolean {\n    // Nothing is tabbable on the the server 😎\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    let /** @type {?} */ frameElement = /** @type {?} */(( getWindow(element).frameElement as HTMLElement));\n\n    if (frameElement) {\n\n      let /** @type {?} */ frameType = frameElement && frameElement.nodeName.toLowerCase();\n\n      // Frame elements inherit their tabindex onto all child elements.\n      if (getTabIndexValue(frameElement) === -1) {\n        return false;\n      }\n\n      // Webkit and Blink consider anything inside of an <object> element as non-tabbable.\n      if ((this._platform.BLINK || this._platform.WEBKIT) && frameType === 'object') {\n        return false;\n      }\n\n      // Webkit and Blink disable tabbing to an element inside of an invisible frame.\n      if ((this._platform.BLINK || this._platform.WEBKIT) && !this.isVisible(frameElement)) {\n        return false;\n      }\n\n    }\n\n    let /** @type {?} */ nodeName = element.nodeName.toLowerCase();\n    let /** @type {?} */ tabIndexValue = getTabIndexValue(element);\n\n    if (element.hasAttribute('contenteditable')) {\n      return tabIndexValue !== -1;\n    }\n\n    if (nodeName === 'iframe') {\n      // The frames may be tabbable depending on content, but it's not possibly to reliably\n      // investigate the content of the frames.\n      return false;\n    }\n\n    if (nodeName === 'audio') {\n      if (!element.hasAttribute('controls')) {\n        // By default an <audio> element without the controls enabled is not tabbable.\n        return false;\n      } else if (this._platform.BLINK) {\n        // In Blink <audio controls> elements are always tabbable.\n        return true;\n      }\n    }\n\n    if (nodeName === 'video') {\n      if (!element.hasAttribute('controls') && this._platform.TRIDENT) {\n        // In Trident a <video> element without the controls enabled is not tabbable.\n        return false;\n      } else if (this._platform.BLINK || this._platform.FIREFOX) {\n        // In Chrome and Firefox <video controls> elements are always tabbable.\n        return true;\n      }\n    }\n\n    if (nodeName === 'object' && (this._platform.BLINK || this._platform.WEBKIT)) {\n      // In all Blink and WebKit based browsers <object> elements are never tabbable.\n      return false;\n    }\n\n    // In iOS the browser only considers some specific elements as tabbable.\n    if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n      return false;\n    }\n\n    return element.tabIndex >= 0;\n  }\n/**\n * Gets whether an element can be focused by the user.\n * \n * @param {?} element Element to be checked.\n * @return {?} Whether the element is focusable.\n */\nisFocusable(element: HTMLElement): boolean {\n    // Perform checks in order of left to most expensive.\n    // Again, naive approach that does not capture many edge cases and browser quirks.\n    return isPotentiallyFocusable(element) && !this.isDisabled(element) && this.isVisible(element);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Platform, },\n];\n}\n\nfunction InteractivityChecker_tsickle_Closure_declarations() {\n/** @type {?} */\nInteractivityChecker.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nInteractivityChecker.ctorParameters;\n/** @type {?} */\nInteractivityChecker.prototype._platform;\n}\n\n/**\n * Checks whether the specified element has any geometry / rectangles.\n * @param {?} element\n * @return {?}\n */\nfunction hasGeometry(element: HTMLElement): boolean {\n  // Use logic from jQuery to check for an invisible element.\n  // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n  return !!(element.offsetWidth || element.offsetHeight || element.getClientRects().length);\n}\n/**\n * Gets whether an element's\n * @param {?} element\n * @return {?}\n */\nfunction isNativeFormElement(element: Node) {\n  let /** @type {?} */ nodeName = element.nodeName.toLowerCase();\n  return nodeName === 'input' ||\n      nodeName === 'select' ||\n      nodeName === 'button' ||\n      nodeName === 'textarea';\n}\n/**\n * Gets whether an element is an <input type=\"hidden\">.\n * @param {?} element\n * @return {?}\n */\nfunction isHiddenInput(element: HTMLElement): boolean {\n  return isInputElement(element) && element.type == 'hidden';\n}\n/**\n * Gets whether an element is an anchor that has an href attribute.\n * @param {?} element\n * @return {?}\n */\nfunction isAnchorWithHref(element: HTMLElement): boolean {\n  return isAnchorElement(element) && element.hasAttribute('href');\n}\n/**\n * Gets whether an element is an input element.\n * @param {?} element\n * @return {?}\n */\nfunction isInputElement(element: HTMLElement): element is HTMLInputElement {\n  return element.nodeName.toLowerCase() == 'input';\n}\n/**\n * Gets whether an element is an anchor element.\n * @param {?} element\n * @return {?}\n */\nfunction isAnchorElement(element: HTMLElement): element is HTMLAnchorElement {\n  return element.nodeName.toLowerCase() == 'a';\n}\n/**\n * Gets whether an element has a valid tabindex.\n * @param {?} element\n * @return {?}\n */\nfunction hasValidTabIndex(element: HTMLElement): boolean {\n  if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n    return false;\n  }\n\n  let /** @type {?} */ tabIndex = element.getAttribute('tabindex');\n\n  // IE11 parses tabindex=\"\" as the value \"-32768\"\n  if (tabIndex == '-32768') {\n    return false;\n  }\n\n  return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n * @param {?} element\n * @return {?}\n */\nfunction getTabIndexValue(element: HTMLElement): number | null {\n  if (!hasValidTabIndex(element)) {\n    return null;\n  }\n\n  // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\n  const /** @type {?} */ tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\n\n  return isNaN(tabIndex) ? -1 : tabIndex;\n}\n/**\n * Checks whether the specified element is potentially tabbable on iOS\n * @param {?} element\n * @return {?}\n */\nfunction isPotentiallyTabbableIOS(element: HTMLElement): boolean {\n  let /** @type {?} */ nodeName = element.nodeName.toLowerCase();\n  let /** @type {?} */ inputType = nodeName === 'input' && ( /** @type {?} */((element as HTMLInputElement))).type;\n\n  return inputType === 'text'\n      || inputType === 'password'\n      || nodeName === 'select'\n      || nodeName === 'textarea';\n}\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n * @param {?} element\n * @return {?}\n */\nfunction isPotentiallyFocusable(element: HTMLElement): boolean {\n  // Inputs are potentially focusable *unless* they're type=\"hidden\".\n  if (isHiddenInput(element)) {\n    return false;\n  }\n\n  return isNativeFormElement(element) ||\n      isAnchorWithHref(element) ||\n      element.hasAttribute('contenteditable') ||\n      hasValidTabIndex(element);\n}\n/**\n * Gets the parent window of a DOM node with regards of being inside of an iframe.\n * @param {?} node\n * @return {?}\n */\nfunction getWindow(node: HTMLElement): Window {\n  return node.ownerDocument.defaultView || window;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * @license \n * Copyright Google Inc. All Rights Reserved.\n * \n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport const UP_ARROW = 38;\nexport const /** @type {?} */ DOWN_ARROW = 40;\nexport const /** @type {?} */ RIGHT_ARROW = 39;\nexport const /** @type {?} */ LEFT_ARROW = 37;\nexport const /** @type {?} */ PAGE_UP = 33;\nexport const /** @type {?} */ PAGE_DOWN = 34;\nexport const /** @type {?} */ HOME = 36;\nexport const /** @type {?} */ END = 35;\nexport const /** @type {?} */ ENTER = 13;\nexport const /** @type {?} */ SPACE = 32;\nexport const /** @type {?} */ TAB = 9;\nexport const /** @type {?} */ ESCAPE = 27;\nexport const /** @type {?} */ BACKSPACE = 8;\nexport const /** @type {?} */ DELETE = 46;\nexport const /** @type {?} */ A = 65;\nexport const /** @type {?} */ Z = 90;\nexport const /** @type {?} */ ZERO = 48;\nexport const /** @type {?} */ NINE = 91;\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Observable, ObservableInput} from 'rxjs/Observable';\nimport {PartialObserver} from 'rxjs/Observer';\nimport {Subscription} from 'rxjs/Subscription';\nimport {IScheduler} from 'rxjs/Scheduler';\nimport {_finally as _finallyOperator} from 'rxjs/operator/finally';\nimport {_catch as _catchOperator} from 'rxjs/operator/catch';\nimport {_do as _doOperator} from 'rxjs/operator/do';\nimport {map as mapOperator} from 'rxjs/operator/map';\nimport {filter as filterOperator} from 'rxjs/operator/filter';\nimport {share as shareOperator} from 'rxjs/operator/share';\nimport {first as firstOperator} from 'rxjs/operator/first';\nimport {switchMap as switchMapOperator} from 'rxjs/operator/switchMap';\nimport {startWith as startWithOperator} from 'rxjs/operator/startWith';\nimport {debounceTime as debounceTimeOperator} from 'rxjs/operator/debounceTime';\nimport {auditTime as auditTimeOperator} from 'rxjs/operator/auditTime';\nimport {takeUntil as takeUntilOperator} from 'rxjs/operator/takeUntil';\n\n/**\n * Represents a strongly-typed chain of RxJS operators.\n *\n * We achieve strict type enforcement on the chained operators by creating types that\n * *unambiguously* match specific rxjs operators. These unambiguous types are created by\n * intersecting a \"brand\" to the `typeof` the existing operator. The brand (a class with a private\n * member) effectively forces nominal typing for the operators. This allows typescript to understand\n * that, for example, `filter` is *`filter`* and not, say, a map of T => boolean.\n *\n * The downside to this approach is that operators must be imported in their type-coerced form\n * rather than from the normal rxjs location.\n */\nexport interface StrictRxChain<T> {\n  call<R>(operator: mapOperatorType<T, R>,\n      project: (value: T, index: number) => R, thisArg?: any): StrictRxChain<R>;\n\n  call<R>(operator: switchMapOperatorType<T, R>,\n      project: (value: T, index: number) => ObservableInput<R>): StrictRxChain<R>;\n\n  call<R>(operator: catchOperatorType<T, R>,\n      selector: (err: any, caught: Observable<T>) => ObservableInput<R>): StrictRxChain<T | R>;\n\n  call(operator: filterOperatorType<T>,\n      predicate: (value: T, index: number) => boolean, thisArg?: any): StrictRxChain<T>;\n\n  call(operator: shareOperatorType<T>): StrictRxChain<T>;\n\n  call(operator: finallyOperatorType<T>, action: () => void): StrictRxChain<T>;\n\n  call(operator: doOperatorType<T>, next: (x: T) => void, error?:\n      (e: any) => void, complete?: () => void): StrictRxChain<T>;\n\n  call(operator: doOperatorType<T>, observer: PartialObserver<T>): StrictRxChain<T>;\n\n  call(operator: firstOperatorType<T>, thisArg?: any, defaultValue?: any): StrictRxChain<T>;\n\n  call(operator: firstOperatorType<T>, predicate: (value: T) => boolean): StrictRxChain<T>;\n\n  call(operator: startWithOperatorType<T>, ...args: any[]): StrictRxChain<T>;\n\n  call(operator: debounceTimeOperatorType<T>, dueTime: number,\n      scheduler?: IScheduler): StrictRxChain<T>;\n\n  call(operator: auditTimeOperatorType<T>, duration: number,\n      scheduler?: IScheduler): StrictRxChain<T>;\n\n  call(operator: takeUntilOperatorType<T>, notifier: Observable<any>): StrictRxChain<T>;\n\n  subscribe(fn: (t: T) => void): Subscription;\n\n  result(): Observable<T>;\n}\nexport class FinallyBrand {\nprivate _; }\n\nfunction FinallyBrand_tsickle_Closure_declarations() {\n/** @type {?} */\nFinallyBrand.prototype._;\n}\n\nexport class CatchBrand {\nprivate _; }\n\nfunction CatchBrand_tsickle_Closure_declarations() {\n/** @type {?} */\nCatchBrand.prototype._;\n}\n\nexport class DoBrand {\nprivate _; }\n\nfunction DoBrand_tsickle_Closure_declarations() {\n/** @type {?} */\nDoBrand.prototype._;\n}\n\nexport class MapBrand {\nprivate _; }\n\nfunction MapBrand_tsickle_Closure_declarations() {\n/** @type {?} */\nMapBrand.prototype._;\n}\n\nexport class FilterBrand {\nprivate _; }\n\nfunction FilterBrand_tsickle_Closure_declarations() {\n/** @type {?} */\nFilterBrand.prototype._;\n}\n\nexport class ShareBrand {\nprivate _; }\n\nfunction ShareBrand_tsickle_Closure_declarations() {\n/** @type {?} */\nShareBrand.prototype._;\n}\n\nexport class FirstBrand {\nprivate _; }\n\nfunction FirstBrand_tsickle_Closure_declarations() {\n/** @type {?} */\nFirstBrand.prototype._;\n}\n\nexport class SwitchMapBrand {\nprivate _; }\n\nfunction SwitchMapBrand_tsickle_Closure_declarations() {\n/** @type {?} */\nSwitchMapBrand.prototype._;\n}\n\nexport class StartWithBrand {\nprivate _; }\n\nfunction StartWithBrand_tsickle_Closure_declarations() {\n/** @type {?} */\nStartWithBrand.prototype._;\n}\n\nexport class DebounceTimeBrand {\nprivate _; }\n\nfunction DebounceTimeBrand_tsickle_Closure_declarations() {\n/** @type {?} */\nDebounceTimeBrand.prototype._;\n}\n\nexport class AuditTimeBrand {\nprivate _; }\n\nfunction AuditTimeBrand_tsickle_Closure_declarations() {\n/** @type {?} */\nAuditTimeBrand.prototype._;\n}\n\nexport class TakeUntilBrand {\nprivate _; }\n\nfunction TakeUntilBrand_tsickle_Closure_declarations() {\n/** @type {?} */\nTakeUntilBrand.prototype._;\n}\n\n/* tslint:enable:no-unused-variable */\n\n\nexport type finallyOperatorType<T> = typeof _finallyOperator & FinallyBrand;\nexport type catchOperatorType<T, R> = typeof _catchOperator & CatchBrand;\nexport type doOperatorType<T> = typeof _doOperator & DoBrand;\nexport type mapOperatorType<T, R> = typeof mapOperator & MapBrand;\nexport type filterOperatorType<T> = typeof filterOperator & FilterBrand;\nexport type shareOperatorType<T> = typeof shareOperator & ShareBrand;\nexport type firstOperatorType<T> = typeof firstOperator & FirstBrand;\nexport type switchMapOperatorType<T, R> = typeof switchMapOperator & SwitchMapBrand;\nexport type startWithOperatorType<T> = typeof startWithOperator & StartWithBrand;\nexport type debounceTimeOperatorType<T> = typeof debounceTimeOperator & DebounceTimeBrand;\nexport type auditTimeOperatorType<T> = typeof auditTimeOperator & AuditTimeBrand;\nexport type takeUntilOperatorType<T> = typeof takeUntilOperator & TakeUntilBrand;\n\n// We add `Function` to the type intersection to make this nomically different from\n// `finallyOperatorType` while still being structurally the same. Without this, TypeScript tries to\n// reduce `typeof _finallyOperator & FinallyBrand` to `finallyOperatorType<T>` and then fails\n// because `T` isn't known.\nexport const /** @type {?} */ finallyOperator = /** @type {?} */((\n    _finallyOperator as typeof _finallyOperator & FinallyBrand & Function));\nexport const /** @type {?} */ catchOperator = /** @type {?} */(( _catchOperator as typeof _catchOperator & CatchBrand & Function));\nexport const /** @type {?} */ doOperator = /** @type {?} */(( _doOperator as typeof _doOperator & DoBrand & Function));\nexport const /** @type {?} */ map = /** @type {?} */(( mapOperator as typeof mapOperator & MapBrand & Function));\nexport const /** @type {?} */ filter = /** @type {?} */(( filterOperator as typeof filterOperator & FilterBrand & Function));\nexport const /** @type {?} */ share = /** @type {?} */(( shareOperator as typeof shareOperator & ShareBrand & Function));\nexport const /** @type {?} */ first = /** @type {?} */(( firstOperator as typeof firstOperator & FirstBrand & Function));\nexport const /** @type {?} */ switchMap = /** @type {?} */(( switchMapOperator as typeof switchMapOperator & SwitchMapBrand & Function));\nexport const /** @type {?} */ startWith = /** @type {?} */(( startWithOperator as typeof startWithOperator & StartWithBrand & Function));\nexport const /** @type {?} */ debounceTime = /** @type {?} */((\n    debounceTimeOperator as typeof debounceTimeOperator & DebounceTimeBrand & Function));\nexport const /** @type {?} */ auditTime = /** @type {?} */(( auditTimeOperator as typeof auditTimeOperator & AuditTimeBrand & Function));\nexport const /** @type {?} */ takeUntil = /** @type {?} */(( takeUntilOperator as typeof takeUntilOperator & TakeUntilBrand & Function));\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Observable} from 'rxjs/Observable';\nimport {Subscription} from 'rxjs/Subscription';\nimport {StrictRxChain} from './rx-operators';\n/**\n * Utility class used to chain RxJS operators.\n * \n * This class is the concrete implementation, but the type used by the user when chaining\n * is StrictRxChain. The strict chain enforces types on the operators to the same level as\n * the prototype-added equivalents.\n */\nexport class RxChain<T> {\n/**\n * @param {?} _context\n */\nprivate constructor(private _context: Observable<T>) { }\n/**\n * Starts a new chain and specifies the initial `this` value.\n * @template O\n * @param {?} context Initial `this` value for the chain.\n * @return {?}\n */\nstatic from<O>(context: Observable<O>): StrictRxChain<O> {\n    return new RxChain(context);\n  }\n/**\n * Invokes an RxJS operator as a part of the chain.\n * @param {?} operator Operator to be invoked.\n * @param {...?} args Arguments to be passed to the operator.\n * @return {?}\n */\ncall(operator: Function, ...args: any[]): RxChain<any> {\n    this._context = operator.call(this._context, ...args);\n    return this;\n  }\n/**\n * Subscribes to the result of the chain.\n * @param {?} fn Callback to be invoked when the result emits a value.\n * @return {?}\n */\nsubscribe(fn: (t: T) => void): Subscription {\n    return this._context.subscribe(fn);\n  }\n/**\n * Returns the result of the chain.\n * @return {?}\n */\nresult(): Observable<T> {\n    return this._context;\n  }\n}\n\nfunction RxChain_tsickle_Closure_declarations() {\n/** @type {?} */\nRxChain.prototype._context;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {Platform} from './platform';\nexport class PlatformModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [Platform]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction PlatformModule_tsickle_Closure_declarations() {\n/** @type {?} */\nPlatformModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPlatformModule.ctorParameters;\n}\n\n\n\nexport {Platform} from './platform';\nexport {getSupportedInputTypes} from './features';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Cached result Set of input types support by the current browser.\n */\nlet supportedInputTypes: Set<string>;\n/**\n * Types of <input> that *might* be supported.\n */\nconst candidateInputTypes = [\n  // `color` must come first. Chrome 56 shows a warning if we change the type to `color` after\n  // first changing it to something else:\n  // The specified value \"\" does not conform to the required format.\n  // The format is \"#rrggbb\" where rr, gg, bb are two-digit hexadecimal numbers.\n  'color',\n  'button',\n  'checkbox',\n  'date',\n  'datetime-local',\n  'email',\n  'file',\n  'hidden',\n  'image',\n  'month',\n  'number',\n  'password',\n  'radio',\n  'range',\n  'reset',\n  'search',\n  'submit',\n  'tel',\n  'text',\n  'time',\n  'url',\n  'week',\n];\n/**\n * @return {?} The input types supported by this browser.\n */\nexport function getSupportedInputTypes(): Set<string> {\n  // Result is cached.\n  if (supportedInputTypes) {\n    return supportedInputTypes;\n  }\n\n  // We can't check if an input type is not supported until we're on the browser, so say that\n  // everything is supported when not on the browser. We don't use `Platform` here since it's\n  // just a helper function and can't inject it.\n  if (typeof document !== 'object' || !document) {\n    supportedInputTypes = new Set(candidateInputTypes);\n    return supportedInputTypes;\n  }\n\n  let /** @type {?} */ featureTestInput = document.createElement('input');\n  supportedInputTypes = new Set(candidateInputTypes.filter(value => {\n    featureTestInput.setAttribute('type', value);\n    return featureTestInput.type === value;\n  }));\n\n  return supportedInputTypes;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\n\n// Whether the current platform supports the V8 Break Iterator. The V8 check\n// is necessary to detect all Blink based browsers.\nconst /** @type {?} */ hasV8BreakIterator = (typeof(Intl) !== 'undefined' && ( /** @type {?} */((Intl as any))).v8BreakIterator);\n/**\n * Service to detect the current platform by comparing the userAgent strings and\n * checking browser-specific global properties.\n * \\@docs-private\n */\nexport class Platform {\n  isBrowser: boolean = typeof document === 'object' && !!document;\n/**\n * Layout Engines\n */\nEDGE = this.isBrowser && /(edge)/i.test(navigator.userAgent);\n  TRIDENT = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent);\n\n  // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.\n  BLINK = this.isBrowser &&\n      (!!(( /** @type {?} */((window as any))).chrome || hasV8BreakIterator) && !!CSS && !this.EDGE && !this.TRIDENT);\n\n  // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to\n  // ensure that Webkit runs standalone and is not used as another engine's base.\n  WEBKIT = this.isBrowser &&\n      /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;\n/**\n * Browsers and Platform Types\n */\nIOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) && !(window as any).MSStream;\n\n  // It's difficult to detect the plain Gecko engine, because most of the browsers identify\n  // them self as Gecko-like browsers and modify the userAgent's according to that.\n  // Since we only cover one explicit Firefox case, we can simply check for Firefox\n  // instead of having an unstable check for Gecko.\n  FIREFOX = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);\n\n  // Trident on mobile adds the android platform to the userAgent to trick detections.\n  ANDROID = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT;\n\n  // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake\n  // this and just place the Safari keyword in the userAgent. To be more safe about Safari every\n  // Safari browser should also use Webkit as its layout engine.\n  SAFARI = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction Platform_tsickle_Closure_declarations() {\n/** @type {?} */\nPlatform.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPlatform.ctorParameters;\n/** @type {?} */\nPlatform.prototype.isBrowser;\n/**\n * Layout Engines\n * @type {?}\n */\nPlatform.prototype.EDGE;\n/** @type {?} */\nPlatform.prototype.TRIDENT;\n/** @type {?} */\nPlatform.prototype.BLINK;\n/** @type {?} */\nPlatform.prototype.WEBKIT;\n/**\n * Browsers and Platform Types\n * @type {?}\n */\nPlatform.prototype.IOS;\n/** @type {?} */\nPlatform.prototype.FIREFOX;\n/** @type {?} */\nPlatform.prototype.ANDROID;\n/** @type {?} */\nPlatform.prototype.SAFARI;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Coerces a data-bound value (typically a string) to a number.\n * @param {?} value\n * @param {?=} fallbackValue\n * @return {?}\n */\nexport function coerceNumberProperty(value: any, fallbackValue = 0) {\n  // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,\n  // and other non-number values as NaN, where Number just uses 0) but it considers the string\n  // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.\n  return isNaN(parseFloat( /** @type {?} */((value as any)))) || isNaN(Number(value)) ? fallbackValue : Number(value);\n}\n","\n/**\n * Coerces a data-bound value (typically a string) to a boolean.\n * @param {?} value\n * @return {?}\n */\nexport function coerceBooleanProperty(value: any): boolean {\n  return value != null && `${value}` !== 'false';\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}","import { IUser, SecurityService } from '@savantly/ngx-security';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/of';\n\nexport const /** @type {?} */ defaultMenuId = 'mainMenu';\n\nexport interface IMenu {\n  id: string;\n  text: string;\n  isPublic: boolean;\n  roles: string[];\n  items: IMenu[];\n  position: number;\n  disabled: boolean;\n  icon: string;\n  callback: (event: any) => void;\n  addMenuItem: (item: any) => IMenu;\n  removeMenuItem: (id: string) => boolean;\n  getMenuItem: (id: string) => IMenu;\n}\nexport class Menu implements IMenu {\n  id: string;\n  text: string;\n  isPublic: boolean;\n  roles: string[];\n  items: IMenu[];\n  position: number;\n  callback: (event: any) => void;\n  disabled: boolean;\n  icon: string;\n/**\n * @param {?} item\n * @return {?}\n */\naddMenuItem(item: IMenu) {\n    if (this.items.findIndex(x => x.id === item.id) > -1) {\n      throw new Error('Item with this id: \"' + item.id + '\" already exists in menu: ' + this.id);\n    } else {\n      this.items.push(item);\n    }\n    const /** @type {?} */ index = this.items.findIndex(x => x.id === item.id);\n    return this.items[index];\n  }\n/**\n * @param {?} id\n * @return {?}\n */\nremoveMenuItem(id: string): boolean {\n    const /** @type {?} */ index = this.items.findIndex(x => x.id === id);\n    if (index === -1) {\n      throw new Error('Item with this id doesn\\'t exist' + id);\n    } else {\n      this.items.slice(index, 1);\n    }\n    return true;\n  }\n/**\n * @param {?} id\n * @return {?}\n */\ngetMenuItem(id: string): IMenu {\n    const /** @type {?} */ index = this.items.findIndex(x => x.id === id);\n    if (index === -1) {\n      throw new Error('Menu item was not found: ' + id);\n    } else {\n      return this.items[index];\n    }\n  }\n/**\n * @param {?} options\n */\nconstructor (options: any) {\n    this.id = options.id || defaultMenuId;\n    this.isPublic = options.isPublic || true;\n    this.items = options.items || [];\n    this.roles = options.roles || ['*'];\n    this.text = options.text || 'unamed menu item';\n    this.callback = options.callback;\n  }\n}\n\nfunction Menu_tsickle_Closure_declarations() {\n/** @type {?} */\nMenu.prototype.id;\n/** @type {?} */\nMenu.prototype.text;\n/** @type {?} */\nMenu.prototype.isPublic;\n/** @type {?} */\nMenu.prototype.roles;\n/** @type {?} */\nMenu.prototype.items;\n/** @type {?} */\nMenu.prototype.position;\n/** @type {?} */\nMenu.prototype.callback;\n/** @type {?} */\nMenu.prototype.disabled;\n/** @type {?} */\nMenu.prototype.icon;\n}\n\nexport class MenuService {\nprivate menus: Menu[];\n  user: IUser;\n/**\n * @return {?}\n */\ngetMenus(): Observable<Menu[]> {\n    return Observable.of(this.menus);\n  }\n/**\n * @param {?} menuId\n * @return {?}\n */\nmenuExists(menuId: string): boolean {\n    this.menus.map(menu => {\n      if (menu.id === menuId) {\n        return true;\n      }\n    });\n    return false;\n  }\n/**\n * @param {?} menuId\n * @return {?}\n */\nvalidateMenuExistence(menuId: string): Menu {\n    let /** @type {?} */ response = null;\n    if (menuId && menuId.length) {\n      this.menus.map(menu => {\n        if (menu.id === menuId) {\n          response = menu;\n        }\n      });\n    }\n    if (response === null) {\n      throw new Error('Menu does not exist: ' + menuId);\n    } else {\n      return response;\n    }\n  }\n/**\n * @param {?} menuId\n * @return {?}\n */\ngetMenu(menuId: string): Menu {\n    // Validate that the menu exists and return it\n    return this.validateMenuExistence(menuId);\n  };\n/**\n * @param {?} menu\n * @return {?}\n */\naddMenu(menu: IMenu) {\n    if (this.menuExists(menu.id)) {\n      throw new Error ('Menu already exists with this id: ' + menu.id);\n    } else {\n      const /** @type {?} */ index = this.menus.push(menu);\n      return this.menus[index - 1];\n    }\n  };\n/**\n * @param {?} menuId\n * @return {?}\n */\nremoveMenu(menuId: string): boolean {\n    // Validate that the menu exists\n    const /** @type {?} */ index = this.menus.findIndex(x => x.id === menuId);\n    if (index > -1) {\n      this.menus.splice(index, 1);\n      return true;\n    } else {\n      return false;\n    }\n  }\n/**\n * @param {?} menu\n * @return {?}\n */\nshouldRender(menu: IMenu): boolean {\n    if (this.user !== null) {\n      if (menu.roles.indexOf('*') > -1) {\n        return true;\n      } else {\n        for (const /** @type {?} */ userRoleIndex of this.user.roles) {\n          for (const /** @type {?} */ roleIndex of menu.roles) {\n            if (menu.roles[ /** @type {?} */((<any>roleIndex))] === this.user.roles[ /** @type {?} */((<any>userRoleIndex))]) {\n              return true;\n            }\n          }\n        }\n      }\n    } else {\n      return menu.isPublic;\n    }\n    return false;\n  }\n/**\n * @param {?} security\n */\nconstructor(security: SecurityService) {\n    this.user = security.user;\n    this.menus = [];\n    const mainMenu = new Menu({\n      id: 'mainMenu',\n      text: 'Menu'});\n    this.menus.push(mainMenu);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: SecurityService, },\n];\n}\n\nfunction MenuService_tsickle_Closure_declarations() {\n/** @type {?} */\nMenuService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMenuService.ctorParameters;\n/** @type {?} */\nMenuService.prototype.menus;\n/** @type {?} */\nMenuService.prototype.user;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { AuthenticationService } from '../authentication/authentication.service';\nimport { IUser } from '../user/user.component';\nimport { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, Router } from '@angular/router';\nexport class RoleGaurdService implements CanActivate {\n/**\n * @param {?} route\n * @return {?}\n */\ncanActivate(route: ActivatedRouteSnapshot): boolean {\n    // this will be passed from the route config\n    // on the data property\n    const /** @type {?} */ roles: String[] = route.data.roles;\n    const /** @type {?} */ token = localStorage.getItem('user') || '{\"roles\": []}';\n    const /** @type {?} */ user: IUser = JSON.parse(token);\n    const /** @type {?} */ userRoles: string[] = user.roles;\n    if (!this.auth.isAuthenticated() || roles.some(r => userRoles.some(ur => ur === r))) {\n      this.router.navigate(['login']);\n      return false;\n    }\n    return true;\n  }\n/**\n * @param {?} auth\n * @param {?} router\n */\nconstructor(private auth: AuthenticationService,\nprivate router: Router) { }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AuthenticationService, },\n{type: Router, },\n];\n}\n\nfunction RoleGaurdService_tsickle_Closure_declarations() {\n/** @type {?} */\nRoleGaurdService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRoleGaurdService.ctorParameters;\n/** @type {?} */\nRoleGaurdService.prototype.auth;\n/** @type {?} */\nRoleGaurdService.prototype.router;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { AuthenticationService } from '../authentication/authentication.service';\nimport { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nexport class AuthGaurdService implements CanActivate {\n/**\n * @return {?}\n */\ncanActivate(): boolean {\n    if (!this.auth.isAuthenticated()) {\n      this.router.navigate(['login']);\n      return false;\n    }\n    return true;\n  }\n/**\n * @param {?} auth\n * @param {?} router\n */\nconstructor(private auth: AuthenticationService,\npublic router: Router) { }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AuthenticationService, },\n{type: Router, },\n];\n}\n\nfunction AuthGaurdService_tsickle_Closure_declarations() {\n/** @type {?} */\nAuthGaurdService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAuthGaurdService.ctorParameters;\n/** @type {?} */\nAuthGaurdService.prototype.auth;\n/** @type {?} */\nAuthGaurdService.prototype.router;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\n\nexport interface IAuthenticationService {\n  isAuthenticated: () => boolean;\n}\nexport class AuthenticationService implements IAuthenticationService {\n\n  isAuthenticated: () => boolean;\nconstructor() {\n\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AuthenticationService_tsickle_Closure_declarations() {\n/** @type {?} */\nAuthenticationService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAuthenticationService.ctorParameters;\n/** @type {?} */\nAuthenticationService.prototype.isAuthenticated;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { ISecurityService } from './security.service';\nimport { IUser } from './user/user.component';\nimport { Injectable } from '@angular/core';\nexport class SecurityMockService implements ISecurityService {\n  logout: () => void;\n  login: (username: string, password: string) => boolean;\n  user: IUser;\nconstructor() {\n    this.user = {\n      principal: 'demoUser',\n      displayName: 'Demo User',\n      authenticated: false,\n      roles: ['ADMIN', 'USER']\n    };\n\n    this.login = (_username: string, _password: string) => {\n      this.user.authenticated = true;\n      return true;\n    };\n\n    this.logout = () => {\n      this.user.authenticated = false;\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SecurityMockService_tsickle_Closure_declarations() {\n/** @type {?} */\nSecurityMockService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSecurityMockService.ctorParameters;\n/** @type {?} */\nSecurityMockService.prototype.logout;\n/** @type {?} */\nSecurityMockService.prototype.login;\n/** @type {?} */\nSecurityMockService.prototype.user;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { IUser } from './user/user.component';\nimport { Injectable } from '@angular/core';\n\nexport interface ISecurityService {\n  user: IUser;\n  logout: () => void;\n  login: (username: string, password: string) => boolean;\n}\nexport class SecurityService implements ISecurityService {\n\n  user: IUser;\n  login: (username: string, password: string) => boolean;\n/**\n * @return {?}\n */\nlogout() {}\nconstructor() {\n    this.user = {\n      principal: 'demoUser',\n      displayName: 'Demo User',\n      authenticated: true,\n      roles: ['ADMIN', 'USER']\n    };\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SecurityService_tsickle_Closure_declarations() {\n/** @type {?} */\nSecurityService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSecurityService.ctorParameters;\n/** @type {?} */\nSecurityService.prototype.user;\n/** @type {?} */\nSecurityService.prototype.login;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { AuthenticationService } from './authentication/authentication.service';\nimport { AuthGaurdService } from './gaurds/auth-gaurd.service';\nimport { RoleGaurdService } from './gaurds/role-gaurd.service';\nimport { SecurityMockService } from './security-mock.service';\nimport { SecurityService } from './security.service';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { UserComponent } from './user/user.component';\nexport class SecurityModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule\n  ],\n  exports: [ UserComponent ],\n  declarations: [ UserComponent ],\n  providers: []\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SecurityModule_tsickle_Closure_declarations() {\n/** @type {?} */\nSecurityModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSecurityModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, OnInit } from '@angular/core';\n\nexport interface IUser {\n  principal: string;\n  displayName: string;\n  authenticated: boolean;\n  roles: string[];\n}\nexport class UserComponent implements OnInit {\nconstructor() { }\n/**\n * @return {?}\n */\nngOnInit() {\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'app-user',\n  template: `\n    <p>\n      user works!\n    </p>\n`,\n  styles: []\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction UserComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nUserComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUserComponent.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["CommonModule","NgModule","tslib_1.__extends","Input","Optional","Self","_","extendObject","map","Renderer2","ElementRef","Directive","SkipSelf","BehaviorSubject","style","SimpleChange","ɵgetDOM","first","Injectable","filter","Inject","InjectionToken","getDom","DOCUMENT","NgZone","VERSION","Version","ViewChildren","Component","trigger","ContentChildren","forwardRef","ChangeDetectorRef","Subject","observableOf","Output","startWith","merge","of","auditTime","fromEvent","EventEmitter","Subscription","ViewChild","ChangeDetectionStrategy","nextId","animate","transition","state","ViewEncapsulation","ViewContainerRef","ContentChild","TemplateRef","IterableDiffers","takeUntil","Injector","_applyConfigDefaults","NG_VALUE_ACCESSOR","nextUniqueId","clamp","isDevMode","LEFT_ARROW$1","switchMap","FormGroupDirective","NgForm","NgControl","Host","nextId$1","Validators","NG_VALIDATORS","first$1","Attribute","Http","DomSanitizer","http","share","SecurityContext","forkJoin","Observable","defer","CheckboxRequiredValidator","debounceTime","HammerGestureConfig","LOCALE_ID","ApplicationRef","ComponentFactoryResolver","Router","router"],"mappings":"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"}