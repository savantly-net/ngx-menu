{"version":3,"sources":["menu.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAA,EAAgB,MAAA,wBAAA,CAAA;AACzB,OAAO,EAAE,SAAA,EAAmB,KAAA,EAAO,YAAA,EAAwB,MAAA,eAAA,CAAA;AAC3D,OAAO,EAAE,WAAA,EAAyB,MAAA,gBAAA,CAAA;AAClC,OAAO,EAAE,aAAA,EAAc,MAAA,mBAAA,CAAA;AAEvB,MAEC;IAkCD;;;OAGG;IACH,YACI,eAXiB,EAYjB,WAXa;QAYb,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,QAAQ,GAAG,eAAe,CAAC;IAClC,CAAC;IAtCH;;;;OAIG;IACH,QAFG,CAAA,OAAA,EAAA,KAAA;QAGC,IAAI,CAFC,QAAC;aAGH,MAFC,CAAM,CAAC,CAAG,KAAQ,CAAA,CAAE,QAAC,CAAQ,aAAC,CAAa,OAAC,CAAO,KAAC,IAAQ,KAAA,IAAS,CAAA,KAAM,OAAA,CAAQ;aAGpF,OAFC,CAAO,CAAC,IAAI,CAAA,CAAE,SAAC,EAAS,CAAE,CAAC;QAG/B,OAAO,CAFC,QAAC,EAAQ,CAAE;IAGrB,CAAC;IACH;;OAEG;IACH,SAJG;QAKC,IAAI,CAJC,QAAC,CAAQ,OAAC,CAAO,CAAC,IAAI,CAAA,CAAE,SAAC,EAAS,CAAE,CAAC;IAK5C,CAAC;IACH;;;;OAIG;IACH,kBARG,CAAA,OAAA,EAAA,MAAA;QASC,EAAE,CAAC,CAAC,OARC,CAAO,QAAC,CAAQ,CAAC,CAAA;YASpB,OAAO,CARC,QAAC,CAAQ,MAAC,CAAM,CAAC;QAS3B,CAAC;QARC,IAAA,CAAK,CAAA;YASL,OAAO,CARC,IAAC,CAAI,qBAAC,CAAqB,CAAC;QAStC,CAAC;IACH,CAAC;IAAA,CARC;IAmBJ;;OAEG;IACH,QAbG;IAcD,CAAC;;AAXI,wBAAA,GAAoC;IAc3C,EAbE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAcvB,QAAQ,EAbE,aAAA;gBAcV,QAAQ,EAbE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAmDT;gBACD,MAAM,EAbE,CAAA;;GAeP,CAbC;aAcH,EAbC,EAAG;CAcJ,CAbC;AAcF;;GAEG;AAdF,4BAAA,GAAA,MAAA;IAgBD,EAAC,IAAI,EAAE,eAAe,GAAG;IACzB,EAAC,IAAI,EAAE,WAAW,GAAG;CACpB,CAAC;AAdK,4BAAA,GAAyD;IAgBhE,OAAO,EAfE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAgB1B,UAAU,EAfE,CAAA,EAAG,IAAA,EAAM,YAAA,EAAc,IAAA,EAAM,CAAA,aAAE,EAAa,EAAG,EAAE;CAgB5D,CAfC;AAkBF;IACA,gBAAgB;IAChB,aAAa,CAAC,UAAU,CAAC;IACzB;;;OAGG;IACH,aAAa,CAAC,cAAc,CAAC;IAC7B,gBAAgB;IAChB,aAAa,CAAC,cAAc,CAAC;IAC7B,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,KAAK,CAAC;IAC9B,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,WAAW,CAAC;IACpC,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC;IACjC,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,KAAK,CAAC;IAC9B,gBAAgB;IAChB,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC;AACjC,CAAC","file":"menu.component.js","sourceRoot":"","sourcesContent":["import { SecurityService } from '@savantly/ngx-security';\nimport { Component, OnInit, Input, ViewChildren, QueryList } from '@angular/core';\nimport { MenuService, Menu, IMenu } from './menu.service';\nimport { MdMenuTrigger } from '@angular/material';\nimport { Observable } from 'rxjs/Observable';\nexport class MenuComponent implements OnInit {\n   items: any[];\n  menuService: MenuService;\n  security: SecurityService;\n  menus: Observable<Menu[]>;\n\n   triggers: QueryList<MdMenuTrigger>;\n/**\n * @param {?} trigger\n * @param {?} level\n * @return {?}\n */\nopenMenu(trigger: MdMenuTrigger, level: number) {\n    this.triggers\n      .filter((x: any) => x._element.nativeElement.dataset.level >= level && x !== trigger)\n      .forEach(x => x.closeMenu());\n    trigger.openMenu();\n  }\n/**\n * @return {?}\n */\ncloseMenu() {\n    this.triggers.forEach(x => x.closeMenu());\n  }\n/**\n * @param {?} subitem\n * @param {?} $event\n * @return {?}\n */\ndoMenuItemCallback(subitem: IMenu, $event: any) {\n    if (subitem.callback) {\n      subitem.callback($event);\n    } else {\n      console.warn('no callback defined');\n    }\n  };\n/**\n * @param {?} securityService\n * @param {?} menuService\n */\nconstructor(\n    securityService: SecurityService,\n    menuService: MenuService) {\n    this.menuService = menuService;\n    this.security = securityService;\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'sprout-menu',\n  template: `\n    <ng-container *ngFor=\"let item of menuService.getMenus() | async\">\n    \t<ng-container *ngIf=\"menuService.shouldRender(item)\">\n    \t\t<button md-button [mdMenuTriggerFor]=\"menu\" #trigger=\"mdMenuTrigger\" [attr.data-level]=\"1\" (click)=\"openMenu(trigger, 1)\" (mouseexit)=\"$event.stopPropagation()\">\n    \t\t\t{{item.text}}\n    \t\t</button>\n    \t\t<md-menu class=\"custom-menu\" #menu=\"mdMenu\" [overlapTrigger]=\"false\" (close)=\"closeMenu()\" xPosition=\"after\">\n    \t\t\t<ng-container *ngTemplateOutlet=\"subMenu; context: { $implicit: item.items, level: 2 }\"></ng-container>\n    \t\t</md-menu>\n    \t</ng-container>\n    </ng-container>\n\n    <ng-template #subMenu let-items let-level=\"level\">\n      <ng-container *ngFor=\"let item of items\">\n        <ng-container *ngIf=\"item.items && item.items.length else simpleTmpl\">\n          <button *ngIf=\"!item.divider\" md-menu-item [disabled]=\"item.disabled\"\n                  [mdMenuTriggerFor]=\"menu\"\n                  #trigger=\"mdMenuTrigger\"\n                  [attr.data-level]=\"level\"\n                  (mouseenter)=\"openMenu(trigger, level);\" (click)=\"$event.stopPropagation()\">\n            <span>{{item.text}}</span>\n            <span *ngIf=\"item.extraText\">{{item.extraText}}</span>\n            <md-icon *ngIf=\"item.icon\">{{item.icon}}</md-icon>\n          </button>\n          <md-menu class=\"sub-menu\" #menu=\"mdMenu\" [overlapTrigger]=\"false\" xPosition=\"before\" >\n            <ng-container *ngTemplateOutlet=\"subMenu; context: { $implicit: item.items || [], level: level + 1 }\"></ng-container>\n          </md-menu>\n          <md-divider *ngIf=\"item.divider\" class=\"mat-divider\"></md-divider>\n        </ng-container>\n        <ng-template #simpleTmpl>\n          <button *ngIf=\"!item.divider\" md-menu-item [disabled]=\"item.disabled\" (click)=\"doMenuItemCallback(item, $event)\">\n            <span>{{item.text}}</span>\n            <span *ngIf=\"item.extraText\">{{item.extraText}}</span>\n          </button>\n          <md-divider *ngIf=\"item.divider\" class=\"mat-divider\"></md-divider>\n        </ng-template>\n      </ng-container>\n    </ng-template>\n  `,\n  styles: [`\n\n  `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: SecurityService, },\n{type: MenuService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'items': [{ type: Input },],\n'triggers': [{ type: ViewChildren, args: [MdMenuTrigger, ] },],\n};\n}\n\nfunction MenuComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nMenuComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMenuComponent.ctorParameters;\n/** @type {?} */\nMenuComponent.propDecorators;\n/** @type {?} */\nMenuComponent.prototype.items;\n/** @type {?} */\nMenuComponent.prototype.menuService;\n/** @type {?} */\nMenuComponent.prototype.security;\n/** @type {?} */\nMenuComponent.prototype.menus;\n/** @type {?} */\nMenuComponent.prototype.triggers;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}